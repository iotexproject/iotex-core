// Copyright (c) 2019 IoTeX Foundation
// This source code is provided 'as is' and no warranties are given as to title or non-infringement, merchantability
// or fitness for purpose and, to the extent permitted by law, all liability for your use of the code is disclaimed.
// This source code is governed by Apache License 2.0 that can be found in the LICENSE file.

package systemcontracts

import (
	"encoding/hex"
)

// CandidateStorageABI is the ABI for the CandidateStorage contract
const CandidateStorageABI = `[
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "nsKey",
          "type": "bytes32"
        }
      ],
      "name": "CandidateListCleared",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "nsKey",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "candidateAddress",
          "type": "address"
        }
      ],
      "name": "CandidateStored",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "ns",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "key",
          "type": "bytes"
        }
      ],
      "name": "getCandidateList",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "candidateAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "votes",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "rewardAddress",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "canName",
              "type": "bytes32"
            }
          ],
          "internalType": "struct CandidateStorage.Candidate[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "ns",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "key",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "candidateAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "votes",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "rewardAddress",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "canName",
              "type": "bytes32"
            }
          ],
          "internalType": "struct CandidateStorage.Candidate[]",
          "name": "candidates",
          "type": "tuple[]"
        }
      ],
      "name": "storeCandidateList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ]`

const CandidateStorageByteCodeStr = `608060405234801561001057600080fd5b50610e16806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063c2c40a001461003b578063e76880cd1461006b575b600080fd5b610055600480360381019061005091906107b3565b610087565b60405161006291906109a2565b60405180910390f35b61008560048036038101906100809190610b8d565b610257565b005b60606000838360405160200161009e929190610cec565b60405160208183030381529060405280519060200120905060006001600083815260200190815260200160002054905060008167ffffffffffffffff8111156100ea576100e96105e7565b5b60405190808252806020026020018201604052801561012357816020015b610110610561565b8152602001906001900390816101085790505b50905060005b8281101561024a5760008085815260200190815260200160002060008281526020019081526020016000206040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160038201548152505082828151811061023257610231610d10565b5b60200260200101819052508080600101915050610129565b5080935050505092915050565b6000838360405160200161026c929190610cec565b60405160208183030381529060405280519060200120905061028d81610462565b6000805b835181101561044257600073ffffffffffffffffffffffffffffffffffffffff168482815181106102c5576102c4610d10565b5b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff1614610435578381815181106102ff576102fe610d10565b5b6020026020010151600080858152602001908152602001600020600084815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506060820151816003015590505081837fad35ae85f4a4aafa992c0afbd9bafa7e46a908a2dbe90ee0b9d254c98627f32686848151811061040557610404610d10565b5b60200260200101516000015160405161041e9190610d4e565b60405180910390a3818061043190610d98565b9250505b8080600101915050610291565b508060016000848152602001908152602001600020819055505050505050565b60006001600083815260200190815260200160002054905060005b81811015610516576000808481526020019081526020016000206000828152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560018201600090556002820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560038201600090555050808060010191505061047d565b5060006001600084815260200190815260200160002081905550817fd101dc1935da770dd59212eb70cc53d2590a959097fb658ba5365c61a27dc0b260405160405180910390a25050565b6040518060800160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600080191681525090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61061f826105d6565b810181811067ffffffffffffffff8211171561063e5761063d6105e7565b5b80604052505050565b60006106516105b8565b905061065d8282610616565b919050565b600067ffffffffffffffff82111561067d5761067c6105e7565b5b610686826105d6565b9050602081019050919050565b82818337600083830152505050565b60006106b56106b084610662565b610647565b9050828152602081018484840111156106d1576106d06105d1565b5b6106dc848285610693565b509392505050565b600082601f8301126106f9576106f86105cc565b5b81356107098482602086016106a2565b91505092915050565b600067ffffffffffffffff82111561072d5761072c6105e7565b5b610736826105d6565b9050602081019050919050565b600061075661075184610712565b610647565b905082815260208101848484011115610772576107716105d1565b5b61077d848285610693565b509392505050565b600082601f83011261079a576107996105cc565b5b81356107aa848260208601610743565b91505092915050565b600080604083850312156107ca576107c96105c2565b5b600083013567ffffffffffffffff8111156107e8576107e76105c7565b5b6107f4858286016106e4565b925050602083013567ffffffffffffffff811115610815576108146105c7565b5b61082185828601610785565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061088282610857565b9050919050565b61089281610877565b82525050565b6000819050919050565b6108ab81610898565b82525050565b6000819050919050565b6108c4816108b1565b82525050565b6080820160008201516108e06000850182610889565b5060208201516108f360208501826108a2565b5060408201516109066040850182610889565b50606082015161091960608501826108bb565b50505050565b600061092b83836108ca565b60808301905092915050565b6000602082019050919050565b600061094f8261082b565b6109598185610836565b935061096483610847565b8060005b8381101561099557815161097c888261091f565b975061098783610937565b925050600181019050610968565b5085935050505092915050565b600060208201905081810360008301526109bc8184610944565b905092915050565b600067ffffffffffffffff8211156109df576109de6105e7565b5b602082029050602081019050919050565b600080fd5b600080fd5b610a0381610877565b8114610a0e57600080fd5b50565b600081359050610a20816109fa565b92915050565b610a2f81610898565b8114610a3a57600080fd5b50565b600081359050610a4c81610a26565b92915050565b610a5b816108b1565b8114610a6657600080fd5b50565b600081359050610a7881610a52565b92915050565b600060808284031215610a9457610a936109f5565b5b610a9e6080610647565b90506000610aae84828501610a11565b6000830152506020610ac284828501610a3d565b6020830152506040610ad684828501610a11565b6040830152506060610aea84828501610a69565b60608301525092915050565b6000610b09610b04846109c4565b610647565b90508083825260208201905060808402830185811115610b2c57610b2b6109f0565b5b835b81811015610b555780610b418882610a7e565b845260208401935050608081019050610b2e565b5050509392505050565b600082601f830112610b7457610b736105cc565b5b8135610b84848260208601610af6565b91505092915050565b600080600060608486031215610ba657610ba56105c2565b5b600084013567ffffffffffffffff811115610bc457610bc36105c7565b5b610bd0868287016106e4565b935050602084013567ffffffffffffffff811115610bf157610bf06105c7565b5b610bfd86828701610785565b925050604084013567ffffffffffffffff811115610c1e57610c1d6105c7565b5b610c2a86828701610b5f565b9150509250925092565b600081519050919050565b600081905092915050565b60005b83811015610c68578082015181840152602081019050610c4d565b60008484015250505050565b6000610c7f82610c34565b610c898185610c3f565b9350610c99818560208601610c4a565b80840191505092915050565b600081519050919050565b600081905092915050565b6000610cc682610ca5565b610cd08185610cb0565b9350610ce0818560208601610c4a565b80840191505092915050565b6000610cf88285610c74565b9150610d048284610cbb565b91508190509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b610d4881610877565b82525050565b6000602082019050610d636000830184610d3f565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610da382610898565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610dd557610dd4610d69565b5b60018201905091905056fea2646970667358221220a663b76302e25a18623ff2865fc46651506783c814aa66e4c307b31d047f303b64736f6c63430008180033`

var CandidateStorageByteCode []byte

func init() {
	var err error
	CandidateStorageByteCode, err = hex.DecodeString(CandidateStorageByteCodeStr)
	if err != nil {
		panic("Failed to decode CandidateStorageByteCode: " + err.Error())
	}
}
