// Code generated by idl2go from JSON generated by Barrister v0.1.6
package api_v2

import (
	"fmt"
	"github.com/coopernurse/barrister-go"
	"reflect"
)

const BarristerVersion string = "0.1.6"
const BarristerChecksum string = "8055a549e06154e81a0c4c5ab26fb431"
const BarristerDateGenerated int64 = 1549413668653000000

type Explorer interface {
	GetAddressDetails(address string) (string, error)
	GetLastActionsByRange(startBlockHeight int64, offset int64, limit int64) ([]string, error)
	GetActionByHash(actionHash string) (string, error)
	GetActionsByAddress(address string, offset int64, limit int64) ([]string, error)
	GetUnconfirmedActionsByAddress(address string, offset int64, limit int64) ([]string, error)
	GetActionsByBlockHash(blkHash string, offset int64, limit int64) ([]string, error)
	GetLastBlocksByRange(offset int64, limit int64) ([]string, error)
	GetBlockByHash(blkHash string) (string, error)
	GetChainMeta() (string, error)
	GetConsensusMetrics() (string, error)
	SendAction(request string) (string, error)
	GetReceiptByActionHash(hash string) (string, error)
	ReadExecutionState(request string) (string, error)
	GetDeposits(subChainID int64, offset int64, limit int64) ([]string, error)
	SuggestGasPrice() (int64, error)
	EstimateGasForAction(request string) (int64, error)
}

func NewExplorerProxy(c barrister.Client) Explorer {
	return ExplorerProxy{c, barrister.MustParseIdlJson([]byte(IdlJsonRaw))}
}

type ExplorerProxy struct {
	client barrister.Client
	idl    *barrister.Idl
}

func (_p ExplorerProxy) GetAddressDetails(address string) (string, error) {
	_res, _err := _p.client.Call("Explorer.getAddressDetails", address)
	if _err == nil {
		_retType := _p.idl.Method("Explorer.getAddressDetails").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf(""), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.(string)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("Explorer.getAddressDetails returned invalid type: %v", _t)
			return "", &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return "", _err
}

func (_p ExplorerProxy) GetLastActionsByRange(startBlockHeight int64, offset int64, limit int64) ([]string, error) {
	_res, _err := _p.client.Call("Explorer.getLastActionsByRange", startBlockHeight, offset, limit)
	if _err == nil {
		_retType := _p.idl.Method("Explorer.getLastActionsByRange").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf([]string{}), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.([]string)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("Explorer.getLastActionsByRange returned invalid type: %v", _t)
			return []string{}, &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return []string{}, _err
}

func (_p ExplorerProxy) GetActionByHash(actionHash string) (string, error) {
	_res, _err := _p.client.Call("Explorer.getActionByHash", actionHash)
	if _err == nil {
		_retType := _p.idl.Method("Explorer.getActionByHash").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf(""), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.(string)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("Explorer.getActionByHash returned invalid type: %v", _t)
			return "", &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return "", _err
}

func (_p ExplorerProxy) GetActionsByAddress(address string, offset int64, limit int64) ([]string, error) {
	_res, _err := _p.client.Call("Explorer.getActionsByAddress", address, offset, limit)
	if _err == nil {
		_retType := _p.idl.Method("Explorer.getActionsByAddress").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf([]string{}), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.([]string)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("Explorer.getActionsByAddress returned invalid type: %v", _t)
			return []string{}, &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return []string{}, _err
}

func (_p ExplorerProxy) GetUnconfirmedActionsByAddress(address string, offset int64, limit int64) ([]string, error) {
	_res, _err := _p.client.Call("Explorer.getUnconfirmedActionsByAddress", address, offset, limit)
	if _err == nil {
		_retType := _p.idl.Method("Explorer.getUnconfirmedActionsByAddress").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf([]string{}), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.([]string)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("Explorer.getUnconfirmedActionsByAddress returned invalid type: %v", _t)
			return []string{}, &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return []string{}, _err
}

func (_p ExplorerProxy) GetActionsByBlockHash(blkHash string, offset int64, limit int64) ([]string, error) {
	_res, _err := _p.client.Call("Explorer.getActionsByBlockHash", blkHash, offset, limit)
	if _err == nil {
		_retType := _p.idl.Method("Explorer.getActionsByBlockHash").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf([]string{}), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.([]string)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("Explorer.getActionsByBlockHash returned invalid type: %v", _t)
			return []string{}, &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return []string{}, _err
}

func (_p ExplorerProxy) GetLastBlocksByRange(offset int64, limit int64) ([]string, error) {
	_res, _err := _p.client.Call("Explorer.getLastBlocksByRange", offset, limit)
	if _err == nil {
		_retType := _p.idl.Method("Explorer.getLastBlocksByRange").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf([]string{}), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.([]string)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("Explorer.getLastBlocksByRange returned invalid type: %v", _t)
			return []string{}, &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return []string{}, _err
}

func (_p ExplorerProxy) GetBlockByHash(blkHash string) (string, error) {
	_res, _err := _p.client.Call("Explorer.getBlockByHash", blkHash)
	if _err == nil {
		_retType := _p.idl.Method("Explorer.getBlockByHash").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf(""), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.(string)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("Explorer.getBlockByHash returned invalid type: %v", _t)
			return "", &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return "", _err
}

func (_p ExplorerProxy) GetChainMeta() (string, error) {
	_res, _err := _p.client.Call("Explorer.getChainMeta")
	if _err == nil {
		_retType := _p.idl.Method("Explorer.getChainMeta").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf(""), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.(string)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("Explorer.getChainMeta returned invalid type: %v", _t)
			return "", &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return "", _err
}

func (_p ExplorerProxy) GetConsensusMetrics() (string, error) {
	_res, _err := _p.client.Call("Explorer.getConsensusMetrics")
	if _err == nil {
		_retType := _p.idl.Method("Explorer.getConsensusMetrics").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf(""), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.(string)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("Explorer.getConsensusMetrics returned invalid type: %v", _t)
			return "", &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return "", _err
}

func (_p ExplorerProxy) SendAction(request string) (string, error) {
	_res, _err := _p.client.Call("Explorer.sendAction", request)
	if _err == nil {
		_retType := _p.idl.Method("Explorer.sendAction").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf(""), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.(string)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("Explorer.sendAction returned invalid type: %v", _t)
			return "", &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return "", _err
}

func (_p ExplorerProxy) GetReceiptByActionHash(hash string) (string, error) {
	_res, _err := _p.client.Call("Explorer.getReceiptByActionHash", hash)
	if _err == nil {
		_retType := _p.idl.Method("Explorer.getReceiptByActionHash").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf(""), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.(string)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("Explorer.getReceiptByActionHash returned invalid type: %v", _t)
			return "", &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return "", _err
}

func (_p ExplorerProxy) ReadExecutionState(request string) (string, error) {
	_res, _err := _p.client.Call("Explorer.readExecutionState", request)
	if _err == nil {
		_retType := _p.idl.Method("Explorer.readExecutionState").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf(""), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.(string)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("Explorer.readExecutionState returned invalid type: %v", _t)
			return "", &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return "", _err
}

func (_p ExplorerProxy) GetDeposits(subChainID int64, offset int64, limit int64) ([]string, error) {
	_res, _err := _p.client.Call("Explorer.getDeposits", subChainID, offset, limit)
	if _err == nil {
		_retType := _p.idl.Method("Explorer.getDeposits").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf([]string{}), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.([]string)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("Explorer.getDeposits returned invalid type: %v", _t)
			return []string{}, &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return []string{}, _err
}

func (_p ExplorerProxy) SuggestGasPrice() (int64, error) {
	_res, _err := _p.client.Call("Explorer.suggestGasPrice")
	if _err == nil {
		_retType := _p.idl.Method("Explorer.suggestGasPrice").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf(int64(0)), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.(int64)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("Explorer.suggestGasPrice returned invalid type: %v", _t)
			return int64(0), &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return int64(0), _err
}

func (_p ExplorerProxy) EstimateGasForAction(request string) (int64, error) {
	_res, _err := _p.client.Call("Explorer.estimateGasForAction", request)
	if _err == nil {
		_retType := _p.idl.Method("Explorer.estimateGasForAction").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf(int64(0)), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.(int64)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("Explorer.estimateGasForAction returned invalid type: %v", _t)
			return int64(0), &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return int64(0), _err
}

func NewJSONServer(idl *barrister.Idl, forceASCII bool, explorer Explorer) barrister.Server {
	return NewServer(idl, &barrister.JsonSerializer{forceASCII}, explorer)
}

func NewServer(idl *barrister.Idl, ser barrister.Serializer, explorer Explorer) barrister.Server {
	_svr := barrister.NewServer(idl, ser)
	_svr.AddHandler("Explorer", explorer)
	return _svr
}

var IdlJsonRaw = `[
    {
        "type": "comment",
        "name": "",
        "comment": "",
        "value": "Copyright (c) 2019 IoTeX\nThis is an alpha (internal) release and is not suitable for production. This source code is provided 'as is' and no\nwarranties are given as to title or non-infringement, merchantability or fitness for purpose and, to the extent\npermitted by law, all liability for your use of the code is disclaimed. This source code is governed by Apache\nLicense 2.0 that can be found in the LICENSE file.",
        "extends": "",
        "fields": null,
        "values": null,
        "functions": null,
        "barrister_version": "",
        "date_generated": 0,
        "checksum": ""
    },
    {
        "type": "comment",
        "name": "",
        "comment": "",
        "value": "To compile this file:\n1. Install the barrister translator (IDL -\u003e JSON)\nyou need to be root (or use sudo)\npip install barrister",
        "extends": "",
        "fields": null,
        "values": null,
        "functions": null,
        "barrister_version": "",
        "date_generated": 0,
        "checksum": ""
    },
    {
        "type": "comment",
        "name": "",
        "comment": "",
        "value": "2. Install barrister-go\ngo get github.com/coopernurse/barrister-go\ngo install github.com/coopernurse/barrister-go/idl2go",
        "extends": "",
        "fields": null,
        "values": null,
        "functions": null,
        "barrister_version": "",
        "date_generated": 0,
        "checksum": ""
    },
    {
        "type": "comment",
        "name": "",
        "comment": "",
        "value": "3. barrister api_v2.idl | $GOPATH/bin/idl2go -i -p api_v2",
        "extends": "",
        "fields": null,
        "values": null,
        "functions": null,
        "barrister_version": "",
        "date_generated": 0,
        "checksum": ""
    },
    {
        "type": "interface",
        "name": "Explorer",
        "comment": "",
        "value": "",
        "extends": "",
        "fields": null,
        "values": null,
        "functions": [
            {
                "name": "getAddressDetails",
                "comment": "get the address detail of an address\nresponse is the JSON string of AddressDetailsPb",
                "params": [
                    {
                        "name": "address",
                        "type": "string",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    }
                ],
                "returns": {
                    "name": "",
                    "type": "string",
                    "optional": false,
                    "is_array": false,
                    "comment": ""
                }
            },
            {
                "name": "getLastActionsByRange",
                "comment": "get list of actions by start block height, action offset and limit\nresponse is a list of JSON strings of ActionPb",
                "params": [
                    {
                        "name": "startBlockHeight",
                        "type": "int",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    },
                    {
                        "name": "offset",
                        "type": "int",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    },
                    {
                        "name": "limit",
                        "type": "int",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    }
                ],
                "returns": {
                    "name": "",
                    "type": "string",
                    "optional": false,
                    "is_array": true,
                    "comment": ""
                }
            },
            {
                "name": "getActionByHash",
                "comment": "get action from action hash\nresponse is a JSON string of ActionPb",
                "params": [
                    {
                        "name": "actionHash",
                        "type": "string",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    }
                ],
                "returns": {
                    "name": "",
                    "type": "string",
                    "optional": false,
                    "is_array": false,
                    "comment": ""
                }
            },
            {
                "name": "getActionsByAddress",
                "comment": "get list of actions belonging to an address\nresponse is a list of JSON strings of ActionPb",
                "params": [
                    {
                        "name": "address",
                        "type": "string",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    },
                    {
                        "name": "offset",
                        "type": "int",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    },
                    {
                        "name": "limit",
                        "type": "int",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    }
                ],
                "returns": {
                    "name": "",
                    "type": "string",
                    "optional": false,
                    "is_array": true,
                    "comment": ""
                }
            },
            {
                "name": "getUnconfirmedActionsByAddress",
                "comment": "get list of unconfirmed actions in actpool belonging to an address\nresponse is a list of JSON strings of ActionPb",
                "params": [
                    {
                        "name": "address",
                        "type": "string",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    },
                    {
                        "name": "offset",
                        "type": "int",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    },
                    {
                        "name": "limit",
                        "type": "int",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    }
                ],
                "returns": {
                    "name": "",
                    "type": "string",
                    "optional": false,
                    "is_array": true,
                    "comment": ""
                }
            },
            {
                "name": "getActionsByBlockHash",
                "comment": "get all actions in a block\nresponse is a list of JSON strings of ActionPb",
                "params": [
                    {
                        "name": "blkHash",
                        "type": "string",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    },
                    {
                        "name": "offset",
                        "type": "int",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    },
                    {
                        "name": "limit",
                        "type": "int",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    }
                ],
                "returns": {
                    "name": "",
                    "type": "string",
                    "optional": false,
                    "is_array": true,
                    "comment": ""
                }
            },
            {
                "name": "getLastBlocksByRange",
                "comment": "get list of block metadata by block id offset and limit\nresponse is a list of JSON strings of BlockMetaPb",
                "params": [
                    {
                        "name": "offset",
                        "type": "int",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    },
                    {
                        "name": "limit",
                        "type": "int",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    }
                ],
                "returns": {
                    "name": "",
                    "type": "string",
                    "optional": false,
                    "is_array": true,
                    "comment": ""
                }
            },
            {
                "name": "getBlockByHash",
                "comment": "get block metadata by block hash\nresponse is a JSON string of BlockMetaPb",
                "params": [
                    {
                        "name": "blkHash",
                        "type": "string",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    }
                ],
                "returns": {
                    "name": "",
                    "type": "string",
                    "optional": false,
                    "is_array": false,
                    "comment": ""
                }
            },
            {
                "name": "getChainMeta",
                "comment": "get chain metadata\nreturn value is a JSON string of ChainMetaPb",
                "params": [],
                "returns": {
                    "name": "",
                    "type": "string",
                    "optional": false,
                    "is_array": false,
                    "comment": ""
                }
            },
            {
                "name": "getConsensusMetrics",
                "comment": "get consensus metrics\nresponse is a JSON string of ConsensusMetricsPb",
                "params": [],
                "returns": {
                    "name": "",
                    "type": "string",
                    "optional": false,
                    "is_array": false,
                    "comment": ""
                }
            },
            {
                "name": "sendAction",
                "comment": "sendAction\nrequest is a JSON string of ActionPb\nresponse is the hash of action",
                "params": [
                    {
                        "name": "request",
                        "type": "string",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    }
                ],
                "returns": {
                    "name": "",
                    "type": "string",
                    "optional": false,
                    "is_array": false,
                    "comment": ""
                }
            },
            {
                "name": "getReceiptByActionHash",
                "comment": "get receipt by action Hash\nresponse is a JSON string of ReceiptPb",
                "params": [
                    {
                        "name": "hash",
                        "type": "string",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    }
                ],
                "returns": {
                    "name": "",
                    "type": "string",
                    "optional": false,
                    "is_array": false,
                    "comment": ""
                }
            },
            {
                "name": "readExecutionState",
                "comment": "TODO: read execution state\nrequest is a JSON string of ActionPb\nresponse is the return value of receipt",
                "params": [
                    {
                        "name": "request",
                        "type": "string",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    }
                ],
                "returns": {
                    "name": "",
                    "type": "string",
                    "optional": false,
                    "is_array": false,
                    "comment": ""
                }
            },
            {
                "name": "getDeposits",
                "comment": "get deposits on a sub-chain\nresponse is a list of JSON strings of DepositPb",
                "params": [
                    {
                        "name": "subChainID",
                        "type": "int",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    },
                    {
                        "name": "offset",
                        "type": "int",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    },
                    {
                        "name": "limit",
                        "type": "int",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    }
                ],
                "returns": {
                    "name": "",
                    "type": "string",
                    "optional": false,
                    "is_array": true,
                    "comment": ""
                }
            },
            {
                "name": "suggestGasPrice",
                "comment": "suggest gas price",
                "params": [],
                "returns": {
                    "name": "",
                    "type": "int",
                    "optional": false,
                    "is_array": false,
                    "comment": ""
                }
            },
            {
                "name": "estimateGasForAction",
                "comment": "estimate gas for action\nrequest is a JSON string of ActionPb",
                "params": [
                    {
                        "name": "request",
                        "type": "string",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    }
                ],
                "returns": {
                    "name": "",
                    "type": "int",
                    "optional": false,
                    "is_array": false,
                    "comment": ""
                }
            }
        ],
        "barrister_version": "",
        "date_generated": 0,
        "checksum": ""
    },
    {
        "type": "meta",
        "name": "",
        "comment": "",
        "value": "",
        "extends": "",
        "fields": null,
        "values": null,
        "functions": null,
        "barrister_version": "0.1.6",
        "date_generated": 1549413668653,
        "checksum": "8055a549e06154e81a0c4c5ab26fb431"
    }
]`
