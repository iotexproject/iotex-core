// Code generated by MockGen. DO NOT EDIT.
// Source: ./api/coreservice_with_height.go

// Package api is a generated GoMock package.
package api

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	address "github.com/iotexproject/iotex-address/address"
	action "github.com/iotexproject/iotex-core/v2/action"
	iotextypes "github.com/iotexproject/iotex-proto/golang/iotextypes"
)

// MockCoreServiceReaderWithHeight is a mock of CoreServiceReaderWithHeight interface.
type MockCoreServiceReaderWithHeight struct {
	ctrl     *gomock.Controller
	recorder *MockCoreServiceReaderWithHeightMockRecorder
}

// MockCoreServiceReaderWithHeightMockRecorder is the mock recorder for MockCoreServiceReaderWithHeight.
type MockCoreServiceReaderWithHeightMockRecorder struct {
	mock *MockCoreServiceReaderWithHeight
}

// NewMockCoreServiceReaderWithHeight creates a new mock instance.
func NewMockCoreServiceReaderWithHeight(ctrl *gomock.Controller) *MockCoreServiceReaderWithHeight {
	mock := &MockCoreServiceReaderWithHeight{ctrl: ctrl}
	mock.recorder = &MockCoreServiceReaderWithHeightMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCoreServiceReaderWithHeight) EXPECT() *MockCoreServiceReaderWithHeightMockRecorder {
	return m.recorder
}

// Account mocks base method.
func (m *MockCoreServiceReaderWithHeight) Account(arg0 address.Address) (*iotextypes.AccountMeta, *iotextypes.BlockIdentifier, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Account", arg0)
	ret0, _ := ret[0].(*iotextypes.AccountMeta)
	ret1, _ := ret[1].(*iotextypes.BlockIdentifier)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Account indicates an expected call of Account.
func (mr *MockCoreServiceReaderWithHeightMockRecorder) Account(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Account", reflect.TypeOf((*MockCoreServiceReaderWithHeight)(nil).Account), arg0)
}

// ReadContract mocks base method.
func (m *MockCoreServiceReaderWithHeight) ReadContract(arg0 context.Context, arg1 address.Address, arg2 action.Envelope) (string, *iotextypes.Receipt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadContract", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*iotextypes.Receipt)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReadContract indicates an expected call of ReadContract.
func (mr *MockCoreServiceReaderWithHeightMockRecorder) ReadContract(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadContract", reflect.TypeOf((*MockCoreServiceReaderWithHeight)(nil).ReadContract), arg0, arg1, arg2)
}
