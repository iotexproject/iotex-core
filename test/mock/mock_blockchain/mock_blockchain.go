// Code generated by MockGen. DO NOT EDIT.
// Source: ./blockchain/blockchain.go

// Package mock_blockchain is a generated GoMock package.
package mock_blockchain

import (
	gomock "github.com/golang/mock/gomock"
	blockchain "github.com/iotexproject/iotex-core/blockchain"
	action "github.com/iotexproject/iotex-core/blockchain/action"
	common "github.com/iotexproject/iotex-core/common"
	iotxaddress "github.com/iotexproject/iotex-core/iotxaddress"
	state "github.com/iotexproject/iotex-core/state"
	big "math/big"
	reflect "reflect"
)

// MockBlockchain is a mock of Blockchain interface
type MockBlockchain struct {
	ctrl     *gomock.Controller
	recorder *MockBlockchainMockRecorder
}

// MockBlockchainMockRecorder is the mock recorder for MockBlockchain
type MockBlockchainMockRecorder struct {
	mock *MockBlockchain
}

// NewMockBlockchain creates a new mock instance
func NewMockBlockchain(ctrl *gomock.Controller) *MockBlockchain {
	mock := &MockBlockchain{ctrl: ctrl}
	mock.recorder = &MockBlockchainMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBlockchain) EXPECT() *MockBlockchainMockRecorder {
	return m.recorder
}

// Init mocks base method
func (m *MockBlockchain) Init() error {
	ret := m.ctrl.Call(m, "Init")
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init
func (mr *MockBlockchainMockRecorder) Init() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockBlockchain)(nil).Init))
}

// Start mocks base method
func (m *MockBlockchain) Start() error {
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start
func (mr *MockBlockchainMockRecorder) Start() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockBlockchain)(nil).Start))
}

// Stop mocks base method
func (m *MockBlockchain) Stop() error {
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop
func (mr *MockBlockchainMockRecorder) Stop() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockBlockchain)(nil).Stop))
}

// GetHeightByHash mocks base method
func (m *MockBlockchain) GetHeightByHash(hash common.Hash32B) (uint64, error) {
	ret := m.ctrl.Call(m, "GetHeightByHash", hash)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHeightByHash indicates an expected call of GetHeightByHash
func (mr *MockBlockchainMockRecorder) GetHeightByHash(hash interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHeightByHash", reflect.TypeOf((*MockBlockchain)(nil).GetHeightByHash), hash)
}

// GetHashByHeight mocks base method
func (m *MockBlockchain) GetHashByHeight(height uint64) (common.Hash32B, error) {
	ret := m.ctrl.Call(m, "GetHashByHeight", height)
	ret0, _ := ret[0].(common.Hash32B)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHashByHeight indicates an expected call of GetHashByHeight
func (mr *MockBlockchainMockRecorder) GetHashByHeight(height interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHashByHeight", reflect.TypeOf((*MockBlockchain)(nil).GetHashByHeight), height)
}

// GetBlockByHeight mocks base method
func (m *MockBlockchain) GetBlockByHeight(height uint64) (*blockchain.Block, error) {
	ret := m.ctrl.Call(m, "GetBlockByHeight", height)
	ret0, _ := ret[0].(*blockchain.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockByHeight indicates an expected call of GetBlockByHeight
func (mr *MockBlockchainMockRecorder) GetBlockByHeight(height interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockByHeight", reflect.TypeOf((*MockBlockchain)(nil).GetBlockByHeight), height)
}

// GetBlockByHash mocks base method
func (m *MockBlockchain) GetBlockByHash(hash common.Hash32B) (*blockchain.Block, error) {
	ret := m.ctrl.Call(m, "GetBlockByHash", hash)
	ret0, _ := ret[0].(*blockchain.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockByHash indicates an expected call of GetBlockByHash
func (mr *MockBlockchainMockRecorder) GetBlockByHash(hash interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockByHash", reflect.TypeOf((*MockBlockchain)(nil).GetBlockByHash), hash)
}

// GetTotalTransfers mocks base method
func (m *MockBlockchain) GetTotalTransfers() (uint64, error) {
	ret := m.ctrl.Call(m, "GetTotalTransfers")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalTransfers indicates an expected call of GetTotalTransfers
func (mr *MockBlockchainMockRecorder) GetTotalTransfers() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalTransfers", reflect.TypeOf((*MockBlockchain)(nil).GetTotalTransfers))
}

// GetTotalVotes mocks base method
func (m *MockBlockchain) GetTotalVotes() (uint64, error) {
	ret := m.ctrl.Call(m, "GetTotalVotes")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalVotes indicates an expected call of GetTotalVotes
func (mr *MockBlockchainMockRecorder) GetTotalVotes() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalVotes", reflect.TypeOf((*MockBlockchain)(nil).GetTotalVotes))
}

// GetTransfersFromAddress mocks base method
func (m *MockBlockchain) GetTransfersFromAddress(address string) ([]common.Hash32B, error) {
	ret := m.ctrl.Call(m, "GetTransfersFromAddress", address)
	ret0, _ := ret[0].([]common.Hash32B)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransfersFromAddress indicates an expected call of GetTransfersFromAddress
func (mr *MockBlockchainMockRecorder) GetTransfersFromAddress(address interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransfersFromAddress", reflect.TypeOf((*MockBlockchain)(nil).GetTransfersFromAddress), address)
}

// GetTransfersToAddress mocks base method
func (m *MockBlockchain) GetTransfersToAddress(address string) ([]common.Hash32B, error) {
	ret := m.ctrl.Call(m, "GetTransfersToAddress", address)
	ret0, _ := ret[0].([]common.Hash32B)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransfersToAddress indicates an expected call of GetTransfersToAddress
func (mr *MockBlockchainMockRecorder) GetTransfersToAddress(address interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransfersToAddress", reflect.TypeOf((*MockBlockchain)(nil).GetTransfersToAddress), address)
}

// GetTransferByTransferHash mocks base method
func (m *MockBlockchain) GetTransferByTransferHash(hash common.Hash32B) (*action.Transfer, error) {
	ret := m.ctrl.Call(m, "GetTransferByTransferHash", hash)
	ret0, _ := ret[0].(*action.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransferByTransferHash indicates an expected call of GetTransferByTransferHash
func (mr *MockBlockchainMockRecorder) GetTransferByTransferHash(hash interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransferByTransferHash", reflect.TypeOf((*MockBlockchain)(nil).GetTransferByTransferHash), hash)
}

// GetBlockHashByTransferHash mocks base method
func (m *MockBlockchain) GetBlockHashByTransferHash(hash common.Hash32B) (common.Hash32B, error) {
	ret := m.ctrl.Call(m, "GetBlockHashByTransferHash", hash)
	ret0, _ := ret[0].(common.Hash32B)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockHashByTransferHash indicates an expected call of GetBlockHashByTransferHash
func (mr *MockBlockchainMockRecorder) GetBlockHashByTransferHash(hash interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockHashByTransferHash", reflect.TypeOf((*MockBlockchain)(nil).GetBlockHashByTransferHash), hash)
}

// GetVotesFromAddress mocks base method
func (m *MockBlockchain) GetVotesFromAddress(address string) ([]common.Hash32B, error) {
	ret := m.ctrl.Call(m, "GetVotesFromAddress", address)
	ret0, _ := ret[0].([]common.Hash32B)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVotesFromAddress indicates an expected call of GetVotesFromAddress
func (mr *MockBlockchainMockRecorder) GetVotesFromAddress(address interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVotesFromAddress", reflect.TypeOf((*MockBlockchain)(nil).GetVotesFromAddress), address)
}

// GetVotesToAddress mocks base method
func (m *MockBlockchain) GetVotesToAddress(address string) ([]common.Hash32B, error) {
	ret := m.ctrl.Call(m, "GetVotesToAddress", address)
	ret0, _ := ret[0].([]common.Hash32B)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVotesToAddress indicates an expected call of GetVotesToAddress
func (mr *MockBlockchainMockRecorder) GetVotesToAddress(address interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVotesToAddress", reflect.TypeOf((*MockBlockchain)(nil).GetVotesToAddress), address)
}

// GetVoteByVoteHash mocks base method
func (m *MockBlockchain) GetVoteByVoteHash(hash common.Hash32B) (*action.Vote, error) {
	ret := m.ctrl.Call(m, "GetVoteByVoteHash", hash)
	ret0, _ := ret[0].(*action.Vote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVoteByVoteHash indicates an expected call of GetVoteByVoteHash
func (mr *MockBlockchainMockRecorder) GetVoteByVoteHash(hash interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVoteByVoteHash", reflect.TypeOf((*MockBlockchain)(nil).GetVoteByVoteHash), hash)
}

// GetBlockHashByVoteHash mocks base method
func (m *MockBlockchain) GetBlockHashByVoteHash(hash common.Hash32B) (common.Hash32B, error) {
	ret := m.ctrl.Call(m, "GetBlockHashByVoteHash", hash)
	ret0, _ := ret[0].(common.Hash32B)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockHashByVoteHash indicates an expected call of GetBlockHashByVoteHash
func (mr *MockBlockchainMockRecorder) GetBlockHashByVoteHash(hash interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockHashByVoteHash", reflect.TypeOf((*MockBlockchain)(nil).GetBlockHashByVoteHash), hash)
}

// TipHash mocks base method
func (m *MockBlockchain) TipHash() (common.Hash32B, error) {
	ret := m.ctrl.Call(m, "TipHash")
	ret0, _ := ret[0].(common.Hash32B)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TipHash indicates an expected call of TipHash
func (mr *MockBlockchainMockRecorder) TipHash() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TipHash", reflect.TypeOf((*MockBlockchain)(nil).TipHash))
}

// TipHeight mocks base method
func (m *MockBlockchain) TipHeight() (uint64, error) {
	ret := m.ctrl.Call(m, "TipHeight")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TipHeight indicates an expected call of TipHeight
func (mr *MockBlockchainMockRecorder) TipHeight() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TipHeight", reflect.TypeOf((*MockBlockchain)(nil).TipHeight))
}

// StateByAddr mocks base method
func (m *MockBlockchain) StateByAddr(address string) (*state.State, error) {
	ret := m.ctrl.Call(m, "StateByAddr", address)
	ret0, _ := ret[0].(*state.State)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StateByAddr indicates an expected call of StateByAddr
func (mr *MockBlockchainMockRecorder) StateByAddr(address interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StateByAddr", reflect.TypeOf((*MockBlockchain)(nil).StateByAddr), address)
}

// MintNewBlock mocks base method
func (m *MockBlockchain) MintNewBlock(tsf []*action.Transfer, vote []*action.Vote, address *iotxaddress.Address, data string) (*blockchain.Block, error) {
	ret := m.ctrl.Call(m, "MintNewBlock", tsf, vote, address, data)
	ret0, _ := ret[0].(*blockchain.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MintNewBlock indicates an expected call of MintNewBlock
func (mr *MockBlockchainMockRecorder) MintNewBlock(tsf, vote, address, data interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MintNewBlock", reflect.TypeOf((*MockBlockchain)(nil).MintNewBlock), tsf, vote, address, data)
}

// MintNewDummyBlock mocks base method
func (m *MockBlockchain) MintNewDummyBlock() (*blockchain.Block, error) {
	ret := m.ctrl.Call(m, "MintNewDummyBlock")
	ret0, _ := ret[0].(*blockchain.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MintNewDummyBlock indicates an expected call of MintNewDummyBlock
func (mr *MockBlockchainMockRecorder) MintNewDummyBlock() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MintNewDummyBlock", reflect.TypeOf((*MockBlockchain)(nil).MintNewDummyBlock))
}

// CommitBlock mocks base method
func (m *MockBlockchain) CommitBlock(blk *blockchain.Block) error {
	ret := m.ctrl.Call(m, "CommitBlock", blk)
	ret0, _ := ret[0].(error)
	return ret0
}

// CommitBlock indicates an expected call of CommitBlock
func (mr *MockBlockchainMockRecorder) CommitBlock(blk interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitBlock", reflect.TypeOf((*MockBlockchain)(nil).CommitBlock), blk)
}

// ValidateBlock mocks base method
func (m *MockBlockchain) ValidateBlock(blk *blockchain.Block) error {
	ret := m.ctrl.Call(m, "ValidateBlock", blk)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateBlock indicates an expected call of ValidateBlock
func (mr *MockBlockchainMockRecorder) ValidateBlock(blk interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateBlock", reflect.TypeOf((*MockBlockchain)(nil).ValidateBlock), blk)
}

// CreateTransfer mocks base method
func (m *MockBlockchain) CreateTransfer(nonce uint64, from *iotxaddress.Address, amount *big.Int, to *iotxaddress.Address) (*action.Transfer, error) {
	ret := m.ctrl.Call(m, "CreateTransfer", nonce, from, amount, to)
	ret0, _ := ret[0].(*action.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransfer indicates an expected call of CreateTransfer
func (mr *MockBlockchainMockRecorder) CreateTransfer(nonce, from, amount, to interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransfer", reflect.TypeOf((*MockBlockchain)(nil).CreateTransfer), nonce, from, amount, to)
}

// CreateRawTransfer mocks base method
func (m *MockBlockchain) CreateRawTransfer(nonce uint64, from *iotxaddress.Address, amount *big.Int, to *iotxaddress.Address) *action.Transfer {
	ret := m.ctrl.Call(m, "CreateRawTransfer", nonce, from, amount, to)
	ret0, _ := ret[0].(*action.Transfer)
	return ret0
}

// CreateRawTransfer indicates an expected call of CreateRawTransfer
func (mr *MockBlockchainMockRecorder) CreateRawTransfer(nonce, from, amount, to interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRawTransfer", reflect.TypeOf((*MockBlockchain)(nil).CreateRawTransfer), nonce, from, amount, to)
}

// CreateVote mocks base method
func (m *MockBlockchain) CreateVote(nonce uint64, selfPubKey, votePubKey []byte) (*action.Vote, error) {
	ret := m.ctrl.Call(m, "CreateVote", nonce, selfPubKey, votePubKey)
	ret0, _ := ret[0].(*action.Vote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVote indicates an expected call of CreateVote
func (mr *MockBlockchainMockRecorder) CreateVote(nonce, selfPubKey, votePubKey interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVote", reflect.TypeOf((*MockBlockchain)(nil).CreateVote), nonce, selfPubKey, votePubKey)
}

// CreateRawVote mocks base method
func (m *MockBlockchain) CreateRawVote(nonce uint64, selfPubKey, votePubKey []byte) *action.Vote {
	ret := m.ctrl.Call(m, "CreateRawVote", nonce, selfPubKey, votePubKey)
	ret0, _ := ret[0].(*action.Vote)
	return ret0
}

// CreateRawVote indicates an expected call of CreateRawVote
func (mr *MockBlockchainMockRecorder) CreateRawVote(nonce, selfPubKey, votePubKey interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRawVote", reflect.TypeOf((*MockBlockchain)(nil).CreateRawVote), nonce, selfPubKey, votePubKey)
}

// Validator mocks base method
func (m *MockBlockchain) Validator() blockchain.Validator {
	ret := m.ctrl.Call(m, "Validator")
	ret0, _ := ret[0].(blockchain.Validator)
	return ret0
}

// Validator indicates an expected call of Validator
func (mr *MockBlockchainMockRecorder) Validator() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validator", reflect.TypeOf((*MockBlockchain)(nil).Validator))
}

// SetValidator mocks base method
func (m *MockBlockchain) SetValidator(val blockchain.Validator) {
	m.ctrl.Call(m, "SetValidator", val)
}

// SetValidator indicates an expected call of SetValidator
func (mr *MockBlockchainMockRecorder) SetValidator(val interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetValidator", reflect.TypeOf((*MockBlockchain)(nil).SetValidator), val)
}
