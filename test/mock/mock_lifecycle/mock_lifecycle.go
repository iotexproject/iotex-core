// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/iotexproject/iotex-core/pkg/lifecycle (interfaces: StartStopper)

// Package mock_lifecycle is a generated GoMock package.
package mock_lifecycle

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockStartStopper is a mock of StartStopper interface
type MockStartStopper struct {
	ctrl     *gomock.Controller
	recorder *MockStartStopperMockRecorder
}

// MockStartStopperMockRecorder is the mock recorder for MockStartStopper
type MockStartStopperMockRecorder struct {
	mock *MockStartStopper
}

// NewMockStartStopper creates a new mock instance
func NewMockStartStopper(ctrl *gomock.Controller) *MockStartStopper {
	mock := &MockStartStopper{ctrl: ctrl}
	mock.recorder = &MockStartStopperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStartStopper) EXPECT() *MockStartStopperMockRecorder {
	return m.recorder
}

// Start mocks base method
func (m *MockStartStopper) Start(arg0 context.Context) error {
	ret := m.ctrl.Call(m, "Start", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start
func (mr *MockStartStopperMockRecorder) Start(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockStartStopper)(nil).Start), arg0)
}

// Stop mocks base method
func (m *MockStartStopper) Stop(arg0 context.Context) error {
	ret := m.ctrl.Call(m, "Stop", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop
func (mr *MockStartStopperMockRecorder) Stop(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockStartStopper)(nil).Stop), arg0)
}
