// Code generated by MockGen. DO NOT EDIT.
// Source: ../../../blockchain/pubsub/pubsubmanager.go

// Package mock_pubsubmanager is a generated GoMock package.
package mock_pubsubmanager

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	block "github.com/iotexproject/iotex-core/blockchain/block"
	pubsub "github.com/iotexproject/iotex-core/blockchain/pubsub"
)

// MockPubSubManager is a mock of PubSubManager interface.
type MockPubSubManager struct {
	ctrl     *gomock.Controller
	recorder *MockPubSubManagerMockRecorder
}

// MockPubSubManagerMockRecorder is the mock recorder for MockPubSubManager.
type MockPubSubManagerMockRecorder struct {
	mock *MockPubSubManager
}

// NewMockPubSubManager creates a new mock instance.
func NewMockPubSubManager(ctrl *gomock.Controller) *MockPubSubManager {
	mock := &MockPubSubManager{ctrl: ctrl}
	mock.recorder = &MockPubSubManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPubSubManager) EXPECT() *MockPubSubManagerMockRecorder {
	return m.recorder
}

// AddBlockListener mocks base method.
func (m *MockPubSubManager) AddBlockListener(arg0 pubsub.BlockCreationSubscriber) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBlockListener", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddBlockListener indicates an expected call of AddBlockListener.
func (mr *MockPubSubManagerMockRecorder) AddBlockListener(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBlockListener", reflect.TypeOf((*MockPubSubManager)(nil).AddBlockListener), arg0)
}

// RemoveBlockListener mocks base method.
func (m *MockPubSubManager) RemoveBlockListener(arg0 pubsub.BlockCreationSubscriber) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveBlockListener", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveBlockListener indicates an expected call of RemoveBlockListener.
func (mr *MockPubSubManagerMockRecorder) RemoveBlockListener(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveBlockListener", reflect.TypeOf((*MockPubSubManager)(nil).RemoveBlockListener), arg0)
}

// SendBlockToSubscribers mocks base method.
func (m *MockPubSubManager) SendBlockToSubscribers(arg0 *block.Block) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendBlockToSubscribers", arg0)
}

// SendBlockToSubscribers indicates an expected call of SendBlockToSubscribers.
func (mr *MockPubSubManagerMockRecorder) SendBlockToSubscribers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendBlockToSubscribers", reflect.TypeOf((*MockPubSubManager)(nil).SendBlockToSubscribers), arg0)
}

// Start mocks base method.
func (m *MockPubSubManager) Start(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockPubSubManagerMockRecorder) Start(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockPubSubManager)(nil).Start), ctx)
}

// Stop mocks base method.
func (m *MockPubSubManager) Stop(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockPubSubManagerMockRecorder) Stop(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockPubSubManager)(nil).Stop), ctx)
}
