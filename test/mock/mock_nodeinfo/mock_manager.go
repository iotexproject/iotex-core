// Code generated by MockGen. DO NOT EDIT.
// Source: ./nodeinfo/manager.go

// Package mock_nodeinfo is a generated GoMock package.
package mock_nodeinfo

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	peer "github.com/libp2p/go-libp2p-core/peer"
	proto "google.golang.org/protobuf/proto"
)

// Mocktransmitter is a mock of transmitter interface.
type Mocktransmitter struct {
	ctrl     *gomock.Controller
	recorder *MocktransmitterMockRecorder
}

// MocktransmitterMockRecorder is the mock recorder for Mocktransmitter.
type MocktransmitterMockRecorder struct {
	mock *Mocktransmitter
}

// NewMocktransmitter creates a new mock instance.
func NewMocktransmitter(ctrl *gomock.Controller) *Mocktransmitter {
	mock := &Mocktransmitter{ctrl: ctrl}
	mock.recorder = &MocktransmitterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mocktransmitter) EXPECT() *MocktransmitterMockRecorder {
	return m.recorder
}

// BroadcastOutbound mocks base method.
func (m *Mocktransmitter) BroadcastOutbound(arg0 context.Context, arg1 proto.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BroadcastOutbound", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// BroadcastOutbound indicates an expected call of BroadcastOutbound.
func (mr *MocktransmitterMockRecorder) BroadcastOutbound(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BroadcastOutbound", reflect.TypeOf((*Mocktransmitter)(nil).BroadcastOutbound), arg0, arg1)
}

// Info mocks base method.
func (m *Mocktransmitter) Info() (peer.AddrInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Info")
	ret0, _ := ret[0].(peer.AddrInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Info indicates an expected call of Info.
func (mr *MocktransmitterMockRecorder) Info() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*Mocktransmitter)(nil).Info))
}

// UnicastOutbound mocks base method.
func (m *Mocktransmitter) UnicastOutbound(arg0 context.Context, arg1 peer.AddrInfo, arg2 proto.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnicastOutbound", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnicastOutbound indicates an expected call of UnicastOutbound.
func (mr *MocktransmitterMockRecorder) UnicastOutbound(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnicastOutbound", reflect.TypeOf((*Mocktransmitter)(nil).UnicastOutbound), arg0, arg1, arg2)
}
