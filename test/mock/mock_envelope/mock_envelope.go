// Code generated by MockGen. DO NOT EDIT.
// Source: ./action/envelope.go

// Package mock_envelope is a generated GoMock package.
package mock_envelope

import (
	big "math/big"
	reflect "reflect"

	types "github.com/ethereum/go-ethereum/core/types"
	gomock "github.com/golang/mock/gomock"
	action "github.com/iotexproject/iotex-core/action"
	iotextypes "github.com/iotexproject/iotex-proto/golang/iotextypes"
)

// MockEnvelope is a mock of Envelope interface.
type MockEnvelope struct {
	ctrl     *gomock.Controller
	recorder *MockEnvelopeMockRecorder
}

// MockEnvelopeMockRecorder is the mock recorder for MockEnvelope.
type MockEnvelopeMockRecorder struct {
	mock *MockEnvelope
}

// NewMockEnvelope creates a new mock instance.
func NewMockEnvelope(ctrl *gomock.Controller) *MockEnvelope {
	mock := &MockEnvelope{ctrl: ctrl}
	mock.recorder = &MockEnvelopeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEnvelope) EXPECT() *MockEnvelopeMockRecorder {
	return m.recorder
}

// Action mocks base method.
func (m *MockEnvelope) Action() action.Action {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Action")
	ret0, _ := ret[0].(action.Action)
	return ret0
}

// Action indicates an expected call of Action.
func (mr *MockEnvelopeMockRecorder) Action() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Action", reflect.TypeOf((*MockEnvelope)(nil).Action))
}

// ChainID mocks base method.
func (m *MockEnvelope) ChainID() uint32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChainID")
	ret0, _ := ret[0].(uint32)
	return ret0
}

// ChainID indicates an expected call of ChainID.
func (mr *MockEnvelopeMockRecorder) ChainID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChainID", reflect.TypeOf((*MockEnvelope)(nil).ChainID))
}

// Cost mocks base method.
func (m *MockEnvelope) Cost() (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cost")
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cost indicates an expected call of Cost.
func (mr *MockEnvelopeMockRecorder) Cost() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cost", reflect.TypeOf((*MockEnvelope)(nil).Cost))
}

// Destination mocks base method.
func (m *MockEnvelope) Destination() (string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Destination")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Destination indicates an expected call of Destination.
func (mr *MockEnvelopeMockRecorder) Destination() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destination", reflect.TypeOf((*MockEnvelope)(nil).Destination))
}

// GasFeeCap mocks base method.
func (m *MockEnvelope) GasFeeCap() *big.Int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GasFeeCap")
	ret0, _ := ret[0].(*big.Int)
	return ret0
}

// GasFeeCap indicates an expected call of GasFeeCap.
func (mr *MockEnvelopeMockRecorder) GasFeeCap() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GasFeeCap", reflect.TypeOf((*MockEnvelope)(nil).GasFeeCap))
}

// GasLimit mocks base method.
func (m *MockEnvelope) GasLimit() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GasLimit")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GasLimit indicates an expected call of GasLimit.
func (mr *MockEnvelopeMockRecorder) GasLimit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GasLimit", reflect.TypeOf((*MockEnvelope)(nil).GasLimit))
}

// GasPrice mocks base method.
func (m *MockEnvelope) GasPrice() *big.Int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GasPrice")
	ret0, _ := ret[0].(*big.Int)
	return ret0
}

// GasPrice indicates an expected call of GasPrice.
func (mr *MockEnvelopeMockRecorder) GasPrice() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GasPrice", reflect.TypeOf((*MockEnvelope)(nil).GasPrice))
}

// GasTipCap mocks base method.
func (m *MockEnvelope) GasTipCap() *big.Int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GasTipCap")
	ret0, _ := ret[0].(*big.Int)
	return ret0
}

// GasTipCap indicates an expected call of GasTipCap.
func (mr *MockEnvelopeMockRecorder) GasTipCap() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GasTipCap", reflect.TypeOf((*MockEnvelope)(nil).GasTipCap))
}

// IntrinsicGas mocks base method.
func (m *MockEnvelope) IntrinsicGas() (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IntrinsicGas")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IntrinsicGas indicates an expected call of IntrinsicGas.
func (mr *MockEnvelopeMockRecorder) IntrinsicGas() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IntrinsicGas", reflect.TypeOf((*MockEnvelope)(nil).IntrinsicGas))
}

// LoadProto mocks base method.
func (m *MockEnvelope) LoadProto(pbAct *iotextypes.ActionCore) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadProto", pbAct)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadProto indicates an expected call of LoadProto.
func (mr *MockEnvelopeMockRecorder) LoadProto(pbAct interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadProto", reflect.TypeOf((*MockEnvelope)(nil).LoadProto), pbAct)
}

// Nonce mocks base method.
func (m *MockEnvelope) Nonce() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Nonce")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// Nonce indicates an expected call of Nonce.
func (mr *MockEnvelopeMockRecorder) Nonce() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Nonce", reflect.TypeOf((*MockEnvelope)(nil).Nonce))
}

// Proto mocks base method.
func (m *MockEnvelope) Proto() *iotextypes.ActionCore {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Proto")
	ret0, _ := ret[0].(*iotextypes.ActionCore)
	return ret0
}

// Proto indicates an expected call of Proto.
func (mr *MockEnvelopeMockRecorder) Proto() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Proto", reflect.TypeOf((*MockEnvelope)(nil).Proto))
}

// SetChainID mocks base method.
func (m *MockEnvelope) SetChainID(chainID uint32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetChainID", chainID)
}

// SetChainID indicates an expected call of SetChainID.
func (mr *MockEnvelopeMockRecorder) SetChainID(chainID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetChainID", reflect.TypeOf((*MockEnvelope)(nil).SetChainID), chainID)
}

// SetNonce mocks base method.
func (m *MockEnvelope) SetNonce(n uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetNonce", n)
}

// SetNonce indicates an expected call of SetNonce.
func (mr *MockEnvelopeMockRecorder) SetNonce(n interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNonce", reflect.TypeOf((*MockEnvelope)(nil).SetNonce), n)
}

// Size mocks base method.
func (m *MockEnvelope) Size() uint32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(uint32)
	return ret0
}

// Size indicates an expected call of Size.
func (mr *MockEnvelopeMockRecorder) Size() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockEnvelope)(nil).Size))
}

// ToEthTx mocks base method.
func (m *MockEnvelope) ToEthTx(arg0 uint32, arg1 iotextypes.Encoding) (*types.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToEthTx", arg0, arg1)
	ret0, _ := ret[0].(*types.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ToEthTx indicates an expected call of ToEthTx.
func (mr *MockEnvelopeMockRecorder) ToEthTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToEthTx", reflect.TypeOf((*MockEnvelope)(nil).ToEthTx), arg0, arg1)
}

// Version mocks base method.
func (m *MockEnvelope) Version() uint32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Version")
	ret0, _ := ret[0].(uint32)
	return ret0
}

// Version indicates an expected call of Version.
func (mr *MockEnvelopeMockRecorder) Version() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Version", reflect.TypeOf((*MockEnvelope)(nil).Version))
}
