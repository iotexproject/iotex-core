// Code generated by MockGen. DO NOT EDIT.
// Source: ./action/envelope.go

// Package mock_envelope is a generated GoMock package.
package mock_envelope

import (
	big "math/big"
	reflect "reflect"

	common "github.com/ethereum/go-ethereum/common"
	types "github.com/ethereum/go-ethereum/core/types"
	gomock "github.com/golang/mock/gomock"
	action "github.com/iotexproject/iotex-core/action"
	iotextypes "github.com/iotexproject/iotex-proto/golang/iotextypes"
)

// MockEnvelope is a mock of Envelope interface.
type MockEnvelope struct {
	ctrl     *gomock.Controller
	recorder *MockEnvelopeMockRecorder
}

// MockEnvelopeMockRecorder is the mock recorder for MockEnvelope.
type MockEnvelopeMockRecorder struct {
	mock *MockEnvelope
}

// NewMockEnvelope creates a new mock instance.
func NewMockEnvelope(ctrl *gomock.Controller) *MockEnvelope {
	mock := &MockEnvelope{ctrl: ctrl}
	mock.recorder = &MockEnvelopeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEnvelope) EXPECT() *MockEnvelopeMockRecorder {
	return m.recorder
}

// AccessList mocks base method.
func (m *MockEnvelope) AccessList() types.AccessList {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccessList")
	ret0, _ := ret[0].(types.AccessList)
	return ret0
}

// AccessList indicates an expected call of AccessList.
func (mr *MockEnvelopeMockRecorder) AccessList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccessList", reflect.TypeOf((*MockEnvelope)(nil).AccessList))
}

// Action mocks base method.
func (m *MockEnvelope) Action() action.Action {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Action")
	ret0, _ := ret[0].(action.Action)
	return ret0
}

// Action indicates an expected call of Action.
func (mr *MockEnvelopeMockRecorder) Action() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Action", reflect.TypeOf((*MockEnvelope)(nil).Action))
}

// ChainID mocks base method.
func (m *MockEnvelope) ChainID() uint32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChainID")
	ret0, _ := ret[0].(uint32)
	return ret0
}

// ChainID indicates an expected call of ChainID.
func (mr *MockEnvelopeMockRecorder) ChainID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChainID", reflect.TypeOf((*MockEnvelope)(nil).ChainID))
}

// Cost mocks base method.
func (m *MockEnvelope) Cost() (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cost")
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cost indicates an expected call of Cost.
func (mr *MockEnvelopeMockRecorder) Cost() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cost", reflect.TypeOf((*MockEnvelope)(nil).Cost))
}

// Data mocks base method.
func (m *MockEnvelope) Data() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Data")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Data indicates an expected call of Data.
func (mr *MockEnvelopeMockRecorder) Data() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Data", reflect.TypeOf((*MockEnvelope)(nil).Data))
}

// Destination mocks base method.
func (m *MockEnvelope) Destination() (string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Destination")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Destination indicates an expected call of Destination.
func (mr *MockEnvelopeMockRecorder) Destination() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destination", reflect.TypeOf((*MockEnvelope)(nil).Destination))
}

// Gas mocks base method.
func (m *MockEnvelope) Gas() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Gas")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// Gas indicates an expected call of Gas.
func (mr *MockEnvelopeMockRecorder) Gas() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Gas", reflect.TypeOf((*MockEnvelope)(nil).Gas))
}

// GasFeeCap mocks base method.
func (m *MockEnvelope) GasFeeCap() *big.Int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GasFeeCap")
	ret0, _ := ret[0].(*big.Int)
	return ret0
}

// GasFeeCap indicates an expected call of GasFeeCap.
func (mr *MockEnvelopeMockRecorder) GasFeeCap() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GasFeeCap", reflect.TypeOf((*MockEnvelope)(nil).GasFeeCap))
}

// GasLimit mocks base method.
func (m *MockEnvelope) GasLimit() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GasLimit")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GasLimit indicates an expected call of GasLimit.
func (mr *MockEnvelopeMockRecorder) GasLimit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GasLimit", reflect.TypeOf((*MockEnvelope)(nil).GasLimit))
}

// GasPrice mocks base method.
func (m *MockEnvelope) GasPrice() *big.Int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GasPrice")
	ret0, _ := ret[0].(*big.Int)
	return ret0
}

// GasPrice indicates an expected call of GasPrice.
func (mr *MockEnvelopeMockRecorder) GasPrice() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GasPrice", reflect.TypeOf((*MockEnvelope)(nil).GasPrice))
}

// GasTipCap mocks base method.
func (m *MockEnvelope) GasTipCap() *big.Int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GasTipCap")
	ret0, _ := ret[0].(*big.Int)
	return ret0
}

// GasTipCap indicates an expected call of GasTipCap.
func (mr *MockEnvelopeMockRecorder) GasTipCap() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GasTipCap", reflect.TypeOf((*MockEnvelope)(nil).GasTipCap))
}

// IntrinsicGas mocks base method.
func (m *MockEnvelope) IntrinsicGas() (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IntrinsicGas")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IntrinsicGas indicates an expected call of IntrinsicGas.
func (mr *MockEnvelopeMockRecorder) IntrinsicGas() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IntrinsicGas", reflect.TypeOf((*MockEnvelope)(nil).IntrinsicGas))
}

// LoadProto mocks base method.
func (m *MockEnvelope) LoadProto(arg0 *iotextypes.ActionCore) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadProto", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadProto indicates an expected call of LoadProto.
func (mr *MockEnvelopeMockRecorder) LoadProto(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadProto", reflect.TypeOf((*MockEnvelope)(nil).LoadProto), arg0)
}

// Nonce mocks base method.
func (m *MockEnvelope) Nonce() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Nonce")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// Nonce indicates an expected call of Nonce.
func (mr *MockEnvelopeMockRecorder) Nonce() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Nonce", reflect.TypeOf((*MockEnvelope)(nil).Nonce))
}

// Proto mocks base method.
func (m *MockEnvelope) Proto() *iotextypes.ActionCore {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Proto")
	ret0, _ := ret[0].(*iotextypes.ActionCore)
	return ret0
}

// Proto indicates an expected call of Proto.
func (mr *MockEnvelopeMockRecorder) Proto() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Proto", reflect.TypeOf((*MockEnvelope)(nil).Proto))
}

// SanityCheck mocks base method.
func (m *MockEnvelope) SanityCheck() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SanityCheck")
	ret0, _ := ret[0].(error)
	return ret0
}

// SanityCheck indicates an expected call of SanityCheck.
func (mr *MockEnvelopeMockRecorder) SanityCheck() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SanityCheck", reflect.TypeOf((*MockEnvelope)(nil).SanityCheck))
}

// SetChainID mocks base method.
func (m *MockEnvelope) SetChainID(arg0 uint32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetChainID", arg0)
}

// SetChainID indicates an expected call of SetChainID.
func (mr *MockEnvelopeMockRecorder) SetChainID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetChainID", reflect.TypeOf((*MockEnvelope)(nil).SetChainID), arg0)
}

// SetGas mocks base method.
func (m *MockEnvelope) SetGas(arg0 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetGas", arg0)
}

// SetGas indicates an expected call of SetGas.
func (mr *MockEnvelopeMockRecorder) SetGas(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetGas", reflect.TypeOf((*MockEnvelope)(nil).SetGas), arg0)
}

// SetNonce mocks base method.
func (m *MockEnvelope) SetNonce(arg0 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetNonce", arg0)
}

// SetNonce indicates an expected call of SetNonce.
func (mr *MockEnvelopeMockRecorder) SetNonce(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNonce", reflect.TypeOf((*MockEnvelope)(nil).SetNonce), arg0)
}

// Size mocks base method.
func (m *MockEnvelope) Size() uint32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(uint32)
	return ret0
}

// Size indicates an expected call of Size.
func (mr *MockEnvelopeMockRecorder) Size() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockEnvelope)(nil).Size))
}

// To mocks base method.
func (m *MockEnvelope) To() *common.Address {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "To")
	ret0, _ := ret[0].(*common.Address)
	return ret0
}

// To indicates an expected call of To.
func (mr *MockEnvelopeMockRecorder) To() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "To", reflect.TypeOf((*MockEnvelope)(nil).To))
}

// ToEthTx mocks base method.
func (m *MockEnvelope) ToEthTx(arg0 uint32, arg1 iotextypes.Encoding) (*types.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToEthTx", arg0, arg1)
	ret0, _ := ret[0].(*types.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ToEthTx indicates an expected call of ToEthTx.
func (mr *MockEnvelopeMockRecorder) ToEthTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToEthTx", reflect.TypeOf((*MockEnvelope)(nil).ToEthTx), arg0, arg1)
}

// Value mocks base method.
func (m *MockEnvelope) Value() *big.Int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Value")
	ret0, _ := ret[0].(*big.Int)
	return ret0
}

// Value indicates an expected call of Value.
func (mr *MockEnvelopeMockRecorder) Value() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Value", reflect.TypeOf((*MockEnvelope)(nil).Value))
}

// Version mocks base method.
func (m *MockEnvelope) Version() uint32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Version")
	ret0, _ := ret[0].(uint32)
	return ret0
}

// Version indicates an expected call of Version.
func (mr *MockEnvelopeMockRecorder) Version() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Version", reflect.TypeOf((*MockEnvelope)(nil).Version))
}

// MockTxData is a mock of TxData interface.
type MockTxData struct {
	ctrl     *gomock.Controller
	recorder *MockTxDataMockRecorder
}

// MockTxDataMockRecorder is the mock recorder for MockTxData.
type MockTxDataMockRecorder struct {
	mock *MockTxData
}

// NewMockTxData creates a new mock instance.
func NewMockTxData(ctrl *gomock.Controller) *MockTxData {
	mock := &MockTxData{ctrl: ctrl}
	mock.recorder = &MockTxDataMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTxData) EXPECT() *MockTxDataMockRecorder {
	return m.recorder
}

// AccessList mocks base method.
func (m *MockTxData) AccessList() types.AccessList {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccessList")
	ret0, _ := ret[0].(types.AccessList)
	return ret0
}

// AccessList indicates an expected call of AccessList.
func (mr *MockTxDataMockRecorder) AccessList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccessList", reflect.TypeOf((*MockTxData)(nil).AccessList))
}

// Data mocks base method.
func (m *MockTxData) Data() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Data")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Data indicates an expected call of Data.
func (mr *MockTxDataMockRecorder) Data() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Data", reflect.TypeOf((*MockTxData)(nil).Data))
}

// Gas mocks base method.
func (m *MockTxData) Gas() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Gas")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// Gas indicates an expected call of Gas.
func (mr *MockTxDataMockRecorder) Gas() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Gas", reflect.TypeOf((*MockTxData)(nil).Gas))
}

// GasFeeCap mocks base method.
func (m *MockTxData) GasFeeCap() *big.Int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GasFeeCap")
	ret0, _ := ret[0].(*big.Int)
	return ret0
}

// GasFeeCap indicates an expected call of GasFeeCap.
func (mr *MockTxDataMockRecorder) GasFeeCap() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GasFeeCap", reflect.TypeOf((*MockTxData)(nil).GasFeeCap))
}

// GasPrice mocks base method.
func (m *MockTxData) GasPrice() *big.Int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GasPrice")
	ret0, _ := ret[0].(*big.Int)
	return ret0
}

// GasPrice indicates an expected call of GasPrice.
func (mr *MockTxDataMockRecorder) GasPrice() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GasPrice", reflect.TypeOf((*MockTxData)(nil).GasPrice))
}

// GasTipCap mocks base method.
func (m *MockTxData) GasTipCap() *big.Int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GasTipCap")
	ret0, _ := ret[0].(*big.Int)
	return ret0
}

// GasTipCap indicates an expected call of GasTipCap.
func (mr *MockTxDataMockRecorder) GasTipCap() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GasTipCap", reflect.TypeOf((*MockTxData)(nil).GasTipCap))
}

// Nonce mocks base method.
func (m *MockTxData) Nonce() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Nonce")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// Nonce indicates an expected call of Nonce.
func (mr *MockTxDataMockRecorder) Nonce() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Nonce", reflect.TypeOf((*MockTxData)(nil).Nonce))
}

// To mocks base method.
func (m *MockTxData) To() *common.Address {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "To")
	ret0, _ := ret[0].(*common.Address)
	return ret0
}

// To indicates an expected call of To.
func (mr *MockTxDataMockRecorder) To() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "To", reflect.TypeOf((*MockTxData)(nil).To))
}

// Value mocks base method.
func (m *MockTxData) Value() *big.Int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Value")
	ret0, _ := ret[0].(*big.Int)
	return ret0
}

// Value indicates an expected call of Value.
func (mr *MockTxDataMockRecorder) Value() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Value", reflect.TypeOf((*MockTxData)(nil).Value))
}

// MockTxCommon is a mock of TxCommon interface.
type MockTxCommon struct {
	ctrl     *gomock.Controller
	recorder *MockTxCommonMockRecorder
}

// MockTxCommonMockRecorder is the mock recorder for MockTxCommon.
type MockTxCommonMockRecorder struct {
	mock *MockTxCommon
}

// NewMockTxCommon creates a new mock instance.
func NewMockTxCommon(ctrl *gomock.Controller) *MockTxCommon {
	mock := &MockTxCommon{ctrl: ctrl}
	mock.recorder = &MockTxCommonMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTxCommon) EXPECT() *MockTxCommonMockRecorder {
	return m.recorder
}

// AccessList mocks base method.
func (m *MockTxCommon) AccessList() types.AccessList {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccessList")
	ret0, _ := ret[0].(types.AccessList)
	return ret0
}

// AccessList indicates an expected call of AccessList.
func (mr *MockTxCommonMockRecorder) AccessList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccessList", reflect.TypeOf((*MockTxCommon)(nil).AccessList))
}

// Gas mocks base method.
func (m *MockTxCommon) Gas() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Gas")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// Gas indicates an expected call of Gas.
func (mr *MockTxCommonMockRecorder) Gas() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Gas", reflect.TypeOf((*MockTxCommon)(nil).Gas))
}

// GasFeeCap mocks base method.
func (m *MockTxCommon) GasFeeCap() *big.Int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GasFeeCap")
	ret0, _ := ret[0].(*big.Int)
	return ret0
}

// GasFeeCap indicates an expected call of GasFeeCap.
func (mr *MockTxCommonMockRecorder) GasFeeCap() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GasFeeCap", reflect.TypeOf((*MockTxCommon)(nil).GasFeeCap))
}

// GasPrice mocks base method.
func (m *MockTxCommon) GasPrice() *big.Int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GasPrice")
	ret0, _ := ret[0].(*big.Int)
	return ret0
}

// GasPrice indicates an expected call of GasPrice.
func (mr *MockTxCommonMockRecorder) GasPrice() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GasPrice", reflect.TypeOf((*MockTxCommon)(nil).GasPrice))
}

// GasTipCap mocks base method.
func (m *MockTxCommon) GasTipCap() *big.Int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GasTipCap")
	ret0, _ := ret[0].(*big.Int)
	return ret0
}

// GasTipCap indicates an expected call of GasTipCap.
func (mr *MockTxCommonMockRecorder) GasTipCap() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GasTipCap", reflect.TypeOf((*MockTxCommon)(nil).GasTipCap))
}

// Nonce mocks base method.
func (m *MockTxCommon) Nonce() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Nonce")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// Nonce indicates an expected call of Nonce.
func (mr *MockTxCommonMockRecorder) Nonce() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Nonce", reflect.TypeOf((*MockTxCommon)(nil).Nonce))
}

// MockTxDynamicGas is a mock of TxDynamicGas interface.
type MockTxDynamicGas struct {
	ctrl     *gomock.Controller
	recorder *MockTxDynamicGasMockRecorder
}

// MockTxDynamicGasMockRecorder is the mock recorder for MockTxDynamicGas.
type MockTxDynamicGasMockRecorder struct {
	mock *MockTxDynamicGas
}

// NewMockTxDynamicGas creates a new mock instance.
func NewMockTxDynamicGas(ctrl *gomock.Controller) *MockTxDynamicGas {
	mock := &MockTxDynamicGas{ctrl: ctrl}
	mock.recorder = &MockTxDynamicGasMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTxDynamicGas) EXPECT() *MockTxDynamicGasMockRecorder {
	return m.recorder
}

// GasFeeCap mocks base method.
func (m *MockTxDynamicGas) GasFeeCap() *big.Int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GasFeeCap")
	ret0, _ := ret[0].(*big.Int)
	return ret0
}

// GasFeeCap indicates an expected call of GasFeeCap.
func (mr *MockTxDynamicGasMockRecorder) GasFeeCap() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GasFeeCap", reflect.TypeOf((*MockTxDynamicGas)(nil).GasFeeCap))
}

// GasTipCap mocks base method.
func (m *MockTxDynamicGas) GasTipCap() *big.Int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GasTipCap")
	ret0, _ := ret[0].(*big.Int)
	return ret0
}

// GasTipCap indicates an expected call of GasTipCap.
func (mr *MockTxDynamicGasMockRecorder) GasTipCap() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GasTipCap", reflect.TypeOf((*MockTxDynamicGas)(nil).GasTipCap))
}
