// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/iotexproject/iotex-core/v2/actpool (interfaces: ActPool)

// Package mock_actpool is a generated GoMock package.
package mock_actpool

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	hash "github.com/iotexproject/go-pkgs/hash"
	address "github.com/iotexproject/iotex-address/address"
	action "github.com/iotexproject/iotex-core/v2/action"
	actpool "github.com/iotexproject/iotex-core/v2/actpool"
	block "github.com/iotexproject/iotex-core/v2/blockchain/block"
)

// MockActPool is a mock of ActPool interface.
type MockActPool struct {
	ctrl     *gomock.Controller
	recorder *MockActPoolMockRecorder
}

// MockActPoolMockRecorder is the mock recorder for MockActPool.
type MockActPoolMockRecorder struct {
	mock *MockActPool
}

// NewMockActPool creates a new mock instance.
func NewMockActPool(ctrl *gomock.Controller) *MockActPool {
	mock := &MockActPool{ctrl: ctrl}
	mock.recorder = &MockActPoolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActPool) EXPECT() *MockActPoolMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockActPool) Add(arg0 context.Context, arg1 *action.SealedEnvelope) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockActPoolMockRecorder) Add(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockActPool)(nil).Add), arg0, arg1)
}

// AddActionEnvelopeValidators mocks base method.
func (m *MockActPool) AddActionEnvelopeValidators(arg0 ...action.SealedEnvelopeValidator) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddActionEnvelopeValidators", varargs...)
}

// AddActionEnvelopeValidators indicates an expected call of AddActionEnvelopeValidators.
func (mr *MockActPoolMockRecorder) AddActionEnvelopeValidators(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddActionEnvelopeValidators", reflect.TypeOf((*MockActPool)(nil).AddActionEnvelopeValidators), arg0...)
}

// AddSubscriber mocks base method.
func (m *MockActPool) AddSubscriber(arg0 actpool.Subscriber) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddSubscriber", arg0)
}

// AddSubscriber indicates an expected call of AddSubscriber.
func (mr *MockActPoolMockRecorder) AddSubscriber(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSubscriber", reflect.TypeOf((*MockActPool)(nil).AddSubscriber), arg0)
}

// DeleteAction mocks base method.
func (m *MockActPool) DeleteAction(arg0 address.Address) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteAction", arg0)
}

// DeleteAction indicates an expected call of DeleteAction.
func (mr *MockActPoolMockRecorder) DeleteAction(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAction", reflect.TypeOf((*MockActPool)(nil).DeleteAction), arg0)
}

// GetActionByHash mocks base method.
func (m *MockActPool) GetActionByHash(arg0 hash.Hash256) (*action.SealedEnvelope, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActionByHash", arg0)
	ret0, _ := ret[0].(*action.SealedEnvelope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActionByHash indicates an expected call of GetActionByHash.
func (mr *MockActPoolMockRecorder) GetActionByHash(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActionByHash", reflect.TypeOf((*MockActPool)(nil).GetActionByHash), arg0)
}

// GetCapacity mocks base method.
func (m *MockActPool) GetCapacity() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCapacity")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetCapacity indicates an expected call of GetCapacity.
func (mr *MockActPoolMockRecorder) GetCapacity() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCapacity", reflect.TypeOf((*MockActPool)(nil).GetCapacity))
}

// GetGasCapacity mocks base method.
func (m *MockActPool) GetGasCapacity() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGasCapacity")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetGasCapacity indicates an expected call of GetGasCapacity.
func (mr *MockActPoolMockRecorder) GetGasCapacity() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGasCapacity", reflect.TypeOf((*MockActPool)(nil).GetGasCapacity))
}

// GetGasSize mocks base method.
func (m *MockActPool) GetGasSize() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGasSize")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetGasSize indicates an expected call of GetGasSize.
func (mr *MockActPoolMockRecorder) GetGasSize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGasSize", reflect.TypeOf((*MockActPool)(nil).GetGasSize))
}

// GetPendingNonce mocks base method.
func (m *MockActPool) GetPendingNonce(arg0 string) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPendingNonce", arg0)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPendingNonce indicates an expected call of GetPendingNonce.
func (mr *MockActPoolMockRecorder) GetPendingNonce(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPendingNonce", reflect.TypeOf((*MockActPool)(nil).GetPendingNonce), arg0)
}

// GetSize mocks base method.
func (m *MockActPool) GetSize() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSize")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetSize indicates an expected call of GetSize.
func (mr *MockActPoolMockRecorder) GetSize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSize", reflect.TypeOf((*MockActPool)(nil).GetSize))
}

// GetUnconfirmedActs mocks base method.
func (m *MockActPool) GetUnconfirmedActs(arg0 string) []*action.SealedEnvelope {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnconfirmedActs", arg0)
	ret0, _ := ret[0].([]*action.SealedEnvelope)
	return ret0
}

// GetUnconfirmedActs indicates an expected call of GetUnconfirmedActs.
func (mr *MockActPoolMockRecorder) GetUnconfirmedActs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnconfirmedActs", reflect.TypeOf((*MockActPool)(nil).GetUnconfirmedActs), arg0)
}

// PendingActionMap mocks base method.
func (m *MockActPool) PendingActionMap() map[string][]*action.SealedEnvelope {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PendingActionMap")
	ret0, _ := ret[0].(map[string][]*action.SealedEnvelope)
	return ret0
}

// PendingActionMap indicates an expected call of PendingActionMap.
func (mr *MockActPoolMockRecorder) PendingActionMap() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PendingActionMap", reflect.TypeOf((*MockActPool)(nil).PendingActionMap))
}

// ReceiveBlock mocks base method.
func (m *MockActPool) ReceiveBlock(arg0 *block.Block) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReceiveBlock", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReceiveBlock indicates an expected call of ReceiveBlock.
func (mr *MockActPoolMockRecorder) ReceiveBlock(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReceiveBlock", reflect.TypeOf((*MockActPool)(nil).ReceiveBlock), arg0)
}

// Reset mocks base method.
func (m *MockActPool) Reset() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Reset")
}

// Reset indicates an expected call of Reset.
func (mr *MockActPoolMockRecorder) Reset() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockActPool)(nil).Reset))
}

// Start mocks base method.
func (m *MockActPool) Start(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockActPoolMockRecorder) Start(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockActPool)(nil).Start), arg0)
}

// Stop mocks base method.
func (m *MockActPool) Stop(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockActPoolMockRecorder) Stop(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockActPool)(nil).Stop), arg0)
}

// Validate mocks base method.
func (m *MockActPool) Validate(arg0 context.Context, arg1 *action.SealedEnvelope) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockActPoolMockRecorder) Validate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockActPool)(nil).Validate), arg0, arg1)
}
