// Code generated by MockGen. DO NOT EDIT.
// Source: blockindex/indexer.go

// Package mock_blockindex is a generated GoMock package.
package mock_blockindex

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	hash "github.com/iotexproject/go-pkgs/hash"
	block "github.com/iotexproject/iotex-core/blockchain/block"
	blockindex "github.com/iotexproject/iotex-core/blockindex"
)

// MockIndexer is a mock of Indexer interface.
type MockIndexer struct {
	ctrl     *gomock.Controller
	recorder *MockIndexerMockRecorder
}

// MockIndexerMockRecorder is the mock recorder for MockIndexer.
type MockIndexerMockRecorder struct {
	mock *MockIndexer
}

// NewMockIndexer creates a new mock instance.
func NewMockIndexer(ctrl *gomock.Controller) *MockIndexer {
	mock := &MockIndexer{ctrl: ctrl}
	mock.recorder = &MockIndexerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIndexer) EXPECT() *MockIndexerMockRecorder {
	return m.recorder
}

// DeleteTipBlock mocks base method.
func (m *MockIndexer) DeleteTipBlock(arg0 context.Context, arg1 *block.Block) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTipBlock", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTipBlock indicates an expected call of DeleteTipBlock.
func (mr *MockIndexerMockRecorder) DeleteTipBlock(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTipBlock", reflect.TypeOf((*MockIndexer)(nil).DeleteTipBlock), arg0, arg1)
}

// GetActionCountByAddress mocks base method.
func (m *MockIndexer) GetActionCountByAddress(arg0 hash.Hash160) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActionCountByAddress", arg0)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActionCountByAddress indicates an expected call of GetActionCountByAddress.
func (mr *MockIndexerMockRecorder) GetActionCountByAddress(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActionCountByAddress", reflect.TypeOf((*MockIndexer)(nil).GetActionCountByAddress), arg0)
}

// GetActionHashFromIndex mocks base method.
func (m *MockIndexer) GetActionHashFromIndex(arg0, arg1 uint64) ([][]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActionHashFromIndex", arg0, arg1)
	ret0, _ := ret[0].([][]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActionHashFromIndex indicates an expected call of GetActionHashFromIndex.
func (mr *MockIndexerMockRecorder) GetActionHashFromIndex(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActionHashFromIndex", reflect.TypeOf((*MockIndexer)(nil).GetActionHashFromIndex), arg0, arg1)
}

// GetActionIndex mocks base method.
func (m *MockIndexer) GetActionIndex(arg0 []byte) (*blockindex.ActionIndex, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActionIndex", arg0)
	ret0, _ := ret[0].(*blockindex.ActionIndex)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActionIndex indicates an expected call of GetActionIndex.
func (mr *MockIndexerMockRecorder) GetActionIndex(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActionIndex", reflect.TypeOf((*MockIndexer)(nil).GetActionIndex), arg0)
}

// GetActionsByAddress mocks base method.
func (m *MockIndexer) GetActionsByAddress(arg0 hash.Hash160, arg1, arg2 uint64) ([][]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActionsByAddress", arg0, arg1, arg2)
	ret0, _ := ret[0].([][]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActionsByAddress indicates an expected call of GetActionsByAddress.
func (mr *MockIndexerMockRecorder) GetActionsByAddress(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActionsByAddress", reflect.TypeOf((*MockIndexer)(nil).GetActionsByAddress), arg0, arg1, arg2)
}

// GetBlockHash mocks base method.
func (m *MockIndexer) GetBlockHash(height uint64) (hash.Hash256, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockHash", height)
	ret0, _ := ret[0].(hash.Hash256)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockHash indicates an expected call of GetBlockHash.
func (mr *MockIndexerMockRecorder) GetBlockHash(height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockHash", reflect.TypeOf((*MockIndexer)(nil).GetBlockHash), height)
}

// GetBlockHeight mocks base method.
func (m *MockIndexer) GetBlockHeight(hash hash.Hash256) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockHeight", hash)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockHeight indicates an expected call of GetBlockHeight.
func (mr *MockIndexerMockRecorder) GetBlockHeight(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockHeight", reflect.TypeOf((*MockIndexer)(nil).GetBlockHeight), hash)
}

// GetBlockIndex mocks base method.
func (m *MockIndexer) GetBlockIndex(arg0 uint64) (*blockindex.BlockIndex, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockIndex", arg0)
	ret0, _ := ret[0].(*blockindex.BlockIndex)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockIndex indicates an expected call of GetBlockIndex.
func (mr *MockIndexerMockRecorder) GetBlockIndex(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockIndex", reflect.TypeOf((*MockIndexer)(nil).GetBlockIndex), arg0)
}

// GetTotalActions mocks base method.
func (m *MockIndexer) GetTotalActions() (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalActions")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalActions indicates an expected call of GetTotalActions.
func (mr *MockIndexerMockRecorder) GetTotalActions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalActions", reflect.TypeOf((*MockIndexer)(nil).GetTotalActions))
}

// Height mocks base method.
func (m *MockIndexer) Height() (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Height")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Height indicates an expected call of Height.
func (mr *MockIndexerMockRecorder) Height() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Height", reflect.TypeOf((*MockIndexer)(nil).Height))
}

// PutBlock mocks base method.
func (m *MockIndexer) PutBlock(arg0 context.Context, arg1 *block.Block) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutBlock", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutBlock indicates an expected call of PutBlock.
func (mr *MockIndexerMockRecorder) PutBlock(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutBlock", reflect.TypeOf((*MockIndexer)(nil).PutBlock), arg0, arg1)
}

// PutBlocks mocks base method.
func (m *MockIndexer) PutBlocks(arg0 context.Context, arg1 []*block.Block) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutBlocks", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutBlocks indicates an expected call of PutBlocks.
func (mr *MockIndexerMockRecorder) PutBlocks(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutBlocks", reflect.TypeOf((*MockIndexer)(nil).PutBlocks), arg0, arg1)
}

// Start mocks base method.
func (m *MockIndexer) Start(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockIndexerMockRecorder) Start(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockIndexer)(nil).Start), arg0)
}

// Stop mocks base method.
func (m *MockIndexer) Stop(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockIndexerMockRecorder) Stop(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockIndexer)(nil).Stop), arg0)
}
