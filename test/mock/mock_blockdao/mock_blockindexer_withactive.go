// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/iotexproject/iotex-core/v2/blockchain/blockdao (interfaces: BlockIndexerWithActive)

// Package mock_blockdao is a generated GoMock package.
package mock_blockdao

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	block "github.com/iotexproject/iotex-core/v2/blockchain/block"
)

// MockBlockIndexerWithActive is a mock of BlockIndexerWithActive interface.
type MockBlockIndexerWithActive struct {
	ctrl     *gomock.Controller
	recorder *MockBlockIndexerWithActiveMockRecorder
}

// MockBlockIndexerWithActiveMockRecorder is the mock recorder for MockBlockIndexerWithActive.
type MockBlockIndexerWithActiveMockRecorder struct {
	mock *MockBlockIndexerWithActive
}

// NewMockBlockIndexerWithActive creates a new mock instance.
func NewMockBlockIndexerWithActive(ctrl *gomock.Controller) *MockBlockIndexerWithActive {
	mock := &MockBlockIndexerWithActive{ctrl: ctrl}
	mock.recorder = &MockBlockIndexerWithActiveMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlockIndexerWithActive) EXPECT() *MockBlockIndexerWithActiveMockRecorder {
	return m.recorder
}

// Height mocks base method.
func (m *MockBlockIndexerWithActive) Height() (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Height")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Height indicates an expected call of Height.
func (mr *MockBlockIndexerWithActiveMockRecorder) Height() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Height", reflect.TypeOf((*MockBlockIndexerWithActive)(nil).Height))
}

// IsActive mocks base method.
func (m *MockBlockIndexerWithActive) IsActive() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsActive")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsActive indicates an expected call of IsActive.
func (mr *MockBlockIndexerWithActiveMockRecorder) IsActive() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsActive", reflect.TypeOf((*MockBlockIndexerWithActive)(nil).IsActive))
}

// PutBlock mocks base method.
func (m *MockBlockIndexerWithActive) PutBlock(arg0 context.Context, arg1 *block.Block) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutBlock", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutBlock indicates an expected call of PutBlock.
func (mr *MockBlockIndexerWithActiveMockRecorder) PutBlock(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutBlock", reflect.TypeOf((*MockBlockIndexerWithActive)(nil).PutBlock), arg0, arg1)
}

// Start mocks base method.
func (m *MockBlockIndexerWithActive) Start(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockBlockIndexerWithActiveMockRecorder) Start(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockBlockIndexerWithActive)(nil).Start), arg0)
}

// Stop mocks base method.
func (m *MockBlockIndexerWithActive) Stop(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockBlockIndexerWithActiveMockRecorder) Stop(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockBlockIndexerWithActive)(nil).Stop), arg0)
}
