// Code generated by MockGen. DO NOT EDIT.
// Source: ./txpool/txpool.go

// Package mock_txpool is a generated GoMock package.
package mock_txpool

import (
	gomock "github.com/golang/mock/gomock"
	blockchain "github.com/iotexproject/iotex-core/blockchain"
	trx "github.com/iotexproject/iotex-core/blockchain/trx"
	common "github.com/iotexproject/iotex-core/common"
	txpool "github.com/iotexproject/iotex-core/txpool"
	reflect "reflect"
	time "time"
)

// MockTxPool is a mock of TxPool interface
type MockTxPool struct {
	ctrl     *gomock.Controller
	recorder *MockTxPoolMockRecorder
}

// MockTxPoolMockRecorder is the mock recorder for MockTxPool
type MockTxPoolMockRecorder struct {
	mock *MockTxPool
}

// NewMockTxPool creates a new mock instance
func NewMockTxPool(ctrl *gomock.Controller) *MockTxPool {
	mock := &MockTxPool{ctrl: ctrl}
	mock.recorder = &MockTxPoolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTxPool) EXPECT() *MockTxPoolMockRecorder {
	return m.recorder
}

// RemoveOrphanTx mocks base method
func (m *MockTxPool) RemoveOrphanTx(tx *trx.Tx) {
	m.ctrl.Call(m, "RemoveOrphanTx", tx)
}

// RemoveOrphanTx indicates an expected call of RemoveOrphanTx
func (mr *MockTxPoolMockRecorder) RemoveOrphanTx(tx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveOrphanTx", reflect.TypeOf((*MockTxPool)(nil).RemoveOrphanTx), tx)
}

// RemoveOrphanTxsByTag mocks base method
func (m *MockTxPool) RemoveOrphanTxsByTag(tag txpool.Tag) uint64 {
	ret := m.ctrl.Call(m, "RemoveOrphanTxsByTag", tag)
	ret0, _ := ret[0].(uint64)
	return ret0
}

// RemoveOrphanTxsByTag indicates an expected call of RemoveOrphanTxsByTag
func (mr *MockTxPoolMockRecorder) RemoveOrphanTxsByTag(tag interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveOrphanTxsByTag", reflect.TypeOf((*MockTxPool)(nil).RemoveOrphanTxsByTag), tag)
}

// HasOrphanTx mocks base method
func (m *MockTxPool) HasOrphanTx(hash common.Hash32B) bool {
	ret := m.ctrl.Call(m, "HasOrphanTx", hash)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasOrphanTx indicates an expected call of HasOrphanTx
func (mr *MockTxPoolMockRecorder) HasOrphanTx(hash interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasOrphanTx", reflect.TypeOf((*MockTxPool)(nil).HasOrphanTx), hash)
}

// HasTxOrOrphanTx mocks base method
func (m *MockTxPool) HasTxOrOrphanTx(hash common.Hash32B) bool {
	ret := m.ctrl.Call(m, "HasTxOrOrphanTx", hash)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasTxOrOrphanTx indicates an expected call of HasTxOrOrphanTx
func (mr *MockTxPoolMockRecorder) HasTxOrOrphanTx(hash interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasTxOrOrphanTx", reflect.TypeOf((*MockTxPool)(nil).HasTxOrOrphanTx), hash)
}

// RemoveTx mocks base method
func (m *MockTxPool) RemoveTx(tx *trx.Tx, removeDescendants, updateTxDescPriorityQueue bool) {
	m.ctrl.Call(m, "RemoveTx", tx, removeDescendants, updateTxDescPriorityQueue)
}

// RemoveTx indicates an expected call of RemoveTx
func (mr *MockTxPoolMockRecorder) RemoveTx(tx, removeDescendants, updateTxDescPriorityQueue interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTx", reflect.TypeOf((*MockTxPool)(nil).RemoveTx), tx, removeDescendants, updateTxDescPriorityQueue)
}

// RemoveDoubleSpends mocks base method
func (m *MockTxPool) RemoveDoubleSpends(tx *trx.Tx) {
	m.ctrl.Call(m, "RemoveDoubleSpends", tx)
}

// RemoveDoubleSpends indicates an expected call of RemoveDoubleSpends
func (mr *MockTxPoolMockRecorder) RemoveDoubleSpends(tx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveDoubleSpends", reflect.TypeOf((*MockTxPool)(nil).RemoveDoubleSpends), tx)
}

// FetchTx mocks base method
func (m *MockTxPool) FetchTx(hash *common.Hash32B) (*trx.Tx, error) {
	ret := m.ctrl.Call(m, "FetchTx", hash)
	ret0, _ := ret[0].(*trx.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchTx indicates an expected call of FetchTx
func (mr *MockTxPoolMockRecorder) FetchTx(hash interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchTx", reflect.TypeOf((*MockTxPool)(nil).FetchTx), hash)
}

// MaybeAcceptTx mocks base method
func (m *MockTxPool) MaybeAcceptTx(tx *trx.Tx, isNew, rateLimit bool) ([]common.Hash32B, *txpool.TxDesc, error) {
	ret := m.ctrl.Call(m, "MaybeAcceptTx", tx, isNew, rateLimit)
	ret0, _ := ret[0].([]common.Hash32B)
	ret1, _ := ret[1].(*txpool.TxDesc)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// MaybeAcceptTx indicates an expected call of MaybeAcceptTx
func (mr *MockTxPoolMockRecorder) MaybeAcceptTx(tx, isNew, rateLimit interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MaybeAcceptTx", reflect.TypeOf((*MockTxPool)(nil).MaybeAcceptTx), tx, isNew, rateLimit)
}

// ProcessOrphanTxs mocks base method
func (m *MockTxPool) ProcessOrphanTxs(acceptedTx *trx.Tx) []*txpool.TxDesc {
	ret := m.ctrl.Call(m, "ProcessOrphanTxs", acceptedTx)
	ret0, _ := ret[0].([]*txpool.TxDesc)
	return ret0
}

// ProcessOrphanTxs indicates an expected call of ProcessOrphanTxs
func (mr *MockTxPoolMockRecorder) ProcessOrphanTxs(acceptedTx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessOrphanTxs", reflect.TypeOf((*MockTxPool)(nil).ProcessOrphanTxs), acceptedTx)
}

// ProcessTx mocks base method
func (m *MockTxPool) ProcessTx(tx *trx.Tx, allowOrphan, rateLimit bool, tag txpool.Tag) ([]*txpool.TxDesc, error) {
	ret := m.ctrl.Call(m, "ProcessTx", tx, allowOrphan, rateLimit, tag)
	ret0, _ := ret[0].([]*txpool.TxDesc)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessTx indicates an expected call of ProcessTx
func (mr *MockTxPoolMockRecorder) ProcessTx(tx, allowOrphan, rateLimit, tag interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessTx", reflect.TypeOf((*MockTxPool)(nil).ProcessTx), tx, allowOrphan, rateLimit, tag)
}

// TxDescs mocks base method
func (m *MockTxPool) TxDescs() []*txpool.TxDesc {
	ret := m.ctrl.Call(m, "TxDescs")
	ret0, _ := ret[0].([]*txpool.TxDesc)
	return ret0
}

// TxDescs indicates an expected call of TxDescs
func (mr *MockTxPoolMockRecorder) TxDescs() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxDescs", reflect.TypeOf((*MockTxPool)(nil).TxDescs))
}

// PickTxs mocks base method
func (m *MockTxPool) PickTxs() []*trx.Tx {
	ret := m.ctrl.Call(m, "PickTxs")
	ret0, _ := ret[0].([]*trx.Tx)
	return ret0
}

// PickTxs indicates an expected call of PickTxs
func (mr *MockTxPoolMockRecorder) PickTxs() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PickTxs", reflect.TypeOf((*MockTxPool)(nil).PickTxs))
}

// RemoveTxInBlock mocks base method
func (m *MockTxPool) RemoveTxInBlock(block *blockchain.Block) error {
	ret := m.ctrl.Call(m, "RemoveTxInBlock", block)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveTxInBlock indicates an expected call of RemoveTxInBlock
func (mr *MockTxPoolMockRecorder) RemoveTxInBlock(block interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTxInBlock", reflect.TypeOf((*MockTxPool)(nil).RemoveTxInBlock), block)
}

// LastTimePoolUpdated mocks base method
func (m *MockTxPool) LastTimePoolUpdated() time.Time {
	ret := m.ctrl.Call(m, "LastTimePoolUpdated")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// LastTimePoolUpdated indicates an expected call of LastTimePoolUpdated
func (mr *MockTxPoolMockRecorder) LastTimePoolUpdated() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastTimePoolUpdated", reflect.TypeOf((*MockTxPool)(nil).LastTimePoolUpdated))
}
