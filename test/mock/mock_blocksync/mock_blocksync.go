// Code generated by MockGen. DO NOT EDIT.
// Source: ./blocksync/blocksync.go

// Package mock_blocksync is a generated GoMock package.
package mock_blocksync

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	block "github.com/iotexproject/iotex-core/blockchain/block"
	iotexrpc "github.com/iotexproject/iotex-proto/golang/iotexrpc"
	go_libp2p_peerstore "github.com/libp2p/go-libp2p-peerstore"
	reflect "reflect"
)

// MockBlockDAO is a mock of BlockDAO interface
type MockBlockDAO struct {
	ctrl     *gomock.Controller
	recorder *MockBlockDAOMockRecorder
}

// MockBlockDAOMockRecorder is the mock recorder for MockBlockDAO
type MockBlockDAOMockRecorder struct {
	mock *MockBlockDAO
}

// NewMockBlockDAO creates a new mock instance
func NewMockBlockDAO(ctrl *gomock.Controller) *MockBlockDAO {
	mock := &MockBlockDAO{ctrl: ctrl}
	mock.recorder = &MockBlockDAOMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBlockDAO) EXPECT() *MockBlockDAOMockRecorder {
	return m.recorder
}

// GetBlockByHeight mocks base method
func (m *MockBlockDAO) GetBlockByHeight(arg0 uint64) (*block.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockByHeight", arg0)
	ret0, _ := ret[0].(*block.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockByHeight indicates an expected call of GetBlockByHeight
func (mr *MockBlockDAOMockRecorder) GetBlockByHeight(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockByHeight", reflect.TypeOf((*MockBlockDAO)(nil).GetBlockByHeight), arg0)
}

// MockBlockSync is a mock of BlockSync interface
type MockBlockSync struct {
	ctrl     *gomock.Controller
	recorder *MockBlockSyncMockRecorder
}

// MockBlockSyncMockRecorder is the mock recorder for MockBlockSync
type MockBlockSyncMockRecorder struct {
	mock *MockBlockSync
}

// NewMockBlockSync creates a new mock instance
func NewMockBlockSync(ctrl *gomock.Controller) *MockBlockSync {
	mock := &MockBlockSync{ctrl: ctrl}
	mock.recorder = &MockBlockSyncMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBlockSync) EXPECT() *MockBlockSyncMockRecorder {
	return m.recorder
}

// Start mocks base method
func (m *MockBlockSync) Start(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start
func (mr *MockBlockSyncMockRecorder) Start(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockBlockSync)(nil).Start), arg0)
}

// Stop mocks base method
func (m *MockBlockSync) Stop(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop
func (mr *MockBlockSyncMockRecorder) Stop(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockBlockSync)(nil).Stop), arg0)
}

// TargetHeight mocks base method
func (m *MockBlockSync) TargetHeight() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TargetHeight")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// TargetHeight indicates an expected call of TargetHeight
func (mr *MockBlockSyncMockRecorder) TargetHeight() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TargetHeight", reflect.TypeOf((*MockBlockSync)(nil).TargetHeight))
}

// Mute mocks base method
func (m *MockBlockSync) Mute() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Mute")
}

// Mute indicates an expected call of Mute
func (mr *MockBlockSyncMockRecorder) Mute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mute", reflect.TypeOf((*MockBlockSync)(nil).Mute))
}

// Unmute mocks base method
func (m *MockBlockSync) Unmute() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Unmute")
}

// Unmute indicates an expected call of Unmute
func (mr *MockBlockSyncMockRecorder) Unmute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unmute", reflect.TypeOf((*MockBlockSync)(nil).Unmute))
}

// ProcessSyncRequest mocks base method
func (m *MockBlockSync) ProcessSyncRequest(ctx context.Context, peer go_libp2p_peerstore.PeerInfo, sync *iotexrpc.BlockSync) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessSyncRequest", ctx, peer, sync)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessSyncRequest indicates an expected call of ProcessSyncRequest
func (mr *MockBlockSyncMockRecorder) ProcessSyncRequest(ctx, peer, sync interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessSyncRequest", reflect.TypeOf((*MockBlockSync)(nil).ProcessSyncRequest), ctx, peer, sync)
}

// ProcessBlock mocks base method
func (m *MockBlockSync) ProcessBlock(ctx context.Context, blk *block.Block) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessBlock", ctx, blk)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessBlock indicates an expected call of ProcessBlock
func (mr *MockBlockSyncMockRecorder) ProcessBlock(ctx, blk interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessBlock", reflect.TypeOf((*MockBlockSync)(nil).ProcessBlock), ctx, blk)
}

// SyncStatus mocks base method
func (m *MockBlockSync) SyncStatus() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncStatus")
	ret0, _ := ret[0].(string)
	return ret0
}

// SyncStatus indicates an expected call of SyncStatus
func (mr *MockBlockSyncMockRecorder) SyncStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncStatus", reflect.TypeOf((*MockBlockSync)(nil).SyncStatus))
}
