// Code generated by MockGen. DO NOT EDIT.
// Source: ./consensus/consensus.go

// Package mock_consensus is a generated GoMock package.
package mock_consensus

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	proto "github.com/golang/protobuf/proto"
	scheme "github.com/iotexproject/iotex-core/consensus/scheme"
	reflect "reflect"
)

// MockConsensus is a mock of Consensus interface
type MockConsensus struct {
	ctrl     *gomock.Controller
	recorder *MockConsensusMockRecorder
}

// MockConsensusMockRecorder is the mock recorder for MockConsensus
type MockConsensusMockRecorder struct {
	mock *MockConsensus
}

// NewMockConsensus creates a new mock instance
func NewMockConsensus(ctrl *gomock.Controller) *MockConsensus {
	mock := &MockConsensus{ctrl: ctrl}
	mock.recorder = &MockConsensusMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConsensus) EXPECT() *MockConsensusMockRecorder {
	return m.recorder
}

// Start mocks base method
func (m *MockConsensus) Start(arg0 context.Context) error {
	ret := m.ctrl.Call(m, "Start", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start
func (mr *MockConsensusMockRecorder) Start(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockConsensus)(nil).Start), arg0)
}

// Stop mocks base method
func (m *MockConsensus) Stop(arg0 context.Context) error {
	ret := m.ctrl.Call(m, "Stop", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop
func (mr *MockConsensusMockRecorder) Stop(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockConsensus)(nil).Stop), arg0)
}

// HandleViewChange mocks base method
func (m *MockConsensus) HandleViewChange(arg0 proto.Message) error {
	ret := m.ctrl.Call(m, "HandleViewChange", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleViewChange indicates an expected call of HandleViewChange
func (mr *MockConsensusMockRecorder) HandleViewChange(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleViewChange", reflect.TypeOf((*MockConsensus)(nil).HandleViewChange), arg0)
}

// HandleBlockPropose mocks base method
func (m *MockConsensus) HandleBlockPropose(arg0 proto.Message) error {
	ret := m.ctrl.Call(m, "HandleBlockPropose", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleBlockPropose indicates an expected call of HandleBlockPropose
func (mr *MockConsensusMockRecorder) HandleBlockPropose(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleBlockPropose", reflect.TypeOf((*MockConsensus)(nil).HandleBlockPropose), arg0)
}

// Metrics mocks base method
func (m *MockConsensus) Metrics() (scheme.ConsensusMetrics, error) {
	ret := m.ctrl.Call(m, "Metrics")
	ret0, _ := ret[0].(scheme.ConsensusMetrics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Metrics indicates an expected call of Metrics
func (mr *MockConsensusMockRecorder) Metrics() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Metrics", reflect.TypeOf((*MockConsensus)(nil).Metrics))
}
