// Code generated by MockGen. DO NOT EDIT.
// Source: ./actpool/actioniterator/actioniterator.go

// Package mock_actioniterator is a generated GoMock package.
package mock_actioniterator

import (
	gomock "github.com/golang/mock/gomock"
	action "github.com/iotexproject/iotex-core/action"
	reflect "reflect"
)

// MockActionValidator is a mock of ActionValidator interface
type MockActionValidator struct {
	ctrl     *gomock.Controller
	recorder *MockActionValidatorMockRecorder
}

// MockActionValidatorMockRecorder is the mock recorder for MockActionValidator
type MockActionValidatorMockRecorder struct {
	mock *MockActionValidator
}

// NewMockActionValidator creates a new mock instance
func NewMockActionValidator(ctrl *gomock.Controller) *MockActionValidator {
	mock := &MockActionValidator{ctrl: ctrl}
	mock.recorder = &MockActionValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockActionValidator) EXPECT() *MockActionValidatorMockRecorder {
	return m.recorder
}

// Validate mocks base method
func (m *MockActionValidator) Validate(bestAction action.Action) error {
	ret := m.ctrl.Call(m, "Validate", bestAction)
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate
func (mr *MockActionValidatorMockRecorder) Validate(bestAction interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockActionValidator)(nil).Validate), bestAction)
}

// MockActionIterator is a mock of ActionIterator interface
type MockActionIterator struct {
	ctrl     *gomock.Controller
	recorder *MockActionIteratorMockRecorder
}

// MockActionIteratorMockRecorder is the mock recorder for MockActionIterator
type MockActionIteratorMockRecorder struct {
	mock *MockActionIterator
}

// NewMockActionIterator creates a new mock instance
func NewMockActionIterator(ctrl *gomock.Controller) *MockActionIterator {
	mock := &MockActionIterator{ctrl: ctrl}
	mock.recorder = &MockActionIteratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockActionIterator) EXPECT() *MockActionIteratorMockRecorder {
	return m.recorder
}

// Next mocks base method
func (m *MockActionIterator) Next() action.Action {
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(action.Action)
	return ret0
}

// Next indicates an expected call of Next
func (mr *MockActionIteratorMockRecorder) Next() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockActionIterator)(nil).Next))
}
