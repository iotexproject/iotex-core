// Code generated by MockGen. DO NOT EDIT.
// Source: ./state/workingset.go

// Package mock_state is a generated GoMock package.
package mock_state

import (
	gomock "github.com/golang/mock/gomock"
	action "github.com/iotexproject/iotex-core/action"
	hash "github.com/iotexproject/iotex-core/pkg/hash"
	state "github.com/iotexproject/iotex-core/state"
	reflect "reflect"
)

// MockWorkingSet is a mock of WorkingSet interface
type MockWorkingSet struct {
	ctrl     *gomock.Controller
	recorder *MockWorkingSetMockRecorder
}

// MockWorkingSetMockRecorder is the mock recorder for MockWorkingSet
type MockWorkingSetMockRecorder struct {
	mock *MockWorkingSet
}

// NewMockWorkingSet creates a new mock instance
func NewMockWorkingSet(ctrl *gomock.Controller) *MockWorkingSet {
	mock := &MockWorkingSet{ctrl: ctrl}
	mock.recorder = &MockWorkingSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWorkingSet) EXPECT() *MockWorkingSetMockRecorder {
	return m.recorder
}

// LoadOrCreateState mocks base method
func (m *MockWorkingSet) LoadOrCreateState(arg0 string, arg1 uint64) (*state.State, error) {
	ret := m.ctrl.Call(m, "LoadOrCreateState", arg0, arg1)
	ret0, _ := ret[0].(*state.State)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadOrCreateState indicates an expected call of LoadOrCreateState
func (mr *MockWorkingSetMockRecorder) LoadOrCreateState(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadOrCreateState", reflect.TypeOf((*MockWorkingSet)(nil).LoadOrCreateState), arg0, arg1)
}

// Nonce mocks base method
func (m *MockWorkingSet) Nonce(arg0 string) (uint64, error) {
	ret := m.ctrl.Call(m, "Nonce", arg0)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Nonce indicates an expected call of Nonce
func (mr *MockWorkingSetMockRecorder) Nonce(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Nonce", reflect.TypeOf((*MockWorkingSet)(nil).Nonce), arg0)
}

// CachedState mocks base method
func (m *MockWorkingSet) CachedState(arg0 string) (*state.State, error) {
	ret := m.ctrl.Call(m, "CachedState", arg0)
	ret0, _ := ret[0].(*state.State)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CachedState indicates an expected call of CachedState
func (mr *MockWorkingSetMockRecorder) CachedState(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CachedState", reflect.TypeOf((*MockWorkingSet)(nil).CachedState), arg0)
}

// RunActions mocks base method
func (m *MockWorkingSet) RunActions(arg0 uint64, arg1 []*action.Transfer, arg2 []*action.Vote, arg3 []*action.Execution, arg4 []action.Action) (hash.Hash32B, error) {
	ret := m.ctrl.Call(m, "RunActions", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(hash.Hash32B)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunActions indicates an expected call of RunActions
func (mr *MockWorkingSetMockRecorder) RunActions(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunActions", reflect.TypeOf((*MockWorkingSet)(nil).RunActions), arg0, arg1, arg2, arg3, arg4)
}

// commit mocks base method
func (m *MockWorkingSet) commit() error {
	ret := m.ctrl.Call(m, "commit")
	ret0, _ := ret[0].(error)
	return ret0
}

// commit indicates an expected call of commit
func (mr *MockWorkingSetMockRecorder) commit() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "commit", reflect.TypeOf((*MockWorkingSet)(nil).commit))
}

// GetCodeHash mocks base method
func (m *MockWorkingSet) GetCodeHash(arg0 hash.PKHash) (hash.Hash32B, error) {
	ret := m.ctrl.Call(m, "GetCodeHash", arg0)
	ret0, _ := ret[0].(hash.Hash32B)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCodeHash indicates an expected call of GetCodeHash
func (mr *MockWorkingSetMockRecorder) GetCodeHash(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCodeHash", reflect.TypeOf((*MockWorkingSet)(nil).GetCodeHash), arg0)
}

// GetCode mocks base method
func (m *MockWorkingSet) GetCode(arg0 hash.PKHash) ([]byte, error) {
	ret := m.ctrl.Call(m, "GetCode", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCode indicates an expected call of GetCode
func (mr *MockWorkingSetMockRecorder) GetCode(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCode", reflect.TypeOf((*MockWorkingSet)(nil).GetCode), arg0)
}

// SetCode mocks base method
func (m *MockWorkingSet) SetCode(arg0 hash.PKHash, arg1 []byte) error {
	ret := m.ctrl.Call(m, "SetCode", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCode indicates an expected call of SetCode
func (mr *MockWorkingSetMockRecorder) SetCode(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCode", reflect.TypeOf((*MockWorkingSet)(nil).SetCode), arg0, arg1)
}

// GetContractState mocks base method
func (m *MockWorkingSet) GetContractState(arg0 hash.PKHash, arg1 hash.Hash32B) (hash.Hash32B, error) {
	ret := m.ctrl.Call(m, "GetContractState", arg0, arg1)
	ret0, _ := ret[0].(hash.Hash32B)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContractState indicates an expected call of GetContractState
func (mr *MockWorkingSetMockRecorder) GetContractState(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContractState", reflect.TypeOf((*MockWorkingSet)(nil).GetContractState), arg0, arg1)
}

// SetContractState mocks base method
func (m *MockWorkingSet) SetContractState(arg0 hash.PKHash, arg1, arg2 hash.Hash32B) error {
	ret := m.ctrl.Call(m, "SetContractState", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetContractState indicates an expected call of SetContractState
func (mr *MockWorkingSetMockRecorder) SetContractState(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetContractState", reflect.TypeOf((*MockWorkingSet)(nil).SetContractState), arg0, arg1, arg2)
}
