// Code generated by MockGen. DO NOT EDIT.
// Source: ./node/manager.go

// Package mock_node is a generated GoMock package.
package mock_node

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	crypto "github.com/iotexproject/go-pkgs/crypto"
	peer "github.com/libp2p/go-libp2p-core/peer"
	proto "google.golang.org/protobuf/proto"
)

// Mocktransmitter is a mock of transmitter interface.
type Mocktransmitter struct {
	ctrl     *gomock.Controller
	recorder *MocktransmitterMockRecorder
}

// MocktransmitterMockRecorder is the mock recorder for Mocktransmitter.
type MocktransmitterMockRecorder struct {
	mock *Mocktransmitter
}

// NewMocktransmitter creates a new mock instance.
func NewMocktransmitter(ctrl *gomock.Controller) *Mocktransmitter {
	mock := &Mocktransmitter{ctrl: ctrl}
	mock.recorder = &MocktransmitterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mocktransmitter) EXPECT() *MocktransmitterMockRecorder {
	return m.recorder
}

// BroadcastOutbound mocks base method.
func (m *Mocktransmitter) BroadcastOutbound(arg0 context.Context, arg1 proto.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BroadcastOutbound", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// BroadcastOutbound indicates an expected call of BroadcastOutbound.
func (mr *MocktransmitterMockRecorder) BroadcastOutbound(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BroadcastOutbound", reflect.TypeOf((*Mocktransmitter)(nil).BroadcastOutbound), arg0, arg1)
}

// UnicastOutbound mocks base method.
func (m *Mocktransmitter) UnicastOutbound(arg0 context.Context, arg1 peer.AddrInfo, arg2 proto.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnicastOutbound", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnicastOutbound indicates an expected call of UnicastOutbound.
func (mr *MocktransmitterMockRecorder) UnicastOutbound(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnicastOutbound", reflect.TypeOf((*Mocktransmitter)(nil).UnicastOutbound), arg0, arg1, arg2)
}

// Mockheightable is a mock of heightable interface.
type Mockheightable struct {
	ctrl     *gomock.Controller
	recorder *MockheightableMockRecorder
}

// MockheightableMockRecorder is the mock recorder for Mockheightable.
type MockheightableMockRecorder struct {
	mock *Mockheightable
}

// NewMockheightable creates a new mock instance.
func NewMockheightable(ctrl *gomock.Controller) *Mockheightable {
	mock := &Mockheightable{ctrl: ctrl}
	mock.recorder = &MockheightableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockheightable) EXPECT() *MockheightableMockRecorder {
	return m.recorder
}

// TipHeight mocks base method.
func (m *Mockheightable) TipHeight() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TipHeight")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// TipHeight indicates an expected call of TipHeight.
func (mr *MockheightableMockRecorder) TipHeight() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TipHeight", reflect.TypeOf((*Mockheightable)(nil).TipHeight))
}

// MockprivateKey is a mock of privateKey interface.
type MockprivateKey struct {
	ctrl     *gomock.Controller
	recorder *MockprivateKeyMockRecorder
}

// MockprivateKeyMockRecorder is the mock recorder for MockprivateKey.
type MockprivateKeyMockRecorder struct {
	mock *MockprivateKey
}

// NewMockprivateKey creates a new mock instance.
func NewMockprivateKey(ctrl *gomock.Controller) *MockprivateKey {
	mock := &MockprivateKey{ctrl: ctrl}
	mock.recorder = &MockprivateKeyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockprivateKey) EXPECT() *MockprivateKeyMockRecorder {
	return m.recorder
}

// PublicKey mocks base method.
func (m *MockprivateKey) PublicKey() crypto.PublicKey {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublicKey")
	ret0, _ := ret[0].(crypto.PublicKey)
	return ret0
}

// PublicKey indicates an expected call of PublicKey.
func (mr *MockprivateKeyMockRecorder) PublicKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublicKey", reflect.TypeOf((*MockprivateKey)(nil).PublicKey))
}

// Sign mocks base method.
func (m *MockprivateKey) Sign(arg0 []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sign", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sign indicates an expected call of Sign.
func (mr *MockprivateKeyMockRecorder) Sign(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sign", reflect.TypeOf((*MockprivateKey)(nil).Sign), arg0)
}
