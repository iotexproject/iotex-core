// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/iotexproject/go-pkgs/crypto (interfaces: PublicKey)

// Package mock_crypto is a generated GoMock package.
package mock_crypto

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	address "github.com/iotexproject/iotex-address/address"
)

// MockPublicKey is a mock of PublicKey interface.
type MockPublicKey struct {
	ctrl     *gomock.Controller
	recorder *MockPublicKeyMockRecorder
}

// MockPublicKeyMockRecorder is the mock recorder for MockPublicKey.
type MockPublicKeyMockRecorder struct {
	mock *MockPublicKey
}

// NewMockPublicKey creates a new mock instance.
func NewMockPublicKey(ctrl *gomock.Controller) *MockPublicKey {
	mock := &MockPublicKey{ctrl: ctrl}
	mock.recorder = &MockPublicKeyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPublicKey) EXPECT() *MockPublicKeyMockRecorder {
	return m.recorder
}

// Address mocks base method.
func (m *MockPublicKey) Address() address.Address {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Address")
	ret0, _ := ret[0].(address.Address)
	return ret0
}

// Address indicates an expected call of Address.
func (mr *MockPublicKeyMockRecorder) Address() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Address", reflect.TypeOf((*MockPublicKey)(nil).Address))
}

// Bytes mocks base method.
func (m *MockPublicKey) Bytes() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bytes")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Bytes indicates an expected call of Bytes.
func (mr *MockPublicKeyMockRecorder) Bytes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bytes", reflect.TypeOf((*MockPublicKey)(nil).Bytes))
}

// EcdsaPublicKey mocks base method.
func (m *MockPublicKey) EcdsaPublicKey() interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EcdsaPublicKey")
	ret0, _ := ret[0].(interface{})
	return ret0
}

// EcdsaPublicKey indicates an expected call of EcdsaPublicKey.
func (mr *MockPublicKeyMockRecorder) EcdsaPublicKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EcdsaPublicKey", reflect.TypeOf((*MockPublicKey)(nil).EcdsaPublicKey))
}

// Hash mocks base method.
func (m *MockPublicKey) Hash() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hash")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Hash indicates an expected call of Hash.
func (mr *MockPublicKeyMockRecorder) Hash() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hash", reflect.TypeOf((*MockPublicKey)(nil).Hash))
}

// HexString mocks base method.
func (m *MockPublicKey) HexString() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HexString")
	ret0, _ := ret[0].(string)
	return ret0
}

// HexString indicates an expected call of HexString.
func (mr *MockPublicKeyMockRecorder) HexString() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HexString", reflect.TypeOf((*MockPublicKey)(nil).HexString))
}

// Verify mocks base method.
func (m *MockPublicKey) Verify(arg0, arg1 []byte) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Verify indicates an expected call of Verify.
func (mr *MockPublicKeyMockRecorder) Verify(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockPublicKey)(nil).Verify), arg0, arg1)
}
