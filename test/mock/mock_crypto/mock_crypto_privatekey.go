// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/iotexproject/go-pkgs/crypto (interfaces: PrivateKey)

// Package mock_crypto is a generated GoMock package.
package mock_crypto

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	crypto "github.com/iotexproject/go-pkgs/crypto"
)

// MockPrivateKey is a mock of PrivateKey interface.
type MockPrivateKey struct {
	ctrl     *gomock.Controller
	recorder *MockPrivateKeyMockRecorder
}

// MockPrivateKeyMockRecorder is the mock recorder for MockPrivateKey.
type MockPrivateKeyMockRecorder struct {
	mock *MockPrivateKey
}

// NewMockPrivateKey creates a new mock instance.
func NewMockPrivateKey(ctrl *gomock.Controller) *MockPrivateKey {
	mock := &MockPrivateKey{ctrl: ctrl}
	mock.recorder = &MockPrivateKeyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPrivateKey) EXPECT() *MockPrivateKeyMockRecorder {
	return m.recorder
}

// Bytes mocks base method.
func (m *MockPrivateKey) Bytes() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bytes")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Bytes indicates an expected call of Bytes.
func (mr *MockPrivateKeyMockRecorder) Bytes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bytes", reflect.TypeOf((*MockPrivateKey)(nil).Bytes))
}

// EcdsaPrivateKey mocks base method.
func (m *MockPrivateKey) EcdsaPrivateKey() interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EcdsaPrivateKey")
	ret0, _ := ret[0].(interface{})
	return ret0
}

// EcdsaPrivateKey indicates an expected call of EcdsaPrivateKey.
func (mr *MockPrivateKeyMockRecorder) EcdsaPrivateKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EcdsaPrivateKey", reflect.TypeOf((*MockPrivateKey)(nil).EcdsaPrivateKey))
}

// HexString mocks base method.
func (m *MockPrivateKey) HexString() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HexString")
	ret0, _ := ret[0].(string)
	return ret0
}

// HexString indicates an expected call of HexString.
func (mr *MockPrivateKeyMockRecorder) HexString() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HexString", reflect.TypeOf((*MockPrivateKey)(nil).HexString))
}

// PublicKey mocks base method.
func (m *MockPrivateKey) PublicKey() crypto.PublicKey {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublicKey")
	ret0, _ := ret[0].(crypto.PublicKey)
	return ret0
}

// PublicKey indicates an expected call of PublicKey.
func (mr *MockPrivateKeyMockRecorder) PublicKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublicKey", reflect.TypeOf((*MockPrivateKey)(nil).PublicKey))
}

// Sign mocks base method.
func (m *MockPrivateKey) Sign(arg0 []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sign", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sign indicates an expected call of Sign.
func (mr *MockPrivateKeyMockRecorder) Sign(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sign", reflect.TypeOf((*MockPrivateKey)(nil).Sign), arg0)
}

// Zero mocks base method.
func (m *MockPrivateKey) Zero() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Zero")
}

// Zero indicates an expected call of Zero.
func (mr *MockPrivateKeyMockRecorder) Zero() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Zero", reflect.TypeOf((*MockPrivateKey)(nil).Zero))
}
