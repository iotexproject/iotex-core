// Code generated by MockGen. DO NOT EDIT.
// Source: ./action/protocol/staking/viewdata.go
//
// Generated by this command:
//
//	mockgen -destination=./action/protocol/staking/viewdata_mock.go -source=./action/protocol/staking/viewdata.go -package=staking ContractStakeView
//

// Package staking is a generated GoMock package.
package staking

import (
	context "context"
	big "math/big"
	reflect "reflect"

	address "github.com/iotexproject/iotex-address/address"
	action "github.com/iotexproject/iotex-core/v2/action"
	protocol "github.com/iotexproject/iotex-core/v2/action/protocol"
	gomock "go.uber.org/mock/gomock"
)

// MockContractStakeView is a mock of ContractStakeView interface.
type MockContractStakeView struct {
	ctrl     *gomock.Controller
	recorder *MockContractStakeViewMockRecorder
	isgomock struct{}
}

// MockContractStakeViewMockRecorder is the mock recorder for MockContractStakeView.
type MockContractStakeViewMockRecorder struct {
	mock *MockContractStakeView
}

// NewMockContractStakeView creates a new mock instance.
func NewMockContractStakeView(ctrl *gomock.Controller) *MockContractStakeView {
	mock := &MockContractStakeView{ctrl: ctrl}
	mock.recorder = &MockContractStakeViewMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContractStakeView) EXPECT() *MockContractStakeViewMockRecorder {
	return m.recorder
}

// AddBlockReceipts mocks base method.
func (m *MockContractStakeView) AddBlockReceipts(ctx context.Context, receipts []*action.Receipt, handler CachedEventHandler) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBlockReceipts", ctx, receipts, handler)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddBlockReceipts indicates an expected call of AddBlockReceipts.
func (mr *MockContractStakeViewMockRecorder) AddBlockReceipts(ctx, receipts, handler any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBlockReceipts", reflect.TypeOf((*MockContractStakeView)(nil).AddBlockReceipts), ctx, receipts, handler)
}

// CandidateStakeVotes mocks base method.
func (m *MockContractStakeView) CandidateStakeVotes(ctx context.Context, id address.Address) *big.Int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CandidateStakeVotes", ctx, id)
	ret0, _ := ret[0].(*big.Int)
	return ret0
}

// CandidateStakeVotes indicates an expected call of CandidateStakeVotes.
func (mr *MockContractStakeViewMockRecorder) CandidateStakeVotes(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CandidateStakeVotes", reflect.TypeOf((*MockContractStakeView)(nil).CandidateStakeVotes), ctx, id)
}

// Commit mocks base method.
func (m *MockContractStakeView) Commit(arg0 context.Context, arg1 protocol.StateManager) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockContractStakeViewMockRecorder) Commit(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockContractStakeView)(nil).Commit), arg0, arg1)
}

// CreatePreStates mocks base method.
func (m *MockContractStakeView) CreatePreStates(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePreStates", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePreStates indicates an expected call of CreatePreStates.
func (mr *MockContractStakeViewMockRecorder) CreatePreStates(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePreStates", reflect.TypeOf((*MockContractStakeView)(nil).CreatePreStates), ctx)
}

// Fork mocks base method.
func (m *MockContractStakeView) Fork() ContractStakeView {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fork")
	ret0, _ := ret[0].(ContractStakeView)
	return ret0
}

// Fork indicates an expected call of Fork.
func (mr *MockContractStakeViewMockRecorder) Fork() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fork", reflect.TypeOf((*MockContractStakeView)(nil).Fork))
}

// Handle mocks base method.
func (m *MockContractStakeView) Handle(ctx context.Context, receipt *action.Receipt) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle", ctx, receipt)
	ret0, _ := ret[0].(error)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *MockContractStakeViewMockRecorder) Handle(ctx, receipt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockContractStakeView)(nil).Handle), ctx, receipt)
}

// Height mocks base method.
func (m *MockContractStakeView) Height() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Height")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// Height indicates an expected call of Height.
func (mr *MockContractStakeViewMockRecorder) Height() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Height", reflect.TypeOf((*MockContractStakeView)(nil).Height))
}

// IsDirty mocks base method.
func (m *MockContractStakeView) IsDirty() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsDirty")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsDirty indicates an expected call of IsDirty.
func (mr *MockContractStakeViewMockRecorder) IsDirty() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsDirty", reflect.TypeOf((*MockContractStakeView)(nil).IsDirty))
}

// Migrate mocks base method.
func (m *MockContractStakeView) Migrate(arg0 EventHandler) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Migrate", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Migrate indicates an expected call of Migrate.
func (mr *MockContractStakeViewMockRecorder) Migrate(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Migrate", reflect.TypeOf((*MockContractStakeView)(nil).Migrate), arg0)
}

// Wrap mocks base method.
func (m *MockContractStakeView) Wrap() ContractStakeView {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Wrap")
	ret0, _ := ret[0].(ContractStakeView)
	return ret0
}

// Wrap indicates an expected call of Wrap.
func (mr *MockContractStakeViewMockRecorder) Wrap() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wrap", reflect.TypeOf((*MockContractStakeView)(nil).Wrap))
}
