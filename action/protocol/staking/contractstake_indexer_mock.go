// Code generated by MockGen. DO NOT EDIT.
// Source: ./action/protocol/staking/contractstake_indexer.go
//
// Generated by this command:
//
//	mockgen -destination=./action/protocol/staking/contractstake_indexer_mock.go -source=./action/protocol/staking/contractstake_indexer.go -package=staking ContractStakingIndexer
//

// Package staking is a generated GoMock package.
package staking

import (
	context "context"
	reflect "reflect"

	address "github.com/iotexproject/iotex-address/address"
	action "github.com/iotexproject/iotex-core/v2/action"
	protocol "github.com/iotexproject/iotex-core/v2/action/protocol"
	contractstaking "github.com/iotexproject/iotex-core/v2/action/protocol/staking/contractstaking"
	gomock "go.uber.org/mock/gomock"
)

// MockEventHandler is a mock of EventHandler interface.
type MockEventHandler struct {
	ctrl     *gomock.Controller
	recorder *MockEventHandlerMockRecorder
	isgomock struct{}
}

// MockEventHandlerMockRecorder is the mock recorder for MockEventHandler.
type MockEventHandlerMockRecorder struct {
	mock *MockEventHandler
}

// NewMockEventHandler creates a new mock instance.
func NewMockEventHandler(ctrl *gomock.Controller) *MockEventHandler {
	mock := &MockEventHandler{ctrl: ctrl}
	mock.recorder = &MockEventHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventHandler) EXPECT() *MockEventHandlerMockRecorder {
	return m.recorder
}

// DeductBucket mocks base method.
func (m *MockEventHandler) DeductBucket(arg0 address.Address, arg1 uint64) (*contractstaking.Bucket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeductBucket", arg0, arg1)
	ret0, _ := ret[0].(*contractstaking.Bucket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeductBucket indicates an expected call of DeductBucket.
func (mr *MockEventHandlerMockRecorder) DeductBucket(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeductBucket", reflect.TypeOf((*MockEventHandler)(nil).DeductBucket), arg0, arg1)
}

// DeleteBucket mocks base method.
func (m *MockEventHandler) DeleteBucket(arg0 address.Address, arg1 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBucket", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBucket indicates an expected call of DeleteBucket.
func (mr *MockEventHandlerMockRecorder) DeleteBucket(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBucket", reflect.TypeOf((*MockEventHandler)(nil).DeleteBucket), arg0, arg1)
}

// PutBucket mocks base method.
func (m *MockEventHandler) PutBucket(arg0 address.Address, arg1 uint64, arg2 *contractstaking.Bucket) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutBucket", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutBucket indicates an expected call of PutBucket.
func (mr *MockEventHandlerMockRecorder) PutBucket(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutBucket", reflect.TypeOf((*MockEventHandler)(nil).PutBucket), arg0, arg1, arg2)
}

// PutBucketType mocks base method.
func (m *MockEventHandler) PutBucketType(arg0 address.Address, arg1 *ContractStakingBucketType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutBucketType", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutBucketType indicates an expected call of PutBucketType.
func (mr *MockEventHandlerMockRecorder) PutBucketType(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutBucketType", reflect.TypeOf((*MockEventHandler)(nil).PutBucketType), arg0, arg1)
}

// MockBucketCache is a mock of BucketCache interface.
type MockBucketCache struct {
	ctrl     *gomock.Controller
	recorder *MockBucketCacheMockRecorder
	isgomock struct{}
}

// MockBucketCacheMockRecorder is the mock recorder for MockBucketCache.
type MockBucketCacheMockRecorder struct {
	mock *MockBucketCache
}

// NewMockBucketCache creates a new mock instance.
func NewMockBucketCache(ctrl *gomock.Controller) *MockBucketCache {
	mock := &MockBucketCache{ctrl: ctrl}
	mock.recorder = &MockBucketCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBucketCache) EXPECT() *MockBucketCacheMockRecorder {
	return m.recorder
}

// ContractStakingBuckets mocks base method.
func (m *MockBucketCache) ContractStakingBuckets() (uint64, map[uint64]*contractstaking.Bucket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContractStakingBuckets")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(map[uint64]*contractstaking.Bucket)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ContractStakingBuckets indicates an expected call of ContractStakingBuckets.
func (mr *MockBucketCacheMockRecorder) ContractStakingBuckets() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContractStakingBuckets", reflect.TypeOf((*MockBucketCache)(nil).ContractStakingBuckets))
}

// MockCachedEventHandler is a mock of CachedEventHandler interface.
type MockCachedEventHandler struct {
	ctrl     *gomock.Controller
	recorder *MockCachedEventHandlerMockRecorder
	isgomock struct{}
}

// MockCachedEventHandlerMockRecorder is the mock recorder for MockCachedEventHandler.
type MockCachedEventHandlerMockRecorder struct {
	mock *MockCachedEventHandler
}

// NewMockCachedEventHandler creates a new mock instance.
func NewMockCachedEventHandler(ctrl *gomock.Controller) *MockCachedEventHandler {
	mock := &MockCachedEventHandler{ctrl: ctrl}
	mock.recorder = &MockCachedEventHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCachedEventHandler) EXPECT() *MockCachedEventHandlerMockRecorder {
	return m.recorder
}

// ContractStakingBuckets mocks base method.
func (m *MockCachedEventHandler) ContractStakingBuckets() (uint64, map[uint64]*contractstaking.Bucket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContractStakingBuckets")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(map[uint64]*contractstaking.Bucket)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ContractStakingBuckets indicates an expected call of ContractStakingBuckets.
func (mr *MockCachedEventHandlerMockRecorder) ContractStakingBuckets() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContractStakingBuckets", reflect.TypeOf((*MockCachedEventHandler)(nil).ContractStakingBuckets))
}

// DeductBucket mocks base method.
func (m *MockCachedEventHandler) DeductBucket(arg0 address.Address, arg1 uint64) (*contractstaking.Bucket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeductBucket", arg0, arg1)
	ret0, _ := ret[0].(*contractstaking.Bucket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeductBucket indicates an expected call of DeductBucket.
func (mr *MockCachedEventHandlerMockRecorder) DeductBucket(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeductBucket", reflect.TypeOf((*MockCachedEventHandler)(nil).DeductBucket), arg0, arg1)
}

// DeleteBucket mocks base method.
func (m *MockCachedEventHandler) DeleteBucket(arg0 address.Address, arg1 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBucket", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBucket indicates an expected call of DeleteBucket.
func (mr *MockCachedEventHandlerMockRecorder) DeleteBucket(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBucket", reflect.TypeOf((*MockCachedEventHandler)(nil).DeleteBucket), arg0, arg1)
}

// Finalize mocks base method.
func (m *MockCachedEventHandler) Finalize(height uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Finalize", height)
}

// Finalize indicates an expected call of Finalize.
func (mr *MockCachedEventHandlerMockRecorder) Finalize(height any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Finalize", reflect.TypeOf((*MockCachedEventHandler)(nil).Finalize), height)
}

// PutBucket mocks base method.
func (m *MockCachedEventHandler) PutBucket(arg0 address.Address, arg1 uint64, arg2 *contractstaking.Bucket) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutBucket", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutBucket indicates an expected call of PutBucket.
func (mr *MockCachedEventHandlerMockRecorder) PutBucket(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutBucket", reflect.TypeOf((*MockCachedEventHandler)(nil).PutBucket), arg0, arg1, arg2)
}

// PutBucketType mocks base method.
func (m *MockCachedEventHandler) PutBucketType(arg0 address.Address, arg1 *ContractStakingBucketType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutBucketType", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutBucketType indicates an expected call of PutBucketType.
func (mr *MockCachedEventHandlerMockRecorder) PutBucketType(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutBucketType", reflect.TypeOf((*MockCachedEventHandler)(nil).PutBucketType), arg0, arg1)
}

// MockEventProcessor is a mock of EventProcessor interface.
type MockEventProcessor struct {
	ctrl     *gomock.Controller
	recorder *MockEventProcessorMockRecorder
	isgomock struct{}
}

// MockEventProcessorMockRecorder is the mock recorder for MockEventProcessor.
type MockEventProcessorMockRecorder struct {
	mock *MockEventProcessor
}

// NewMockEventProcessor creates a new mock instance.
func NewMockEventProcessor(ctrl *gomock.Controller) *MockEventProcessor {
	mock := &MockEventProcessor{ctrl: ctrl}
	mock.recorder = &MockEventProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventProcessor) EXPECT() *MockEventProcessorMockRecorder {
	return m.recorder
}

// ProcessReceipts mocks base method.
func (m *MockEventProcessor) ProcessReceipts(arg0 context.Context, arg1 ...*action.Receipt) error {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProcessReceipts", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessReceipts indicates an expected call of ProcessReceipts.
func (mr *MockEventProcessorMockRecorder) ProcessReceipts(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessReceipts", reflect.TypeOf((*MockEventProcessor)(nil).ProcessReceipts), varargs...)
}

// MockContractStakingIndexer is a mock of ContractStakingIndexer interface.
type MockContractStakingIndexer struct {
	ctrl     *gomock.Controller
	recorder *MockContractStakingIndexerMockRecorder
	isgomock struct{}
}

// MockContractStakingIndexerMockRecorder is the mock recorder for MockContractStakingIndexer.
type MockContractStakingIndexerMockRecorder struct {
	mock *MockContractStakingIndexer
}

// NewMockContractStakingIndexer creates a new mock instance.
func NewMockContractStakingIndexer(ctrl *gomock.Controller) *MockContractStakingIndexer {
	mock := &MockContractStakingIndexer{ctrl: ctrl}
	mock.recorder = &MockContractStakingIndexerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContractStakingIndexer) EXPECT() *MockContractStakingIndexerMockRecorder {
	return m.recorder
}

// Buckets mocks base method.
func (m *MockContractStakingIndexer) Buckets(height uint64) ([]*VoteBucket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Buckets", height)
	ret0, _ := ret[0].([]*VoteBucket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Buckets indicates an expected call of Buckets.
func (mr *MockContractStakingIndexerMockRecorder) Buckets(height any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Buckets", reflect.TypeOf((*MockContractStakingIndexer)(nil).Buckets), height)
}

// BucketsByCandidate mocks base method.
func (m *MockContractStakingIndexer) BucketsByCandidate(ownerAddr address.Address, height uint64) ([]*VoteBucket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BucketsByCandidate", ownerAddr, height)
	ret0, _ := ret[0].([]*VoteBucket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BucketsByCandidate indicates an expected call of BucketsByCandidate.
func (mr *MockContractStakingIndexerMockRecorder) BucketsByCandidate(ownerAddr, height any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BucketsByCandidate", reflect.TypeOf((*MockContractStakingIndexer)(nil).BucketsByCandidate), ownerAddr, height)
}

// BucketsByIndices mocks base method.
func (m *MockContractStakingIndexer) BucketsByIndices(arg0 []uint64, arg1 uint64) ([]*VoteBucket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BucketsByIndices", arg0, arg1)
	ret0, _ := ret[0].([]*VoteBucket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BucketsByIndices indicates an expected call of BucketsByIndices.
func (mr *MockContractStakingIndexerMockRecorder) BucketsByIndices(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BucketsByIndices", reflect.TypeOf((*MockContractStakingIndexer)(nil).BucketsByIndices), arg0, arg1)
}

// ContractAddress mocks base method.
func (m *MockContractStakingIndexer) ContractAddress() address.Address {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContractAddress")
	ret0, _ := ret[0].(address.Address)
	return ret0
}

// ContractAddress indicates an expected call of ContractAddress.
func (mr *MockContractStakingIndexerMockRecorder) ContractAddress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContractAddress", reflect.TypeOf((*MockContractStakingIndexer)(nil).ContractAddress))
}

// CreateEventProcessor mocks base method.
func (m *MockContractStakingIndexer) CreateEventProcessor(arg0 context.Context, arg1 EventHandler) EventProcessor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEventProcessor", arg0, arg1)
	ret0, _ := ret[0].(EventProcessor)
	return ret0
}

// CreateEventProcessor indicates an expected call of CreateEventProcessor.
func (mr *MockContractStakingIndexerMockRecorder) CreateEventProcessor(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEventProcessor", reflect.TypeOf((*MockContractStakingIndexer)(nil).CreateEventProcessor), arg0, arg1)
}

// CreateMemoryEventHandler mocks base method.
func (m *MockContractStakingIndexer) CreateMemoryEventHandler(arg0 context.Context) CachedEventHandler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMemoryEventHandler", arg0)
	ret0, _ := ret[0].(CachedEventHandler)
	return ret0
}

// CreateMemoryEventHandler indicates an expected call of CreateMemoryEventHandler.
func (mr *MockContractStakingIndexerMockRecorder) CreateMemoryEventHandler(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMemoryEventHandler", reflect.TypeOf((*MockContractStakingIndexer)(nil).CreateMemoryEventHandler), arg0)
}

// Height mocks base method.
func (m *MockContractStakingIndexer) Height() (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Height")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Height indicates an expected call of Height.
func (mr *MockContractStakingIndexerMockRecorder) Height() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Height", reflect.TypeOf((*MockContractStakingIndexer)(nil).Height))
}

// LoadStakeView mocks base method.
func (m *MockContractStakingIndexer) LoadStakeView(arg0 context.Context, arg1 protocol.StateReader) (ContractStakeView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadStakeView", arg0, arg1)
	ret0, _ := ret[0].(ContractStakeView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadStakeView indicates an expected call of LoadStakeView.
func (mr *MockContractStakingIndexerMockRecorder) LoadStakeView(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadStakeView", reflect.TypeOf((*MockContractStakingIndexer)(nil).LoadStakeView), arg0, arg1)
}

// TotalBucketCount mocks base method.
func (m *MockContractStakingIndexer) TotalBucketCount(height uint64) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TotalBucketCount", height)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TotalBucketCount indicates an expected call of TotalBucketCount.
func (mr *MockContractStakingIndexerMockRecorder) TotalBucketCount(height any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TotalBucketCount", reflect.TypeOf((*MockContractStakingIndexer)(nil).TotalBucketCount), height)
}

// MockContractStakingIndexerWithBucketType is a mock of ContractStakingIndexerWithBucketType interface.
type MockContractStakingIndexerWithBucketType struct {
	ctrl     *gomock.Controller
	recorder *MockContractStakingIndexerWithBucketTypeMockRecorder
	isgomock struct{}
}

// MockContractStakingIndexerWithBucketTypeMockRecorder is the mock recorder for MockContractStakingIndexerWithBucketType.
type MockContractStakingIndexerWithBucketTypeMockRecorder struct {
	mock *MockContractStakingIndexerWithBucketType
}

// NewMockContractStakingIndexerWithBucketType creates a new mock instance.
func NewMockContractStakingIndexerWithBucketType(ctrl *gomock.Controller) *MockContractStakingIndexerWithBucketType {
	mock := &MockContractStakingIndexerWithBucketType{ctrl: ctrl}
	mock.recorder = &MockContractStakingIndexerWithBucketTypeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContractStakingIndexerWithBucketType) EXPECT() *MockContractStakingIndexerWithBucketTypeMockRecorder {
	return m.recorder
}

// BucketTypes mocks base method.
func (m *MockContractStakingIndexerWithBucketType) BucketTypes(height uint64) ([]*ContractStakingBucketType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BucketTypes", height)
	ret0, _ := ret[0].([]*ContractStakingBucketType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BucketTypes indicates an expected call of BucketTypes.
func (mr *MockContractStakingIndexerWithBucketTypeMockRecorder) BucketTypes(height any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BucketTypes", reflect.TypeOf((*MockContractStakingIndexerWithBucketType)(nil).BucketTypes), height)
}

// Buckets mocks base method.
func (m *MockContractStakingIndexerWithBucketType) Buckets(height uint64) ([]*VoteBucket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Buckets", height)
	ret0, _ := ret[0].([]*VoteBucket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Buckets indicates an expected call of Buckets.
func (mr *MockContractStakingIndexerWithBucketTypeMockRecorder) Buckets(height any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Buckets", reflect.TypeOf((*MockContractStakingIndexerWithBucketType)(nil).Buckets), height)
}

// BucketsByCandidate mocks base method.
func (m *MockContractStakingIndexerWithBucketType) BucketsByCandidate(ownerAddr address.Address, height uint64) ([]*VoteBucket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BucketsByCandidate", ownerAddr, height)
	ret0, _ := ret[0].([]*VoteBucket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BucketsByCandidate indicates an expected call of BucketsByCandidate.
func (mr *MockContractStakingIndexerWithBucketTypeMockRecorder) BucketsByCandidate(ownerAddr, height any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BucketsByCandidate", reflect.TypeOf((*MockContractStakingIndexerWithBucketType)(nil).BucketsByCandidate), ownerAddr, height)
}

// BucketsByIndices mocks base method.
func (m *MockContractStakingIndexerWithBucketType) BucketsByIndices(arg0 []uint64, arg1 uint64) ([]*VoteBucket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BucketsByIndices", arg0, arg1)
	ret0, _ := ret[0].([]*VoteBucket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BucketsByIndices indicates an expected call of BucketsByIndices.
func (mr *MockContractStakingIndexerWithBucketTypeMockRecorder) BucketsByIndices(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BucketsByIndices", reflect.TypeOf((*MockContractStakingIndexerWithBucketType)(nil).BucketsByIndices), arg0, arg1)
}

// ContractAddress mocks base method.
func (m *MockContractStakingIndexerWithBucketType) ContractAddress() address.Address {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContractAddress")
	ret0, _ := ret[0].(address.Address)
	return ret0
}

// ContractAddress indicates an expected call of ContractAddress.
func (mr *MockContractStakingIndexerWithBucketTypeMockRecorder) ContractAddress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContractAddress", reflect.TypeOf((*MockContractStakingIndexerWithBucketType)(nil).ContractAddress))
}

// CreateEventProcessor mocks base method.
func (m *MockContractStakingIndexerWithBucketType) CreateEventProcessor(arg0 context.Context, arg1 EventHandler) EventProcessor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEventProcessor", arg0, arg1)
	ret0, _ := ret[0].(EventProcessor)
	return ret0
}

// CreateEventProcessor indicates an expected call of CreateEventProcessor.
func (mr *MockContractStakingIndexerWithBucketTypeMockRecorder) CreateEventProcessor(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEventProcessor", reflect.TypeOf((*MockContractStakingIndexerWithBucketType)(nil).CreateEventProcessor), arg0, arg1)
}

// CreateMemoryEventHandler mocks base method.
func (m *MockContractStakingIndexerWithBucketType) CreateMemoryEventHandler(arg0 context.Context) CachedEventHandler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMemoryEventHandler", arg0)
	ret0, _ := ret[0].(CachedEventHandler)
	return ret0
}

// CreateMemoryEventHandler indicates an expected call of CreateMemoryEventHandler.
func (mr *MockContractStakingIndexerWithBucketTypeMockRecorder) CreateMemoryEventHandler(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMemoryEventHandler", reflect.TypeOf((*MockContractStakingIndexerWithBucketType)(nil).CreateMemoryEventHandler), arg0)
}

// Height mocks base method.
func (m *MockContractStakingIndexerWithBucketType) Height() (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Height")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Height indicates an expected call of Height.
func (mr *MockContractStakingIndexerWithBucketTypeMockRecorder) Height() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Height", reflect.TypeOf((*MockContractStakingIndexerWithBucketType)(nil).Height))
}

// LoadStakeView mocks base method.
func (m *MockContractStakingIndexerWithBucketType) LoadStakeView(arg0 context.Context, arg1 protocol.StateReader) (ContractStakeView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadStakeView", arg0, arg1)
	ret0, _ := ret[0].(ContractStakeView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadStakeView indicates an expected call of LoadStakeView.
func (mr *MockContractStakingIndexerWithBucketTypeMockRecorder) LoadStakeView(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadStakeView", reflect.TypeOf((*MockContractStakingIndexerWithBucketType)(nil).LoadStakeView), arg0, arg1)
}

// TotalBucketCount mocks base method.
func (m *MockContractStakingIndexerWithBucketType) TotalBucketCount(height uint64) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TotalBucketCount", height)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TotalBucketCount indicates an expected call of TotalBucketCount.
func (mr *MockContractStakingIndexerWithBucketTypeMockRecorder) TotalBucketCount(height any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TotalBucketCount", reflect.TypeOf((*MockContractStakingIndexerWithBucketType)(nil).TotalBucketCount), height)
}
