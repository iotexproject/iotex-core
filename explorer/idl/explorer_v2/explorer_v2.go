// Code generated by idl2go from JSON generated by Barrister v0.1.6
package explorer_v2

import (
	"fmt"
	"github.com/coopernurse/barrister-go"
	"reflect"
)

const BarristerVersion string = "0.1.6"
const BarristerChecksum string = "9855364af7fbf287959b816dca50b477"
const BarristerDateGenerated int64 = 1549330679921000000

type CoinStatistic struct {
	Height     int64  `json:"height"`
	Supply     string `json:"supply"`
	NumActions int64  `json:"numActions"`
	Aps        int64  `json:"aps"`
}

type BlockGenerator struct {
	Name    string `json:"name"`
	Address string `json:"address"`
}

type BlockView struct {
	ID               string         `json:"ID"`
	Height           int64          `json:"height"`
	Timestamp        int64          `json:"timestamp"`
	NumActions       int64          `json:"numActions"`
	GenerateBy       BlockGenerator `json:"generateBy"`
	Amount           string         `json:"amount"`
	Size             int64          `json:"size"`
	TxRoot           string         `json:"txRoot"`
	DeltaStateDigest string         `json:"deltaStateDigest"`
}

type Log struct {
	Address     string   `json:"address"`
	Topics      []string `json:"topics"`
	Data        string   `json:"data"`
	BlockNumber int64    `json:"blockNumber"`
	TxnHash     string   `json:"txnHash"`
	BlockHash   string   `json:"blockHash"`
	Index       int64    `json:"index"`
}

type Receipt struct {
	Status          int64  `json:"status"`
	Hash            string `json:"hash"`
	GasConsumed     int64  `json:"gasConsumed"`
	ContractAddress string `json:"contractAddress"`
	Logs            []Log  `json:"logs"`
}

type AddressDetails struct {
	Address      string `json:"address"`
	TotalBalance string `json:"totalBalance"`
	Nonce        int64  `json:"nonce"`
	PendingNonce int64  `json:"pendingNonce"`
}

type ConsensusMetrics struct {
	LatestEpoch         int64    `json:"latestEpoch"`
	LatestDelegates     []string `json:"latestDelegates"`
	LatestBlockProducer string   `json:"latestBlockProducer"`
}

type SendActionRequest struct {
	Payload string `json:"payload"`
}

type SendActionResponse struct {
	Payload string `json:"payload"`
}

type Node struct {
	Address string `json:"address"`
}

type GetPeersResponse struct {
	Self  Node   `json:"Self"`
	Peers []Node `json:"Peers"`
}

type Deposit struct {
	Amount    string `json:"amount"`
	Address   string `json:"address"`
	Confirmed bool   `json:"confirmed"`
}

type Explorer interface {
	GetBlockchainHeight() (int64, error)
	GetAddressDetails(address string) (AddressDetails, error)
	GetLastActionsByRange(startBlockHeight int64, offset int64, limit int64) ([]string, error)
	GetActionByID(actionID string) (string, error)
	GetActionsByAddress(address string, offset int64, limit int64) ([]string, error)
	GetUnconfirmedActionsByAddress(address string, offset int64, limit int64) ([]string, error)
	GetActionsByBlockID(blkID string, offset int64, limit int64) ([]string, error)
	GetLastBlocksByRange(offset int64, limit int64) ([]BlockView, error)
	GetBlockByID(blkID string) (BlockView, error)
	GetCoinStatistic() (CoinStatistic, error)
	GetConsensusMetrics() (ConsensusMetrics, error)
	SendAction(request SendActionRequest) (SendActionResponse, error)
	GetPeers() (GetPeersResponse, error)
	GetReceiptByActionID(id string) (Receipt, error)
	ReadExecutionState(payload string) (string, error)
	GetDeposits(subChainID int64, offset int64, limit int64) ([]Deposit, error)
	SuggestGasPrice() (int64, error)
	EstimateGasForAction(payload string) (int64, error)
}

func NewExplorerProxy(c barrister.Client) Explorer {
	return ExplorerProxy{c, barrister.MustParseIdlJson([]byte(IdlJsonRaw))}
}

type ExplorerProxy struct {
	client barrister.Client
	idl    *barrister.Idl
}

func (_p ExplorerProxy) GetBlockchainHeight() (int64, error) {
	_res, _err := _p.client.Call("Explorer.getBlockchainHeight")
	if _err == nil {
		_retType := _p.idl.Method("Explorer.getBlockchainHeight").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf(int64(0)), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.(int64)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("Explorer.getBlockchainHeight returned invalid type: %v", _t)
			return int64(0), &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return int64(0), _err
}

func (_p ExplorerProxy) GetAddressDetails(address string) (AddressDetails, error) {
	_res, _err := _p.client.Call("Explorer.getAddressDetails", address)
	if _err == nil {
		_retType := _p.idl.Method("Explorer.getAddressDetails").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf(AddressDetails{}), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.(AddressDetails)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("Explorer.getAddressDetails returned invalid type: %v", _t)
			return AddressDetails{}, &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return AddressDetails{}, _err
}

func (_p ExplorerProxy) GetLastActionsByRange(startBlockHeight int64, offset int64, limit int64) ([]string, error) {
	_res, _err := _p.client.Call("Explorer.getLastActionsByRange", startBlockHeight, offset, limit)
	if _err == nil {
		_retType := _p.idl.Method("Explorer.getLastActionsByRange").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf([]string{}), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.([]string)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("Explorer.getLastActionsByRange returned invalid type: %v", _t)
			return []string{}, &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return []string{}, _err
}

func (_p ExplorerProxy) GetActionByID(actionID string) (string, error) {
	_res, _err := _p.client.Call("Explorer.getActionByID", actionID)
	if _err == nil {
		_retType := _p.idl.Method("Explorer.getActionByID").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf(""), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.(string)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("Explorer.getActionByID returned invalid type: %v", _t)
			return "", &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return "", _err
}

func (_p ExplorerProxy) GetActionsByAddress(address string, offset int64, limit int64) ([]string, error) {
	_res, _err := _p.client.Call("Explorer.getActionsByAddress", address, offset, limit)
	if _err == nil {
		_retType := _p.idl.Method("Explorer.getActionsByAddress").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf([]string{}), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.([]string)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("Explorer.getActionsByAddress returned invalid type: %v", _t)
			return []string{}, &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return []string{}, _err
}

func (_p ExplorerProxy) GetUnconfirmedActionsByAddress(address string, offset int64, limit int64) ([]string, error) {
	_res, _err := _p.client.Call("Explorer.getUnconfirmedActionsByAddress", address, offset, limit)
	if _err == nil {
		_retType := _p.idl.Method("Explorer.getUnconfirmedActionsByAddress").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf([]string{}), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.([]string)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("Explorer.getUnconfirmedActionsByAddress returned invalid type: %v", _t)
			return []string{}, &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return []string{}, _err
}

func (_p ExplorerProxy) GetActionsByBlockID(blkID string, offset int64, limit int64) ([]string, error) {
	_res, _err := _p.client.Call("Explorer.getActionsByBlockID", blkID, offset, limit)
	if _err == nil {
		_retType := _p.idl.Method("Explorer.getActionsByBlockID").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf([]string{}), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.([]string)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("Explorer.getActionsByBlockID returned invalid type: %v", _t)
			return []string{}, &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return []string{}, _err
}

func (_p ExplorerProxy) GetLastBlocksByRange(offset int64, limit int64) ([]BlockView, error) {
	_res, _err := _p.client.Call("Explorer.getLastBlocksByRange", offset, limit)
	if _err == nil {
		_retType := _p.idl.Method("Explorer.getLastBlocksByRange").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf([]BlockView{}), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.([]BlockView)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("Explorer.getLastBlocksByRange returned invalid type: %v", _t)
			return []BlockView{}, &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return []BlockView{}, _err
}

func (_p ExplorerProxy) GetBlockByID(blkID string) (BlockView, error) {
	_res, _err := _p.client.Call("Explorer.getBlockByID", blkID)
	if _err == nil {
		_retType := _p.idl.Method("Explorer.getBlockByID").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf(BlockView{}), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.(BlockView)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("Explorer.getBlockByID returned invalid type: %v", _t)
			return BlockView{}, &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return BlockView{}, _err
}

func (_p ExplorerProxy) GetCoinStatistic() (CoinStatistic, error) {
	_res, _err := _p.client.Call("Explorer.getCoinStatistic")
	if _err == nil {
		_retType := _p.idl.Method("Explorer.getCoinStatistic").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf(CoinStatistic{}), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.(CoinStatistic)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("Explorer.getCoinStatistic returned invalid type: %v", _t)
			return CoinStatistic{}, &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return CoinStatistic{}, _err
}

func (_p ExplorerProxy) GetConsensusMetrics() (ConsensusMetrics, error) {
	_res, _err := _p.client.Call("Explorer.getConsensusMetrics")
	if _err == nil {
		_retType := _p.idl.Method("Explorer.getConsensusMetrics").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf(ConsensusMetrics{}), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.(ConsensusMetrics)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("Explorer.getConsensusMetrics returned invalid type: %v", _t)
			return ConsensusMetrics{}, &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return ConsensusMetrics{}, _err
}

func (_p ExplorerProxy) SendAction(request SendActionRequest) (SendActionResponse, error) {
	_res, _err := _p.client.Call("Explorer.sendAction", request)
	if _err == nil {
		_retType := _p.idl.Method("Explorer.sendAction").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf(SendActionResponse{}), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.(SendActionResponse)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("Explorer.sendAction returned invalid type: %v", _t)
			return SendActionResponse{}, &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return SendActionResponse{}, _err
}

func (_p ExplorerProxy) GetPeers() (GetPeersResponse, error) {
	_res, _err := _p.client.Call("Explorer.getPeers")
	if _err == nil {
		_retType := _p.idl.Method("Explorer.getPeers").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf(GetPeersResponse{}), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.(GetPeersResponse)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("Explorer.getPeers returned invalid type: %v", _t)
			return GetPeersResponse{}, &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return GetPeersResponse{}, _err
}

func (_p ExplorerProxy) GetReceiptByActionID(id string) (Receipt, error) {
	_res, _err := _p.client.Call("Explorer.getReceiptByActionID", id)
	if _err == nil {
		_retType := _p.idl.Method("Explorer.getReceiptByActionID").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf(Receipt{}), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.(Receipt)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("Explorer.getReceiptByActionID returned invalid type: %v", _t)
			return Receipt{}, &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return Receipt{}, _err
}

func (_p ExplorerProxy) ReadExecutionState(payload string) (string, error) {
	_res, _err := _p.client.Call("Explorer.readExecutionState", payload)
	if _err == nil {
		_retType := _p.idl.Method("Explorer.readExecutionState").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf(""), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.(string)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("Explorer.readExecutionState returned invalid type: %v", _t)
			return "", &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return "", _err
}

func (_p ExplorerProxy) GetDeposits(subChainID int64, offset int64, limit int64) ([]Deposit, error) {
	_res, _err := _p.client.Call("Explorer.getDeposits", subChainID, offset, limit)
	if _err == nil {
		_retType := _p.idl.Method("Explorer.getDeposits").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf([]Deposit{}), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.([]Deposit)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("Explorer.getDeposits returned invalid type: %v", _t)
			return []Deposit{}, &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return []Deposit{}, _err
}

func (_p ExplorerProxy) SuggestGasPrice() (int64, error) {
	_res, _err := _p.client.Call("Explorer.suggestGasPrice")
	if _err == nil {
		_retType := _p.idl.Method("Explorer.suggestGasPrice").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf(int64(0)), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.(int64)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("Explorer.suggestGasPrice returned invalid type: %v", _t)
			return int64(0), &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return int64(0), _err
}

func (_p ExplorerProxy) EstimateGasForAction(payload string) (int64, error) {
	_res, _err := _p.client.Call("Explorer.estimateGasForAction", payload)
	if _err == nil {
		_retType := _p.idl.Method("Explorer.estimateGasForAction").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf(int64(0)), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.(int64)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("Explorer.estimateGasForAction returned invalid type: %v", _t)
			return int64(0), &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return int64(0), _err
}

func NewJSONServer(idl *barrister.Idl, forceASCII bool, explorer Explorer) barrister.Server {
	return NewServer(idl, &barrister.JsonSerializer{forceASCII}, explorer)
}

func NewServer(idl *barrister.Idl, ser barrister.Serializer, explorer Explorer) barrister.Server {
	_svr := barrister.NewServer(idl, ser)
	_svr.AddHandler("Explorer", explorer)
	return _svr
}

var IdlJsonRaw = `[
    {
        "type": "comment",
        "name": "",
        "comment": "",
        "value": "Copyright (c) 2019 IoTeX\nThis is an alpha (internal) release and is not suitable for production. This source code is provided 'as is' and no\nwarranties are given as to title or non-infringement, merchantability or fitness for purpose and, to the extent\npermitted by law, all liability for your use of the code is disclaimed. This source code is governed by Apache\nLicense 2.0 that can be found in the LICENSE file.",
        "extends": "",
        "fields": null,
        "values": null,
        "functions": null,
        "barrister_version": "",
        "date_generated": 0,
        "checksum": ""
    },
    {
        "type": "comment",
        "name": "",
        "comment": "",
        "value": "To compile this file:\n1. Install the barrister translator (IDL -\u003e JSON)\nyou need to be root (or use sudo)\npip install barrister",
        "extends": "",
        "fields": null,
        "values": null,
        "functions": null,
        "barrister_version": "",
        "date_generated": 0,
        "checksum": ""
    },
    {
        "type": "comment",
        "name": "",
        "comment": "",
        "value": "2. Install barrister-go\ngo get github.com/coopernurse/barrister-go\ngo install github.com/coopernurse/barrister-go/idl2go",
        "extends": "",
        "fields": null,
        "values": null,
        "functions": null,
        "barrister_version": "",
        "date_generated": 0,
        "checksum": ""
    },
    {
        "type": "comment",
        "name": "",
        "comment": "",
        "value": "3. barrister explorer.idl | $GOPATH/bin/idl2go -i -p explorer",
        "extends": "",
        "fields": null,
        "values": null,
        "functions": null,
        "barrister_version": "",
        "date_generated": 0,
        "checksum": ""
    },
    {
        "type": "struct",
        "name": "CoinStatistic",
        "comment": "",
        "value": "",
        "extends": "",
        "fields": [
            {
                "name": "height",
                "type": "int",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "supply",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "numActions",
                "type": "int",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "aps",
                "type": "int",
                "optional": false,
                "is_array": false,
                "comment": ""
            }
        ],
        "values": null,
        "functions": null,
        "barrister_version": "",
        "date_generated": 0,
        "checksum": ""
    },
    {
        "type": "struct",
        "name": "BlockGenerator",
        "comment": "",
        "value": "",
        "extends": "",
        "fields": [
            {
                "name": "name",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "address",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": ""
            }
        ],
        "values": null,
        "functions": null,
        "barrister_version": "",
        "date_generated": 0,
        "checksum": ""
    },
    {
        "type": "struct",
        "name": "BlockView",
        "comment": "",
        "value": "",
        "extends": "",
        "fields": [
            {
                "name": "ID",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "height",
                "type": "int",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "timestamp",
                "type": "int",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "numActions",
                "type": "int",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "generateBy",
                "type": "BlockGenerator",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "amount",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "size",
                "type": "int",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "txRoot",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "deltaStateDigest",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": ""
            }
        ],
        "values": null,
        "functions": null,
        "barrister_version": "",
        "date_generated": 0,
        "checksum": ""
    },
    {
        "type": "struct",
        "name": "Log",
        "comment": "",
        "value": "",
        "extends": "",
        "fields": [
            {
                "name": "address",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "topics",
                "type": "string",
                "optional": false,
                "is_array": true,
                "comment": ""
            },
            {
                "name": "data",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "blockNumber",
                "type": "int",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "txnHash",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "blockHash",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "index",
                "type": "int",
                "optional": false,
                "is_array": false,
                "comment": ""
            }
        ],
        "values": null,
        "functions": null,
        "barrister_version": "",
        "date_generated": 0,
        "checksum": ""
    },
    {
        "type": "struct",
        "name": "Receipt",
        "comment": "",
        "value": "",
        "extends": "",
        "fields": [
            {
                "name": "status",
                "type": "int",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "hash",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "gasConsumed",
                "type": "int",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "contractAddress",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "logs",
                "type": "Log",
                "optional": false,
                "is_array": true,
                "comment": ""
            }
        ],
        "values": null,
        "functions": null,
        "barrister_version": "",
        "date_generated": 0,
        "checksum": ""
    },
    {
        "type": "struct",
        "name": "AddressDetails",
        "comment": "",
        "value": "",
        "extends": "",
        "fields": [
            {
                "name": "address",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "totalBalance",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "nonce",
                "type": "int",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "pendingNonce",
                "type": "int",
                "optional": false,
                "is_array": false,
                "comment": ""
            }
        ],
        "values": null,
        "functions": null,
        "barrister_version": "",
        "date_generated": 0,
        "checksum": ""
    },
    {
        "type": "struct",
        "name": "ConsensusMetrics",
        "comment": "",
        "value": "",
        "extends": "",
        "fields": [
            {
                "name": "latestEpoch",
                "type": "int",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "latestDelegates",
                "type": "string",
                "optional": false,
                "is_array": true,
                "comment": ""
            },
            {
                "name": "latestBlockProducer",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": ""
            }
        ],
        "values": null,
        "functions": null,
        "barrister_version": "",
        "date_generated": 0,
        "checksum": ""
    },
    {
        "type": "struct",
        "name": "SendActionRequest",
        "comment": "",
        "value": "",
        "extends": "",
        "fields": [
            {
                "name": "payload",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": ""
            }
        ],
        "values": null,
        "functions": null,
        "barrister_version": "",
        "date_generated": 0,
        "checksum": ""
    },
    {
        "type": "struct",
        "name": "SendActionResponse",
        "comment": "",
        "value": "",
        "extends": "",
        "fields": [
            {
                "name": "payload",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": ""
            }
        ],
        "values": null,
        "functions": null,
        "barrister_version": "",
        "date_generated": 0,
        "checksum": ""
    },
    {
        "type": "struct",
        "name": "Node",
        "comment": "",
        "value": "",
        "extends": "",
        "fields": [
            {
                "name": "address",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": ""
            }
        ],
        "values": null,
        "functions": null,
        "barrister_version": "",
        "date_generated": 0,
        "checksum": ""
    },
    {
        "type": "struct",
        "name": "GetPeersResponse",
        "comment": "",
        "value": "",
        "extends": "",
        "fields": [
            {
                "name": "Self",
                "type": "Node",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "Peers",
                "type": "Node",
                "optional": false,
                "is_array": true,
                "comment": ""
            }
        ],
        "values": null,
        "functions": null,
        "barrister_version": "",
        "date_generated": 0,
        "checksum": ""
    },
    {
        "type": "struct",
        "name": "Deposit",
        "comment": "",
        "value": "",
        "extends": "",
        "fields": [
            {
                "name": "amount",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "address",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "confirmed",
                "type": "bool",
                "optional": false,
                "is_array": false,
                "comment": ""
            }
        ],
        "values": null,
        "functions": null,
        "barrister_version": "",
        "date_generated": 0,
        "checksum": ""
    },
    {
        "type": "interface",
        "name": "Explorer",
        "comment": "",
        "value": "",
        "extends": "",
        "fields": null,
        "values": null,
        "functions": [
            {
                "name": "getBlockchainHeight",
                "comment": "get the blockchain tip height",
                "params": [],
                "returns": {
                    "name": "",
                    "type": "int",
                    "optional": false,
                    "is_array": false,
                    "comment": ""
                }
            },
            {
                "name": "getAddressDetails",
                "comment": "get the address detail of an address",
                "params": [
                    {
                        "name": "address",
                        "type": "string",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    }
                ],
                "returns": {
                    "name": "",
                    "type": "AddressDetails",
                    "optional": false,
                    "is_array": false,
                    "comment": ""
                }
            },
            {
                "name": "getLastActionsByRange",
                "comment": "get list of actions by start block height, action offset and limit",
                "params": [
                    {
                        "name": "startBlockHeight",
                        "type": "int",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    },
                    {
                        "name": "offset",
                        "type": "int",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    },
                    {
                        "name": "limit",
                        "type": "int",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    }
                ],
                "returns": {
                    "name": "",
                    "type": "string",
                    "optional": false,
                    "is_array": true,
                    "comment": ""
                }
            },
            {
                "name": "getActionByID",
                "comment": "get action from action id",
                "params": [
                    {
                        "name": "actionID",
                        "type": "string",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    }
                ],
                "returns": {
                    "name": "",
                    "type": "string",
                    "optional": false,
                    "is_array": false,
                    "comment": ""
                }
            },
            {
                "name": "getActionsByAddress",
                "comment": "get list of actions belonging to an address",
                "params": [
                    {
                        "name": "address",
                        "type": "string",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    },
                    {
                        "name": "offset",
                        "type": "int",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    },
                    {
                        "name": "limit",
                        "type": "int",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    }
                ],
                "returns": {
                    "name": "",
                    "type": "string",
                    "optional": false,
                    "is_array": true,
                    "comment": ""
                }
            },
            {
                "name": "getUnconfirmedActionsByAddress",
                "comment": "get list of unconfirmed actions in actpool belonging to an address",
                "params": [
                    {
                        "name": "address",
                        "type": "string",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    },
                    {
                        "name": "offset",
                        "type": "int",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    },
                    {
                        "name": "limit",
                        "type": "int",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    }
                ],
                "returns": {
                    "name": "",
                    "type": "string",
                    "optional": false,
                    "is_array": true,
                    "comment": ""
                }
            },
            {
                "name": "getActionsByBlockID",
                "comment": "get all actions in a block",
                "params": [
                    {
                        "name": "blkID",
                        "type": "string",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    },
                    {
                        "name": "offset",
                        "type": "int",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    },
                    {
                        "name": "limit",
                        "type": "int",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    }
                ],
                "returns": {
                    "name": "",
                    "type": "string",
                    "optional": false,
                    "is_array": true,
                    "comment": ""
                }
            },
            {
                "name": "getLastBlocksByRange",
                "comment": "get list of blocks by block id offset and limit",
                "params": [
                    {
                        "name": "offset",
                        "type": "int",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    },
                    {
                        "name": "limit",
                        "type": "int",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    }
                ],
                "returns": {
                    "name": "",
                    "type": "BlockView",
                    "optional": false,
                    "is_array": true,
                    "comment": ""
                }
            },
            {
                "name": "getBlockByID",
                "comment": "get block by block id",
                "params": [
                    {
                        "name": "blkID",
                        "type": "string",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    }
                ],
                "returns": {
                    "name": "",
                    "type": "BlockView",
                    "optional": false,
                    "is_array": false,
                    "comment": ""
                }
            },
            {
                "name": "getCoinStatistic",
                "comment": "get statistic of iotx",
                "params": [],
                "returns": {
                    "name": "",
                    "type": "CoinStatistic",
                    "optional": false,
                    "is_array": false,
                    "comment": ""
                }
            },
            {
                "name": "getConsensusMetrics",
                "comment": "get consensus metrics",
                "params": [],
                "returns": {
                    "name": "",
                    "type": "ConsensusMetrics",
                    "optional": false,
                    "is_array": false,
                    "comment": ""
                }
            },
            {
                "name": "sendAction",
                "comment": "sendAction",
                "params": [
                    {
                        "name": "request",
                        "type": "SendActionRequest",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    }
                ],
                "returns": {
                    "name": "",
                    "type": "SendActionResponse",
                    "optional": false,
                    "is_array": false,
                    "comment": ""
                }
            },
            {
                "name": "getPeers",
                "comment": "get list of peers",
                "params": [],
                "returns": {
                    "name": "",
                    "type": "GetPeersResponse",
                    "optional": false,
                    "is_array": false,
                    "comment": ""
                }
            },
            {
                "name": "getReceiptByActionID",
                "comment": "get receipt by action id",
                "params": [
                    {
                        "name": "id",
                        "type": "string",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    }
                ],
                "returns": {
                    "name": "",
                    "type": "Receipt",
                    "optional": false,
                    "is_array": false,
                    "comment": ""
                }
            },
            {
                "name": "readExecutionState",
                "comment": "read execution state",
                "params": [
                    {
                        "name": "payload",
                        "type": "string",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    }
                ],
                "returns": {
                    "name": "",
                    "type": "string",
                    "optional": false,
                    "is_array": false,
                    "comment": ""
                }
            },
            {
                "name": "getDeposits",
                "comment": "get deposits on a sub-chain",
                "params": [
                    {
                        "name": "subChainID",
                        "type": "int",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    },
                    {
                        "name": "offset",
                        "type": "int",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    },
                    {
                        "name": "limit",
                        "type": "int",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    }
                ],
                "returns": {
                    "name": "",
                    "type": "Deposit",
                    "optional": false,
                    "is_array": true,
                    "comment": ""
                }
            },
            {
                "name": "suggestGasPrice",
                "comment": "suggest gas price",
                "params": [],
                "returns": {
                    "name": "",
                    "type": "int",
                    "optional": false,
                    "is_array": false,
                    "comment": ""
                }
            },
            {
                "name": "estimateGasForAction",
                "comment": "estimate gas for action",
                "params": [
                    {
                        "name": "payload",
                        "type": "string",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    }
                ],
                "returns": {
                    "name": "",
                    "type": "int",
                    "optional": false,
                    "is_array": false,
                    "comment": ""
                }
            }
        ],
        "barrister_version": "",
        "date_generated": 0,
        "checksum": ""
    },
    {
        "type": "meta",
        "name": "",
        "comment": "",
        "value": "",
        "extends": "",
        "fields": null,
        "values": null,
        "functions": null,
        "barrister_version": "0.1.6",
        "date_generated": 1549330679921,
        "checksum": "9855364af7fbf287959b816dca50b477"
    }
]`
