// Copyright (c) 2018 IoTeX
// This is an alpha (internal) release and is not suitable for production. This source code is provided 'as is' and no
// warranties are given as to title or non-infringement, merchantability or fitness for purpose and, to the extent
// permitted by law, all liability for your use of the code is disclaimed. This source code is governed by Apache
// License 2.0 that can be found in the LICENSE file.

// To compile this file:
// 1. Install the barrister translator (IDL -> JSON)
// you need to be root (or use sudo)
// pip install barrister

// 2. Install barrister-go
// go get github.com/coopernurse/barrister-go
// go install github.com/coopernurse/barrister-go/idl2go

// 3. barrister explorer.idl | $GOPATH/bin/idl2go -i -p explorer

struct CoinStatistic {
    height int
    supply int
    transfers int
    votes int
    aps int
}

struct BlockGenerator {
    name string
    address string
}

struct Block {
    ID string
    height int
    timestamp int
    transfers int
    votes int
    generateBy BlockGenerator
    amount int
    forged int
    size int
}

struct Transfer {
    version int
    ID string
    nonce int
    sender string
    recipient string
    amount int
    senderPubKey string
    signature string
    payload string
    isCoinbase bool
    fee int
    timestamp int
    blockID string
}

struct Vote {
    version int
    ID string
    nonce int
    timestamp int
    voter string
    votee string
    voterPubKey string
    voteePubKey string
    signature string
    blockID string
}

struct AddressDetails {
    address string
    totalBalance int
    nonce int
    pendingNonce int
    isCandidate bool
}

struct Candidate {
    address string
    totalVote int
    creationHeight int
    lastUpdateHeight int
    isDelegate bool
    isProducer bool
}

struct CandidateMetrics {
    candidates []Candidate
}

struct ConsensusMetrics {
    latestEpoch int
    latestDelegates []string
    latestBlockProducer string
	candidates []string
}

struct SendTransferRequest {
    serlializedTransfer string
}

struct SendTransferResponse {
    transferSent bool
}

struct SendVoteRequest {
    serializedVote string
}

struct SendVoteResponse {
    voteSent bool
}

interface Explorer {
    // get the blockchain tip height
    getBlockchainHeight() int

    // get the balance of an address
    getAddressBalance(address string) int

    // get the address detail of an iotex address
    getAddressDetails(address string) AddressDetails

    // get list of transfers by start block height, transfer offset and limit
    getLastTransfersByRange(startBlockHeight int, offset int, limit int, showCoinBase bool) []Transfer

    // get transfers from transaction id
    getTransferByID(transferID string) Transfer

    // get list of transfers belonging to an address
    getTransfersByAddress(address string, offset int, limit int) []Transfer

    // get list of unconfirmed transfers in actpool belonging to an address
    getUnconfirmedTransfersByAddress(address string, offset int, limit int) []Transfer

    // get all transfers in a block
    getTransfersByBlockID(blkID string, offset int, limit int) []Transfer

    // get list of votes by start block height, vote offset and limit
    getLastVotesByRange(startBlockHeight int, offset int, limit int) []Vote

    // get vote from vote id
    getVoteByID(voteID string) Vote

    // get list of votes belonging to an address
    getVotesByAddress(address string, offset int, limit int) []Vote

    // get list of unconfirmed votes in actpool belonging to an address
    getUnconfirmedVotesByAddress(address string, offset int, limit int) []Vote

    // get all votes in a block
    getVotesByBlockID(blkID string, offset int, limit int) []Vote

    // get list of blocks by block id offset and limit
    getLastBlocksByRange(offset int, limit int) []Block

    // get block by block id
    getBlockByID(blkID string) Block

    // get statistic of iotx
    getCoinStatistic() CoinStatistic

    // get consensus metrics
    getConsensusMetrics() ConsensusMetrics

    // get candidates metrics
    getCandidateMetrics() CandidateMetrics

    // send transfer
    sendTransfer(request SendTransferRequest) SendTransferResponse

    // send vote
    sendVote(request SendVoteRequest) SendVoteResponse
}
