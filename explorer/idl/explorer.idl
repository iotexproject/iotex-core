// Copyright (c) 2018 IoTeX
// This is an alpha (internal) release and is not suitable for production. This source code is provided 'as is' and no
// warranties are given as to title or non-infringement, merchantability or fitness for purpose and, to the extent
// permitted by law, all liability for your use of the code is disclaimed. This source code is governed by Apache
// License 2.0 that can be found in the LICENSE file.

// To compile this file:
// 1. Install the barrister translator (IDL -> JSON)
// you need to be root (or use sudo)
// pip install barrister

// 2. Install barrister-go
// go get github.com/coopernurse/barrister-go
// go install github.com/coopernurse/barrister-go/idl2go

// 3. barrister explorer.idl | $GOPATH/bin/idl2go -i -p explorer

struct CoinStatistic {
    height int
    supply string
    transfers int
    votes int
    executions int
    aps int
}

struct BlockGenerator {
    name string
    address string
}

struct Block {
    ID string
    height int
    timestamp int
    transfers int
    votes int
    executions int
    generateBy BlockGenerator
    amount string
    forged int
    size int
}

struct Transfer {
    version int
    ID string
    nonce int
    sender string
    recipient string
    amount string
    senderPubKey string
    signature string
    payload string
    gasLimit int
    gasPrice string
    isCoinbase bool
    fee string
    timestamp int
    blockID string
    isPending bool
}

struct Execution {
    version int
    ID string
    nonce int
    executor string
    contract string
    amount string
    executorPubKey string
    signature string
    gasLimit int
    gasPrice string
    timestamp int
    data string
    blockID string
    isPending bool
}

struct Log {
    address string
    topics []string
    data string
    blockNumber int
    txnHash string
    blockHash string
    index int
}

struct Receipt {
    returnValue string
    status int
    hash string
    gasConsumed int
    contractAddress string
    logs []Log
}

struct SendExecutionResponse {
    receipt Receipt
}

struct Vote {
    version int
    ID string
    nonce int
    timestamp int
    voter string
    votee string
    voterPubKey string
    gasLimit int
    gasPrice string
    signature string
    blockID string
    isPending bool
}

struct AddressDetails {
    address string
    totalBalance string
    nonce int
    pendingNonce int
    isCandidate bool
}

struct Candidate {
    address string
    pubKey string
    totalVote string
    creationHeight int
    lastUpdateHeight int
    isDelegate bool
    isProducer bool
}

struct CandidateMetrics {
    candidates []Candidate
    latestEpoch int
    latestHeight int
}

struct ConsensusMetrics {
    latestEpoch int
    latestDelegates []string
    latestBlockProducer string
	candidates []string
}

struct SendTransferRequest {
    version int
    nonce int
    sender string
    recipient string
    amount string
    senderPubKey string
    signature string
    payload string
    gasLimit int
    gasPrice string
    isCoinbase bool
}

struct SendTransferResponse {
    hash string
}

struct SendVoteRequest {
    version int
    nonce int
    voter string
    votee string
    voterPubKey string
    gasLimit int
    gasPrice string
    signature string
}

struct SendVoteResponse {
    hash string
}

struct PutSubChainBlockMerkelRoot {
    name string
    value string
}

struct PutSubChainBlockRequest {
    version int
    nonce int
    senderAddress string
    subChainAddress string
    height int
    roots []PutSubChainBlockMerkelRoot
    senderPubKey string
    signature string
    gasLimit int
    gasPrice string
}

struct PutSubChainBlockResponse {
	hash string
}

struct Node {
    address string
}

struct GetPeersResponse {
    Self Node
    Peers []Node
}

struct SendSmartContractResponse {
    hash string
}

struct GetBlkOrActResponse {
    block Block [optional]
    transfer Transfer [optional]
    vote Vote [optional]
    execution Execution [optional]
}

interface Explorer {
    // get the blockchain tip height
    getBlockchainHeight() int

    // get the balance of an address
    getAddressBalance(address string) string

    // get the address detail of an iotex address
    getAddressDetails(address string) AddressDetails

    // get list of transfers by start block height, transfer offset and limit
    getLastTransfersByRange(startBlockHeight int, offset int, limit int, showCoinBase bool) []Transfer

    // get transfers from transaction id
    getTransferByID(transferID string) Transfer

    // get list of transfers belonging to an address
    getTransfersByAddress(address string, offset int, limit int) []Transfer

    // get list of unconfirmed transfers in actpool belonging to an address
    getUnconfirmedTransfersByAddress(address string, offset int, limit int) []Transfer

    // get all transfers in a block
    getTransfersByBlockID(blkID string, offset int, limit int) []Transfer

    // get list of votes by start block height, vote offset and limit
    getLastVotesByRange(startBlockHeight int, offset int, limit int) []Vote

    // get vote from vote id
    getVoteByID(voteID string) Vote

    // get list of votes belonging to an address
    getVotesByAddress(address string, offset int, limit int) []Vote

    // get list of unconfirmed votes in actpool belonging to an address
    getUnconfirmedVotesByAddress(address string, offset int, limit int) []Vote

    // get all votes in a block
    getVotesByBlockID(blkID string, offset int, limit int) []Vote

    // get list of executions by start block height, execution offset and limit
    getLastExecutionsByRange(startBlockHeight int, offset int, limit int) []Execution

    // get execution from execution id
    getExecutionByID(executionID string) Execution

    // get list of executions belonging to an address
    getExecutionsByAddress(address string, offset int, limit int) []Execution

    // get list of unconfirmed executions in actpool belonging to an address
    getUnconfirmedExecutionsByAddress(address string, offset int, limit int) []Execution

    // get all executions in a block
    getExecutionsByBlockID(blkID string, offset int, limit int) []Execution

    // get list of blocks by block id offset and limit
    getLastBlocksByRange(offset int, limit int) []Block

    // get block by block id
    getBlockByID(blkID string) Block

    // get statistic of iotx
    getCoinStatistic() CoinStatistic

    // get consensus metrics
    getConsensusMetrics() ConsensusMetrics

    // get candidates metrics
    getCandidateMetrics() CandidateMetrics

    // get candidates metrics at given height
    getCandidateMetricsByHeight(h int) CandidateMetrics

    // send transfer
    sendTransfer(request SendTransferRequest) SendTransferResponse

    // send vote
    sendVote(request SendVoteRequest) SendVoteResponse

    // sendSmartContract
    sendSmartContract(request Execution) SendSmartContractResponse

    // putSubChainBlock
    putSubChainBlock(request PutSubChainBlockRequest) PutSubChainBlockResponse

    // get list of peers
    getPeers() GetPeersResponse

    // get receipt by execution id
    getReceiptByExecutionID(id string) Receipt

    // read execution state
    readExecutionState(request Execution) string

    // get block or action by a hash
    getBlockOrActionByHash(hashStr string) GetBlkOrActResponse
}
