// Copyright (c) 2018 IoTeX
// This is an alpha (internal) release and is not suitable for production. This source code is provided 'as is' and no
// warranties are given as to title or non-infringement, merchantability or fitness for purpose and, to the extent
// permitted by law, all liability for your use of the code is disclaimed. This source code is governed by Apache
// License 2.0 that can be found in the LICENSE file.

// To compile this file:
// 1. Install the barrister translator (IDL -> JSON)
// you need to be root (or use sudo)
// pip install barrister

// 2. Install barrister-go
// go get github.com/coopernurse/barrister-go
// go install github.com/coopernurse/barrister-go/idl2go

// 3. barrister web3api.idl | $GOPATH/bin/idl2go -i -p web3api

struct CallArgs {
	from                string
	to                  string
	gas                 int
	gasPrice            int
	value               int
    data                string
}

struct SendTxArgs {
    from                string
	to                  string
	gas                 int
	gasPrice            int
	value               int
	nonce               int
	data                string
	input               string
}

struct Log {
	address             string
	topics              []string
	Data                string
	BlockNumber         int
	TxHash              string
    TxIndex             int
	BlockHash           string
	Index               int
	Removed             bool
}

struct Transfer {
    blockHash           string
    blockNumber         int
    from                string
    gas                 int
    gasPrice            int
    hash                string
    input               string
    nonce               int
    to                  string
    transactionIndex    int
    value               int
    v                   int
    r                   string
    s                   string
}

struct TransactionReceipt {
    blockHash           string
    blockNumber         int
    transactionHash     string
    transactionIndex    int
    from                string
    to                  string
    gasUsed             int
    cumulativeGasUsed   int
    contractAddress     string
    logs                []Log
    logsBloom           string
}

struct Block {
    number              int
    hash                string
    parentHash          string
    nonce               string
    sha3Uncles          string
    logsBloom           string
    transactionsRoot    string
    stateRoot           string
    receiptsRoot        string
    miner               string
    difficulty          int
    totalDifficulty     int
    extraData           string
    size                int
    gasLimit            int
    gasUsed             int
    timestamp           int
    transfers           []Transfer
    uncles              []string
}

interface Web3API {
    // web3ClientVersion returns the current client version
    web3ClientVersion() string

    // web3Sha3 returns Keccak-256 (not the standardized SHA3-256) of the given data
    web3Sha3(input string) string

    // netVersion returns the current net id
    netVersion() string

    // netListening returns whether client is actively listening for network connections
    netListening() bool

    // netPeerCount returns number of peers currently connected to the client
    netPeerCount() int

    // iotxProtocolVersion returns the current iotex protocol version
    iotxProtocolVersion() string

    // iotxSyncing returns an object with data about the sync status or false
    iotxSyncing() string

    // iotxCoinbase returns the client coinbase address
    iotxCoinbase() string

    // iotxMining returns true if client is actively mining new blocks
    iotxMining() string

    // iotxHashRate returns the number of hashes per second that the node is mining with
    iotxHashRate() string

    // iotxGasPrice returns the current price per gas
    iotxGasPrice() int

    // iotxAccounts returns a list of addresses owned by client
    iotxAccounts() []string

    // iotxBlockNumber returns the number of most recent block
    iotxBlockNumber() int

    // iotxGetBalance returns the balance of the account of given address
    // position can be a block number or 'latest', 'earliest' and 'pending'
    iotxGetBalance(address string, blockNumber int) string

    // iotxGetStorageAt returns the value from a storage position at a given address
    iotxGetStorageAt(address string, key int, blockNumber int) string

    // iotxGetTransferCount returns the number of transfers sent from an address
    iotxGetTransferCount(address string, blockNumber int) int

    // iotxGetBlockTransferCountByHash returns the number of transfers in a block from a
    // block matching the given block hash
    iotxGetBlockTransferCountByHash(blockHash string) int

    // iotxGetBlockTransferCountByNumber returns the number of transfers in a block matching
    // the given block number
    iotxGetBlockTransferCountByNumber(blockNumber int) int

    // iotxGetUncleCountByBlockHash returns the number of uncles in a block from a block matching
    // the given block hash
    iotxGetUncleCountByBlockHash(blockHash string) int

    // iotxGetUncleCountByBlockNumber returns the number of uncles in a block from a block matching
    // the given block number
    iotxGetUncleCountByBlockNumber(blockNumber int) int

    // iotxGetCode returns code at a given address
    iotxGetCode(address string, blockNumber int) string

    // iotxSign returns an Ethereum specific signature with: sign(keccak256("\x19Ethereum Signed
    // Message:\n" + len(message) + message)))
    iotxSign(address string, data string) string

    // iotxSendTransfer creates new message call transfer or a contract creation, if the
    // data field contains code
    iotxSendTransfer(args SendTxArgs) string

    // iotxSendRawTransaction creates new message call transaction or a contract creation for
    // signed transactions
    iotxSendRawTransfer(encodedTx string) string

    // iotxCall executes a new message call immediately without creating a transaction on the block chain
    iotxCall(args CallArgs, blockNumber int) string

    // iotxEstimateGas generates and returns an estimate of how much gas is necessary to allow the
    // transaction to complete. The transaction will not be added to the blockchain. Note that the
    // estimate may be significantly more than the amount of gas actually used by the transaction,
    // for a variety of reasons including EVM mechanics and node performance
    iotxEstimateGas(args CallArgs) int

    // iotxGetBlockByHash returns information about a block by hash
    iotxGetBlockByHash(blockHash string) Block

    // iotxGetBlockHashByHash returns information about a block hash by hash
    iotxGetBlockHashByHash(blockHash string) string

    // iotxGetBlockByNumber returns information about a block by block number
    iotxGetBlockByNumber(blockNumber int) Block

    // iotxGetBlockHashByNumber returns information about a block hash by block number
    iotxGetBlockHashByNumber(blockNumber int) string

    // iotxGetTransferByHash returns the information about a transfer requested by transfer hash
    iotxGetTransferByHash(hash string) Transfer

    // iotxGetTransferByBlockHashAndIndex returns information about a transfer by block hash and
    // transfer index position
    iotxGetTransferByBlockHashAndIndex(blockHash string, index int) Transfer

    // iotxGetTransferByBlockNumberAndIndex returns information about a transfer by block number
    // and transfer index position
    iotxGetTransferByBlockNumberAndIndex(blockNumber int, index int) Transfer

    // iotxGetTransferReceipt returns the receipt of a transfer by transfer hash
    iotxGetTransferReceipt(hash string) TransactionReceipt

    // iotxGetUncleByBlockHashAndIndex returns information about a uncle of a block by hash and uncle index position
    iotxGetUncleByBlockHashAndIndex(blockHash string, index int) Block

    // iotxGetUncleByBlockNumberAndIndex returns information about a uncle of a block by number and uncle index position
    iotxGetUncleByBlockNumberAndIndex(blockNumber int, uncleIndex int) Block
}

