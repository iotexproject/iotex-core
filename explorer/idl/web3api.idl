// Copyright (c) 2018 IoTeX
// This is an alpha (internal) release and is not suitable for production. This source code is provided 'as is' and no
// warranties are given as to title or non-infringement, merchantability or fitness for purpose and, to the extent
// permitted by law, all liability for your use of the code is disclaimed. This source code is governed by Apache
// License 2.0 that can be found in the LICENSE file.

// To compile this file:
// 1. Install the barrister translator (IDL -> JSON)
// you need to be root (or use sudo)
// pip install barrister

// 2. Install barrister-go
// go get github.com/coopernurse/barrister-go
// go install github.com/coopernurse/barrister-go/idl2go

// 3. barrister web3api.idl | $GOPATH/bin/idl2go -i -p web3api

struct CallArgs {
	from                string
	to                  string
	gas                 int
	gasPrice            int
	value               int
    data                string
}

struct SendTxArgs {
    from                string
	to                  string
	gas                 int
	gasPrice            int
	value               int
	nonce               int
	data                string
	input               string
}

struct Log {
	address             string
	topics              []string
	Data                string
	BlockNumber         int
	TxHash              string
    TxIndex             int
	BlockHash           string
	Index               int
	Removed             bool
}

struct Transaction {
    blockHash           string
    blockNumber         int
    from                string
    gas                 int
    gasPrice            int
    hash                string
    input               string
    nonce               int
    to                  string
    transactionIndex    int
    value               int
    v                   int
    r                   string
    s                   string
}

struct TransactionReceipt {
    blockHash           string
    blockNumber         int
    transactionHash     string
    transactionIndex    int
    from                string
    to                  string
    gasUsed             int
    cumulativeGasUsed   int
    contractAddress     string
    logs                []Log
    logsBloom           string
}

struct Block {
    number              int
    hash                string
    parentHash          string
    nonce               string
    sha3Uncles          string
    logsBloom           string
    transactionsRoot    string
    stateRoot           string
    receiptsRoot        string
    miner               string
    difficulty          int
    totalDifficulty     int
    extraData           string
    size                int
    gasLimit            int
    gasUsed             int
    timestamp           int
    transactions        []Transaction
    uncles              []string
}

interface Web3API {
    // clientVersion returns the current client version
    clientVersion() string

    // sha3 returns Keccak-256 (not the standardized SHA3-256) of the given data
    sha3(input string) string

    // netVersion returns the current net id
    netVersion() string

    // netListening returns whether client is actively listening for network connections
    netListening() bool

    // netPeerCount returns number of peers currently connected to the client
    netPeerCount() int

    // protocolVersion returns the current iotex protocol version
    protocolVersion() string

    // syncing returns an object with data about the sync status or false
    syncing() string

    // coinbase returns the client coinbase address
    coinbase() string

    // mining returns true if client is actively mining new blocks
    mining() string

    // hashRate returns the number of hashes per second that the node is mining with
    hashRate() string

    // gasPrice returns the current price per gas
    gasPrice() int

    // accounts returns a list of addresses owned by client
    accounts() []string

    // blockNumber returns the number of most recent block
    blockNumber() int

    // getBalance returns the balance of the account of given address
    // position can be a block number or 'latest', 'earliest' and 'pending'
    getBalance(address string, blockNumber string) string

    // getStorageAt returns the value from a storage position at a given address
    getStorageAt(address string, key int, blockNumber string) string

    // getTransactionCount returns the number of transactions sent from an address
    getTransactionCount(address string, blockNumber string) int

    // getBlockTransactionCountByHash returns the number of transactions in a block from a
    // block matching the given block hash
    getBlockTransactionCountByHash(blockHash string) int

    // getBlockTransactionCountByNumber returns the number of transactions in a block matching
    // the given block number
    getBlockTransactionCountByNumber(blockNumber int) int

    // getUncleCountByBlockHash returns the number of uncles in a block from a block matching
    // the given block hash
    getUncleCountByBlockHash(blockHash string) int

    // getUncleCountByBlockNumber returns the number of uncles in a block from a block matching
    // the given block number
    getUncleCountByBlockNumber(blockNumber int) int

    // getCode returns code at a given address
    getCode(address string, blockNumber int) string

    // sign returns an Ethereum specific signature with: sign(keccak256("\x19Ethereum Signed
    // Message:\n" + len(message) + message)))
    sign(address string, data string) string

    // sendTransaction creates new message call transaction or a contract creation, if the
    // data field contains code
    sendTransaction(args SendTxArgs) string

    // sendRawTransaction creates new message call transaction or a contract creation for
    // signed transactions
    sendRawTransaction(encodedTx string) string

    // call executes a new message call immediately without creating a transaction on the block chain
    call(args CallArgs, blockNumber int) string

    // estimateGas generates and returns an estimate of how much gas is necessary to allow the
    // transaction to complete. The transaction will not be added to the blockchain. Note that the
    // estimate may be significantly more than the amount of gas actually used by the transaction,
    // for a variety of reasons including EVM mechanics and node performance
    estimateGas(args CallArgs) int

    // getBlockByHash returns information about a block by hash
    getBlockByHash(blockHash string) Block

    // getBlockHashByHash returns information about a block hash by hash
    getBlockHashByHash(blockHash string) string

    // getBlockByNumber returns information about a block by block number
    getBlockByNumber(blockNumber int) Block

    // getBlockHashByNumber returns information about a block hash by block number
    getBlockHashByNumber(blockNumber int) string

    // getTransactionByHash returns the information about a transaction requested by transaction hash
    getTransactionByHash(hash string) Transaction

    // getTransactionByBlockHashAndIndex returns information about a transaction by block hash and
    // transaction index position
    getTransactionByBlockHashAndIndex(blockHash string, index int) Transaction

    // getTransactionByBlockNumberAndIndex returns information about a transaction by block number
    // and transaction index position
    getTransactionByBlockNumberAndIndex(blockNumber int, index int) Transaction

    // getTransactionReceipt returns the receipt of a transaction by transaction hash
    getTransactionReceipt(hash string) TransactionReceipt

    // getUncleByBlockHashAndIndex returns information about a uncle of a block by hash and uncle index position
    getUncleByBlockHashAndIndex(blockHash string, index int) Block

    // getUncleByBlockNumberAndIndex returns information about a uncle of a block by number and uncle index position
    getUncleByBlockNumberAndIndex(blockNumber int, uncleIndex int) Block
}

