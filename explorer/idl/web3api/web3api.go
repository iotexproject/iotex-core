// Code generated by idl2go from JSON generated by Barrister v0.1.6
package web3api

import (
	"fmt"
	"github.com/coopernurse/barrister-go"
	"reflect"
)

const BarristerVersion string = "0.1.6"
const BarristerChecksum string = "f85f6c28c4a41d949189fd2ddd327510"
const BarristerDateGenerated int64 = 1540062953024000000

type CallArgs struct {
	From     string `json:"from"`
	To       string `json:"to"`
	Gas      int64  `json:"gas"`
	GasPrice int64  `json:"gasPrice"`
	Value    int64  `json:"value"`
	Data     string `json:"data"`
}

type SendTxArgs struct {
	From     string `json:"from"`
	To       string `json:"to"`
	Gas      int64  `json:"gas"`
	GasPrice int64  `json:"gasPrice"`
	Value    int64  `json:"value"`
	Nonce    int64  `json:"nonce"`
	Data     string `json:"data"`
	Input    string `json:"input"`
}

type Log struct {
	Address     string   `json:"address"`
	Topics      []string `json:"topics"`
	Data        string   `json:"Data"`
	BlockNumber int64    `json:"BlockNumber"`
	TxHash      string   `json:"TxHash"`
	TxIndex     int64    `json:"TxIndex"`
	BlockHash   string   `json:"BlockHash"`
	Index       int64    `json:"Index"`
	Removed     bool     `json:"Removed"`
}

type Transfer struct {
	BlockHash        string `json:"blockHash"`
	BlockNumber      int64  `json:"blockNumber"`
	From             string `json:"from"`
	Gas              int64  `json:"gas"`
	GasPrice         int64  `json:"gasPrice"`
	Hash             string `json:"hash"`
	Input            string `json:"input"`
	Nonce            int64  `json:"nonce"`
	To               string `json:"to"`
	TransactionIndex int64  `json:"transactionIndex"`
	Value            int64  `json:"value"`
	V                int64  `json:"v"`
	R                string `json:"r"`
	S                string `json:"s"`
}

type TransactionReceipt struct {
	BlockHash         string `json:"blockHash"`
	BlockNumber       int64  `json:"blockNumber"`
	TransactionHash   string `json:"transactionHash"`
	TransactionIndex  int64  `json:"transactionIndex"`
	From              string `json:"from"`
	To                string `json:"to"`
	GasUsed           int64  `json:"gasUsed"`
	CumulativeGasUsed int64  `json:"cumulativeGasUsed"`
	ContractAddress   string `json:"contractAddress"`
	Logs              []Log  `json:"logs"`
	LogsBloom         string `json:"logsBloom"`
}

type Block struct {
	Number           int64      `json:"number"`
	Hash             string     `json:"hash"`
	ParentHash       string     `json:"parentHash"`
	Nonce            string     `json:"nonce"`
	Sha3Uncles       string     `json:"sha3Uncles"`
	LogsBloom        string     `json:"logsBloom"`
	TransactionsRoot string     `json:"transactionsRoot"`
	StateRoot        string     `json:"stateRoot"`
	ReceiptsRoot     string     `json:"receiptsRoot"`
	Miner            string     `json:"miner"`
	Difficulty       int64      `json:"difficulty"`
	TotalDifficulty  int64      `json:"totalDifficulty"`
	ExtraData        string     `json:"extraData"`
	Size             int64      `json:"size"`
	GasLimit         int64      `json:"gasLimit"`
	GasUsed          int64      `json:"gasUsed"`
	Timestamp        int64      `json:"timestamp"`
	Transfers        []Transfer `json:"transfers"`
	Uncles           []string   `json:"uncles"`
}

type Web3API interface {
	Web3ClientVersion() (string, error)
	Web3Sha3(input string) (string, error)
	NetVersion() (string, error)
	NetListening() (bool, error)
	NetPeerCount() (int64, error)
	IotxProtocolVersion() (string, error)
	IotxSyncing() (string, error)
	IotxCoinbase() (string, error)
	IotxMining() (string, error)
	IotxHashRate() (string, error)
	IotxGasPrice() (int64, error)
	IotxAccounts() ([]string, error)
	IotxBlockNumber() (int64, error)
	IotxGetBalance(address string, blockNumber int64) (string, error)
	IotxGetStorageAt(address string, key int64, blockNumber int64) (string, error)
	IotxGetTransferCount(address string, blockNumber int64) (int64, error)
	IotxGetBlockTransferCountByHash(blockHash string) (int64, error)
	IotxGetBlockTransferCountByNumber(blockNumber int64) (int64, error)
	IotxGetUncleCountByBlockHash(blockHash string) (int64, error)
	IotxGetUncleCountByBlockNumber(blockNumber int64) (int64, error)
	IotxGetCode(address string, blockNumber int64) (string, error)
	IotxSign(address string, data string) (string, error)
	IotxSendTransfer(args SendTxArgs) (string, error)
	IotxSendRawTransfer(encodedTx string) (string, error)
	IotxCall(args CallArgs, blockNumber int64) (string, error)
	IotxEstimateGas(args CallArgs) (int64, error)
	IotxGetBlockByHash(blockHash string) (Block, error)
	IotxGetBlockHashByHash(blockHash string) (string, error)
	IotxGetBlockByNumber(blockNumber int64) (Block, error)
	IotxGetBlockHashByNumber(blockNumber int64) (string, error)
	IotxGetTransferByHash(hash string) (Transfer, error)
	IotxGetTransferByBlockHashAndIndex(blockHash string, index int64) (Transfer, error)
	IotxGetTransferByBlockNumberAndIndex(blockNumber int64, index int64) (Transfer, error)
	IotxGetTransferReceipt(hash string) (TransactionReceipt, error)
	IotxGetUncleByBlockHashAndIndex(blockHash string, index int64) (Block, error)
	IotxGetUncleByBlockNumberAndIndex(blockNumber int64, uncleIndex int64) (Block, error)
}

func NewWeb3APIProxy(c barrister.Client) Web3API {
	return Web3APIProxy{c, barrister.MustParseIdlJson([]byte(IdlJsonRaw))}
}

type Web3APIProxy struct {
	client barrister.Client
	idl    *barrister.Idl
}

func (_p Web3APIProxy) Web3ClientVersion() (string, error) {
	_res, _err := _p.client.Call("Web3API.web3ClientVersion")
	if _err == nil {
		_retType := _p.idl.Method("Web3API.web3ClientVersion").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf(""), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.(string)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("Web3API.web3ClientVersion returned invalid type: %v", _t)
			return "", &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return "", _err
}

func (_p Web3APIProxy) Web3Sha3(input string) (string, error) {
	_res, _err := _p.client.Call("Web3API.web3Sha3", input)
	if _err == nil {
		_retType := _p.idl.Method("Web3API.web3Sha3").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf(""), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.(string)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("Web3API.web3Sha3 returned invalid type: %v", _t)
			return "", &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return "", _err
}

func (_p Web3APIProxy) NetVersion() (string, error) {
	_res, _err := _p.client.Call("Web3API.netVersion")
	if _err == nil {
		_retType := _p.idl.Method("Web3API.netVersion").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf(""), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.(string)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("Web3API.netVersion returned invalid type: %v", _t)
			return "", &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return "", _err
}

func (_p Web3APIProxy) NetListening() (bool, error) {
	_res, _err := _p.client.Call("Web3API.netListening")
	if _err == nil {
		_retType := _p.idl.Method("Web3API.netListening").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf(false), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.(bool)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("Web3API.netListening returned invalid type: %v", _t)
			return false, &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return false, _err
}

func (_p Web3APIProxy) NetPeerCount() (int64, error) {
	_res, _err := _p.client.Call("Web3API.netPeerCount")
	if _err == nil {
		_retType := _p.idl.Method("Web3API.netPeerCount").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf(int64(0)), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.(int64)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("Web3API.netPeerCount returned invalid type: %v", _t)
			return int64(0), &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return int64(0), _err
}

func (_p Web3APIProxy) IotxProtocolVersion() (string, error) {
	_res, _err := _p.client.Call("Web3API.iotxProtocolVersion")
	if _err == nil {
		_retType := _p.idl.Method("Web3API.iotxProtocolVersion").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf(""), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.(string)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("Web3API.iotxProtocolVersion returned invalid type: %v", _t)
			return "", &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return "", _err
}

func (_p Web3APIProxy) IotxSyncing() (string, error) {
	_res, _err := _p.client.Call("Web3API.iotxSyncing")
	if _err == nil {
		_retType := _p.idl.Method("Web3API.iotxSyncing").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf(""), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.(string)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("Web3API.iotxSyncing returned invalid type: %v", _t)
			return "", &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return "", _err
}

func (_p Web3APIProxy) IotxCoinbase() (string, error) {
	_res, _err := _p.client.Call("Web3API.iotxCoinbase")
	if _err == nil {
		_retType := _p.idl.Method("Web3API.iotxCoinbase").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf(""), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.(string)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("Web3API.iotxCoinbase returned invalid type: %v", _t)
			return "", &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return "", _err
}

func (_p Web3APIProxy) IotxMining() (string, error) {
	_res, _err := _p.client.Call("Web3API.iotxMining")
	if _err == nil {
		_retType := _p.idl.Method("Web3API.iotxMining").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf(""), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.(string)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("Web3API.iotxMining returned invalid type: %v", _t)
			return "", &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return "", _err
}

func (_p Web3APIProxy) IotxHashRate() (string, error) {
	_res, _err := _p.client.Call("Web3API.iotxHashRate")
	if _err == nil {
		_retType := _p.idl.Method("Web3API.iotxHashRate").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf(""), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.(string)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("Web3API.iotxHashRate returned invalid type: %v", _t)
			return "", &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return "", _err
}

func (_p Web3APIProxy) IotxGasPrice() (int64, error) {
	_res, _err := _p.client.Call("Web3API.iotxGasPrice")
	if _err == nil {
		_retType := _p.idl.Method("Web3API.iotxGasPrice").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf(int64(0)), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.(int64)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("Web3API.iotxGasPrice returned invalid type: %v", _t)
			return int64(0), &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return int64(0), _err
}

func (_p Web3APIProxy) IotxAccounts() ([]string, error) {
	_res, _err := _p.client.Call("Web3API.iotxAccounts")
	if _err == nil {
		_retType := _p.idl.Method("Web3API.iotxAccounts").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf([]string{}), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.([]string)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("Web3API.iotxAccounts returned invalid type: %v", _t)
			return []string{}, &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return []string{}, _err
}

func (_p Web3APIProxy) IotxBlockNumber() (int64, error) {
	_res, _err := _p.client.Call("Web3API.iotxBlockNumber")
	if _err == nil {
		_retType := _p.idl.Method("Web3API.iotxBlockNumber").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf(int64(0)), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.(int64)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("Web3API.iotxBlockNumber returned invalid type: %v", _t)
			return int64(0), &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return int64(0), _err
}

func (_p Web3APIProxy) IotxGetBalance(address string, blockNumber int64) (string, error) {
	_res, _err := _p.client.Call("Web3API.iotxGetBalance", address, blockNumber)
	if _err == nil {
		_retType := _p.idl.Method("Web3API.iotxGetBalance").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf(""), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.(string)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("Web3API.iotxGetBalance returned invalid type: %v", _t)
			return "", &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return "", _err
}

func (_p Web3APIProxy) IotxGetStorageAt(address string, key int64, blockNumber int64) (string, error) {
	_res, _err := _p.client.Call("Web3API.iotxGetStorageAt", address, key, blockNumber)
	if _err == nil {
		_retType := _p.idl.Method("Web3API.iotxGetStorageAt").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf(""), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.(string)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("Web3API.iotxGetStorageAt returned invalid type: %v", _t)
			return "", &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return "", _err
}

func (_p Web3APIProxy) IotxGetTransferCount(address string, blockNumber int64) (int64, error) {
	_res, _err := _p.client.Call("Web3API.iotxGetTransferCount", address, blockNumber)
	if _err == nil {
		_retType := _p.idl.Method("Web3API.iotxGetTransferCount").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf(int64(0)), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.(int64)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("Web3API.iotxGetTransferCount returned invalid type: %v", _t)
			return int64(0), &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return int64(0), _err
}

func (_p Web3APIProxy) IotxGetBlockTransferCountByHash(blockHash string) (int64, error) {
	_res, _err := _p.client.Call("Web3API.iotxGetBlockTransferCountByHash", blockHash)
	if _err == nil {
		_retType := _p.idl.Method("Web3API.iotxGetBlockTransferCountByHash").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf(int64(0)), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.(int64)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("Web3API.iotxGetBlockTransferCountByHash returned invalid type: %v", _t)
			return int64(0), &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return int64(0), _err
}

func (_p Web3APIProxy) IotxGetBlockTransferCountByNumber(blockNumber int64) (int64, error) {
	_res, _err := _p.client.Call("Web3API.iotxGetBlockTransferCountByNumber", blockNumber)
	if _err == nil {
		_retType := _p.idl.Method("Web3API.iotxGetBlockTransferCountByNumber").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf(int64(0)), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.(int64)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("Web3API.iotxGetBlockTransferCountByNumber returned invalid type: %v", _t)
			return int64(0), &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return int64(0), _err
}

func (_p Web3APIProxy) IotxGetUncleCountByBlockHash(blockHash string) (int64, error) {
	_res, _err := _p.client.Call("Web3API.iotxGetUncleCountByBlockHash", blockHash)
	if _err == nil {
		_retType := _p.idl.Method("Web3API.iotxGetUncleCountByBlockHash").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf(int64(0)), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.(int64)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("Web3API.iotxGetUncleCountByBlockHash returned invalid type: %v", _t)
			return int64(0), &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return int64(0), _err
}

func (_p Web3APIProxy) IotxGetUncleCountByBlockNumber(blockNumber int64) (int64, error) {
	_res, _err := _p.client.Call("Web3API.iotxGetUncleCountByBlockNumber", blockNumber)
	if _err == nil {
		_retType := _p.idl.Method("Web3API.iotxGetUncleCountByBlockNumber").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf(int64(0)), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.(int64)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("Web3API.iotxGetUncleCountByBlockNumber returned invalid type: %v", _t)
			return int64(0), &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return int64(0), _err
}

func (_p Web3APIProxy) IotxGetCode(address string, blockNumber int64) (string, error) {
	_res, _err := _p.client.Call("Web3API.iotxGetCode", address, blockNumber)
	if _err == nil {
		_retType := _p.idl.Method("Web3API.iotxGetCode").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf(""), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.(string)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("Web3API.iotxGetCode returned invalid type: %v", _t)
			return "", &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return "", _err
}

func (_p Web3APIProxy) IotxSign(address string, data string) (string, error) {
	_res, _err := _p.client.Call("Web3API.iotxSign", address, data)
	if _err == nil {
		_retType := _p.idl.Method("Web3API.iotxSign").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf(""), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.(string)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("Web3API.iotxSign returned invalid type: %v", _t)
			return "", &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return "", _err
}

func (_p Web3APIProxy) IotxSendTransfer(args SendTxArgs) (string, error) {
	_res, _err := _p.client.Call("Web3API.iotxSendTransfer", args)
	if _err == nil {
		_retType := _p.idl.Method("Web3API.iotxSendTransfer").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf(""), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.(string)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("Web3API.iotxSendTransfer returned invalid type: %v", _t)
			return "", &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return "", _err
}

func (_p Web3APIProxy) IotxSendRawTransfer(encodedTx string) (string, error) {
	_res, _err := _p.client.Call("Web3API.iotxSendRawTransfer", encodedTx)
	if _err == nil {
		_retType := _p.idl.Method("Web3API.iotxSendRawTransfer").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf(""), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.(string)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("Web3API.iotxSendRawTransfer returned invalid type: %v", _t)
			return "", &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return "", _err
}

func (_p Web3APIProxy) IotxCall(args CallArgs, blockNumber int64) (string, error) {
	_res, _err := _p.client.Call("Web3API.iotxCall", args, blockNumber)
	if _err == nil {
		_retType := _p.idl.Method("Web3API.iotxCall").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf(""), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.(string)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("Web3API.iotxCall returned invalid type: %v", _t)
			return "", &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return "", _err
}

func (_p Web3APIProxy) IotxEstimateGas(args CallArgs) (int64, error) {
	_res, _err := _p.client.Call("Web3API.iotxEstimateGas", args)
	if _err == nil {
		_retType := _p.idl.Method("Web3API.iotxEstimateGas").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf(int64(0)), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.(int64)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("Web3API.iotxEstimateGas returned invalid type: %v", _t)
			return int64(0), &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return int64(0), _err
}

func (_p Web3APIProxy) IotxGetBlockByHash(blockHash string) (Block, error) {
	_res, _err := _p.client.Call("Web3API.iotxGetBlockByHash", blockHash)
	if _err == nil {
		_retType := _p.idl.Method("Web3API.iotxGetBlockByHash").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf(Block{}), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.(Block)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("Web3API.iotxGetBlockByHash returned invalid type: %v", _t)
			return Block{}, &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return Block{}, _err
}

func (_p Web3APIProxy) IotxGetBlockHashByHash(blockHash string) (string, error) {
	_res, _err := _p.client.Call("Web3API.iotxGetBlockHashByHash", blockHash)
	if _err == nil {
		_retType := _p.idl.Method("Web3API.iotxGetBlockHashByHash").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf(""), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.(string)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("Web3API.iotxGetBlockHashByHash returned invalid type: %v", _t)
			return "", &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return "", _err
}

func (_p Web3APIProxy) IotxGetBlockByNumber(blockNumber int64) (Block, error) {
	_res, _err := _p.client.Call("Web3API.iotxGetBlockByNumber", blockNumber)
	if _err == nil {
		_retType := _p.idl.Method("Web3API.iotxGetBlockByNumber").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf(Block{}), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.(Block)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("Web3API.iotxGetBlockByNumber returned invalid type: %v", _t)
			return Block{}, &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return Block{}, _err
}

func (_p Web3APIProxy) IotxGetBlockHashByNumber(blockNumber int64) (string, error) {
	_res, _err := _p.client.Call("Web3API.iotxGetBlockHashByNumber", blockNumber)
	if _err == nil {
		_retType := _p.idl.Method("Web3API.iotxGetBlockHashByNumber").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf(""), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.(string)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("Web3API.iotxGetBlockHashByNumber returned invalid type: %v", _t)
			return "", &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return "", _err
}

func (_p Web3APIProxy) IotxGetTransferByHash(hash string) (Transfer, error) {
	_res, _err := _p.client.Call("Web3API.iotxGetTransferByHash", hash)
	if _err == nil {
		_retType := _p.idl.Method("Web3API.iotxGetTransferByHash").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf(Transfer{}), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.(Transfer)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("Web3API.iotxGetTransferByHash returned invalid type: %v", _t)
			return Transfer{}, &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return Transfer{}, _err
}

func (_p Web3APIProxy) IotxGetTransferByBlockHashAndIndex(blockHash string, index int64) (Transfer, error) {
	_res, _err := _p.client.Call("Web3API.iotxGetTransferByBlockHashAndIndex", blockHash, index)
	if _err == nil {
		_retType := _p.idl.Method("Web3API.iotxGetTransferByBlockHashAndIndex").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf(Transfer{}), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.(Transfer)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("Web3API.iotxGetTransferByBlockHashAndIndex returned invalid type: %v", _t)
			return Transfer{}, &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return Transfer{}, _err
}

func (_p Web3APIProxy) IotxGetTransferByBlockNumberAndIndex(blockNumber int64, index int64) (Transfer, error) {
	_res, _err := _p.client.Call("Web3API.iotxGetTransferByBlockNumberAndIndex", blockNumber, index)
	if _err == nil {
		_retType := _p.idl.Method("Web3API.iotxGetTransferByBlockNumberAndIndex").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf(Transfer{}), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.(Transfer)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("Web3API.iotxGetTransferByBlockNumberAndIndex returned invalid type: %v", _t)
			return Transfer{}, &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return Transfer{}, _err
}

func (_p Web3APIProxy) IotxGetTransferReceipt(hash string) (TransactionReceipt, error) {
	_res, _err := _p.client.Call("Web3API.iotxGetTransferReceipt", hash)
	if _err == nil {
		_retType := _p.idl.Method("Web3API.iotxGetTransferReceipt").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf(TransactionReceipt{}), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.(TransactionReceipt)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("Web3API.iotxGetTransferReceipt returned invalid type: %v", _t)
			return TransactionReceipt{}, &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return TransactionReceipt{}, _err
}

func (_p Web3APIProxy) IotxGetUncleByBlockHashAndIndex(blockHash string, index int64) (Block, error) {
	_res, _err := _p.client.Call("Web3API.iotxGetUncleByBlockHashAndIndex", blockHash, index)
	if _err == nil {
		_retType := _p.idl.Method("Web3API.iotxGetUncleByBlockHashAndIndex").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf(Block{}), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.(Block)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("Web3API.iotxGetUncleByBlockHashAndIndex returned invalid type: %v", _t)
			return Block{}, &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return Block{}, _err
}

func (_p Web3APIProxy) IotxGetUncleByBlockNumberAndIndex(blockNumber int64, uncleIndex int64) (Block, error) {
	_res, _err := _p.client.Call("Web3API.iotxGetUncleByBlockNumberAndIndex", blockNumber, uncleIndex)
	if _err == nil {
		_retType := _p.idl.Method("Web3API.iotxGetUncleByBlockNumberAndIndex").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf(Block{}), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.(Block)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("Web3API.iotxGetUncleByBlockNumberAndIndex returned invalid type: %v", _t)
			return Block{}, &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return Block{}, _err
}

func NewJSONServer(idl *barrister.Idl, forceASCII bool, web3api Web3API) barrister.Server {
	return NewServer(idl, &barrister.JsonSerializer{forceASCII}, web3api)
}

func NewServer(idl *barrister.Idl, ser barrister.Serializer, web3api Web3API) barrister.Server {
	_svr := barrister.NewServer(idl, ser)
	_svr.AddHandler("Web3API", web3api)
	return _svr
}

var IdlJsonRaw = `[
    {
        "type": "comment",
        "name": "",
        "comment": "",
        "value": "Copyright (c) 2018 IoTeX\nThis is an alpha (internal) release and is not suitable for production. This source code is provided 'as is' and no\nwarranties are given as to title or non-infringement, merchantability or fitness for purpose and, to the extent\npermitted by law, all liability for your use of the code is disclaimed. This source code is governed by Apache\nLicense 2.0 that can be found in the LICENSE file.",
        "extends": "",
        "fields": null,
        "values": null,
        "functions": null,
        "barrister_version": "",
        "date_generated": 0,
        "checksum": ""
    },
    {
        "type": "comment",
        "name": "",
        "comment": "",
        "value": "To compile this file:\n1. Install the barrister translator (IDL -\u003e JSON)\nyou need to be root (or use sudo)\npip install barrister",
        "extends": "",
        "fields": null,
        "values": null,
        "functions": null,
        "barrister_version": "",
        "date_generated": 0,
        "checksum": ""
    },
    {
        "type": "comment",
        "name": "",
        "comment": "",
        "value": "2. Install barrister-go\ngo get github.com/coopernurse/barrister-go\ngo install github.com/coopernurse/barrister-go/idl2go",
        "extends": "",
        "fields": null,
        "values": null,
        "functions": null,
        "barrister_version": "",
        "date_generated": 0,
        "checksum": ""
    },
    {
        "type": "comment",
        "name": "",
        "comment": "",
        "value": "3. barrister web3api.idl | $GOPATH/bin/idl2go -i -p web3api",
        "extends": "",
        "fields": null,
        "values": null,
        "functions": null,
        "barrister_version": "",
        "date_generated": 0,
        "checksum": ""
    },
    {
        "type": "struct",
        "name": "CallArgs",
        "comment": "",
        "value": "",
        "extends": "",
        "fields": [
            {
                "name": "from",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "to",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "gas",
                "type": "int",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "gasPrice",
                "type": "int",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "value",
                "type": "int",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "data",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": ""
            }
        ],
        "values": null,
        "functions": null,
        "barrister_version": "",
        "date_generated": 0,
        "checksum": ""
    },
    {
        "type": "struct",
        "name": "SendTxArgs",
        "comment": "",
        "value": "",
        "extends": "",
        "fields": [
            {
                "name": "from",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "to",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "gas",
                "type": "int",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "gasPrice",
                "type": "int",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "value",
                "type": "int",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "nonce",
                "type": "int",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "data",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "input",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": ""
            }
        ],
        "values": null,
        "functions": null,
        "barrister_version": "",
        "date_generated": 0,
        "checksum": ""
    },
    {
        "type": "struct",
        "name": "Log",
        "comment": "",
        "value": "",
        "extends": "",
        "fields": [
            {
                "name": "address",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "topics",
                "type": "string",
                "optional": false,
                "is_array": true,
                "comment": ""
            },
            {
                "name": "Data",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "BlockNumber",
                "type": "int",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "TxHash",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "TxIndex",
                "type": "int",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "BlockHash",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "Index",
                "type": "int",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "Removed",
                "type": "bool",
                "optional": false,
                "is_array": false,
                "comment": ""
            }
        ],
        "values": null,
        "functions": null,
        "barrister_version": "",
        "date_generated": 0,
        "checksum": ""
    },
    {
        "type": "struct",
        "name": "Transfer",
        "comment": "",
        "value": "",
        "extends": "",
        "fields": [
            {
                "name": "blockHash",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "blockNumber",
                "type": "int",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "from",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "gas",
                "type": "int",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "gasPrice",
                "type": "int",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "hash",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "input",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "nonce",
                "type": "int",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "to",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "transactionIndex",
                "type": "int",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "value",
                "type": "int",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "v",
                "type": "int",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "r",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "s",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": ""
            }
        ],
        "values": null,
        "functions": null,
        "barrister_version": "",
        "date_generated": 0,
        "checksum": ""
    },
    {
        "type": "struct",
        "name": "TransactionReceipt",
        "comment": "",
        "value": "",
        "extends": "",
        "fields": [
            {
                "name": "blockHash",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "blockNumber",
                "type": "int",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "transactionHash",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "transactionIndex",
                "type": "int",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "from",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "to",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "gasUsed",
                "type": "int",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "cumulativeGasUsed",
                "type": "int",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "contractAddress",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "logs",
                "type": "Log",
                "optional": false,
                "is_array": true,
                "comment": ""
            },
            {
                "name": "logsBloom",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": ""
            }
        ],
        "values": null,
        "functions": null,
        "barrister_version": "",
        "date_generated": 0,
        "checksum": ""
    },
    {
        "type": "struct",
        "name": "Block",
        "comment": "",
        "value": "",
        "extends": "",
        "fields": [
            {
                "name": "number",
                "type": "int",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "hash",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "parentHash",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "nonce",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "sha3Uncles",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "logsBloom",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "transactionsRoot",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "stateRoot",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "receiptsRoot",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "miner",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "difficulty",
                "type": "int",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "totalDifficulty",
                "type": "int",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "extraData",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "size",
                "type": "int",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "gasLimit",
                "type": "int",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "gasUsed",
                "type": "int",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "timestamp",
                "type": "int",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "transfers",
                "type": "Transfer",
                "optional": false,
                "is_array": true,
                "comment": ""
            },
            {
                "name": "uncles",
                "type": "string",
                "optional": false,
                "is_array": true,
                "comment": ""
            }
        ],
        "values": null,
        "functions": null,
        "barrister_version": "",
        "date_generated": 0,
        "checksum": ""
    },
    {
        "type": "interface",
        "name": "Web3API",
        "comment": "",
        "value": "",
        "extends": "",
        "fields": null,
        "values": null,
        "functions": [
            {
                "name": "web3ClientVersion",
                "comment": "web3ClientVersion returns the current client version",
                "params": [],
                "returns": {
                    "name": "",
                    "type": "string",
                    "optional": false,
                    "is_array": false,
                    "comment": ""
                }
            },
            {
                "name": "web3Sha3",
                "comment": "web3Sha3 returns Keccak-256 (not the standardized SHA3-256) of the given data",
                "params": [
                    {
                        "name": "input",
                        "type": "string",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    }
                ],
                "returns": {
                    "name": "",
                    "type": "string",
                    "optional": false,
                    "is_array": false,
                    "comment": ""
                }
            },
            {
                "name": "netVersion",
                "comment": "netVersion returns the current net id",
                "params": [],
                "returns": {
                    "name": "",
                    "type": "string",
                    "optional": false,
                    "is_array": false,
                    "comment": ""
                }
            },
            {
                "name": "netListening",
                "comment": "netListening returns whether client is actively listening for network connections",
                "params": [],
                "returns": {
                    "name": "",
                    "type": "bool",
                    "optional": false,
                    "is_array": false,
                    "comment": ""
                }
            },
            {
                "name": "netPeerCount",
                "comment": "netPeerCount returns number of peers currently connected to the client",
                "params": [],
                "returns": {
                    "name": "",
                    "type": "int",
                    "optional": false,
                    "is_array": false,
                    "comment": ""
                }
            },
            {
                "name": "iotxProtocolVersion",
                "comment": "iotxProtocolVersion returns the current iotex protocol version",
                "params": [],
                "returns": {
                    "name": "",
                    "type": "string",
                    "optional": false,
                    "is_array": false,
                    "comment": ""
                }
            },
            {
                "name": "iotxSyncing",
                "comment": "iotxSyncing returns an object with data about the sync status or false",
                "params": [],
                "returns": {
                    "name": "",
                    "type": "string",
                    "optional": false,
                    "is_array": false,
                    "comment": ""
                }
            },
            {
                "name": "iotxCoinbase",
                "comment": "iotxCoinbase returns the client coinbase address",
                "params": [],
                "returns": {
                    "name": "",
                    "type": "string",
                    "optional": false,
                    "is_array": false,
                    "comment": ""
                }
            },
            {
                "name": "iotxMining",
                "comment": "iotxMining returns true if client is actively mining new blocks",
                "params": [],
                "returns": {
                    "name": "",
                    "type": "string",
                    "optional": false,
                    "is_array": false,
                    "comment": ""
                }
            },
            {
                "name": "iotxHashRate",
                "comment": "iotxHashRate returns the number of hashes per second that the node is mining with",
                "params": [],
                "returns": {
                    "name": "",
                    "type": "string",
                    "optional": false,
                    "is_array": false,
                    "comment": ""
                }
            },
            {
                "name": "iotxGasPrice",
                "comment": "iotxGasPrice returns the current price per gas",
                "params": [],
                "returns": {
                    "name": "",
                    "type": "int",
                    "optional": false,
                    "is_array": false,
                    "comment": ""
                }
            },
            {
                "name": "iotxAccounts",
                "comment": "iotxAccounts returns a list of addresses owned by client",
                "params": [],
                "returns": {
                    "name": "",
                    "type": "string",
                    "optional": false,
                    "is_array": true,
                    "comment": ""
                }
            },
            {
                "name": "iotxBlockNumber",
                "comment": "iotxBlockNumber returns the number of most recent block",
                "params": [],
                "returns": {
                    "name": "",
                    "type": "int",
                    "optional": false,
                    "is_array": false,
                    "comment": ""
                }
            },
            {
                "name": "iotxGetBalance",
                "comment": "iotxGetBalance returns the balance of the account of given address\nposition can be a block number or 'latest', 'earliest' and 'pending'",
                "params": [
                    {
                        "name": "address",
                        "type": "string",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    },
                    {
                        "name": "blockNumber",
                        "type": "int",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    }
                ],
                "returns": {
                    "name": "",
                    "type": "string",
                    "optional": false,
                    "is_array": false,
                    "comment": ""
                }
            },
            {
                "name": "iotxGetStorageAt",
                "comment": "iotxGetStorageAt returns the value from a storage position at a given address",
                "params": [
                    {
                        "name": "address",
                        "type": "string",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    },
                    {
                        "name": "key",
                        "type": "int",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    },
                    {
                        "name": "blockNumber",
                        "type": "int",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    }
                ],
                "returns": {
                    "name": "",
                    "type": "string",
                    "optional": false,
                    "is_array": false,
                    "comment": ""
                }
            },
            {
                "name": "iotxGetTransferCount",
                "comment": "iotxGetTransferCount returns the number of transfers sent from an address",
                "params": [
                    {
                        "name": "address",
                        "type": "string",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    },
                    {
                        "name": "blockNumber",
                        "type": "int",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    }
                ],
                "returns": {
                    "name": "",
                    "type": "int",
                    "optional": false,
                    "is_array": false,
                    "comment": ""
                }
            },
            {
                "name": "iotxGetBlockTransferCountByHash",
                "comment": "iotxGetBlockTransferCountByHash returns the number of transfers in a block from a\nblock matching the given block hash",
                "params": [
                    {
                        "name": "blockHash",
                        "type": "string",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    }
                ],
                "returns": {
                    "name": "",
                    "type": "int",
                    "optional": false,
                    "is_array": false,
                    "comment": ""
                }
            },
            {
                "name": "iotxGetBlockTransferCountByNumber",
                "comment": "iotxGetBlockTransferCountByNumber returns the number of transfers in a block matching\nthe given block number",
                "params": [
                    {
                        "name": "blockNumber",
                        "type": "int",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    }
                ],
                "returns": {
                    "name": "",
                    "type": "int",
                    "optional": false,
                    "is_array": false,
                    "comment": ""
                }
            },
            {
                "name": "iotxGetUncleCountByBlockHash",
                "comment": "iotxGetUncleCountByBlockHash returns the number of uncles in a block from a block matching\nthe given block hash",
                "params": [
                    {
                        "name": "blockHash",
                        "type": "string",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    }
                ],
                "returns": {
                    "name": "",
                    "type": "int",
                    "optional": false,
                    "is_array": false,
                    "comment": ""
                }
            },
            {
                "name": "iotxGetUncleCountByBlockNumber",
                "comment": "iotxGetUncleCountByBlockNumber returns the number of uncles in a block from a block matching\nthe given block number",
                "params": [
                    {
                        "name": "blockNumber",
                        "type": "int",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    }
                ],
                "returns": {
                    "name": "",
                    "type": "int",
                    "optional": false,
                    "is_array": false,
                    "comment": ""
                }
            },
            {
                "name": "iotxGetCode",
                "comment": "iotxGetCode returns code at a given address",
                "params": [
                    {
                        "name": "address",
                        "type": "string",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    },
                    {
                        "name": "blockNumber",
                        "type": "int",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    }
                ],
                "returns": {
                    "name": "",
                    "type": "string",
                    "optional": false,
                    "is_array": false,
                    "comment": ""
                }
            },
            {
                "name": "iotxSign",
                "comment": "iotxSign returns an Ethereum specific signature with: sign(keccak256(\"\\x19Ethereum Signed\nMessage:\\n\" + len(message) + message)))",
                "params": [
                    {
                        "name": "address",
                        "type": "string",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    },
                    {
                        "name": "data",
                        "type": "string",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    }
                ],
                "returns": {
                    "name": "",
                    "type": "string",
                    "optional": false,
                    "is_array": false,
                    "comment": ""
                }
            },
            {
                "name": "iotxSendTransfer",
                "comment": "iotxSendTransfer creates new message call transfer or a contract creation, if the\ndata field contains code",
                "params": [
                    {
                        "name": "args",
                        "type": "SendTxArgs",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    }
                ],
                "returns": {
                    "name": "",
                    "type": "string",
                    "optional": false,
                    "is_array": false,
                    "comment": ""
                }
            },
            {
                "name": "iotxSendRawTransfer",
                "comment": "iotxSendRawTransaction creates new message call transaction or a contract creation for\nsigned transactions",
                "params": [
                    {
                        "name": "encodedTx",
                        "type": "string",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    }
                ],
                "returns": {
                    "name": "",
                    "type": "string",
                    "optional": false,
                    "is_array": false,
                    "comment": ""
                }
            },
            {
                "name": "iotxCall",
                "comment": "iotxCall executes a new message call immediately without creating a transaction on the block chain",
                "params": [
                    {
                        "name": "args",
                        "type": "CallArgs",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    },
                    {
                        "name": "blockNumber",
                        "type": "int",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    }
                ],
                "returns": {
                    "name": "",
                    "type": "string",
                    "optional": false,
                    "is_array": false,
                    "comment": ""
                }
            },
            {
                "name": "iotxEstimateGas",
                "comment": "iotxEstimateGas generates and returns an estimate of how much gas is necessary to allow the\ntransaction to complete. The transaction will not be added to the blockchain. Note that the\nestimate may be significantly more than the amount of gas actually used by the transaction,\nfor a variety of reasons including EVM mechanics and node performance",
                "params": [
                    {
                        "name": "args",
                        "type": "CallArgs",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    }
                ],
                "returns": {
                    "name": "",
                    "type": "int",
                    "optional": false,
                    "is_array": false,
                    "comment": ""
                }
            },
            {
                "name": "iotxGetBlockByHash",
                "comment": "iotxGetBlockByHash returns information about a block by hash",
                "params": [
                    {
                        "name": "blockHash",
                        "type": "string",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    }
                ],
                "returns": {
                    "name": "",
                    "type": "Block",
                    "optional": false,
                    "is_array": false,
                    "comment": ""
                }
            },
            {
                "name": "iotxGetBlockHashByHash",
                "comment": "iotxGetBlockHashByHash returns information about a block hash by hash",
                "params": [
                    {
                        "name": "blockHash",
                        "type": "string",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    }
                ],
                "returns": {
                    "name": "",
                    "type": "string",
                    "optional": false,
                    "is_array": false,
                    "comment": ""
                }
            },
            {
                "name": "iotxGetBlockByNumber",
                "comment": "iotxGetBlockByNumber returns information about a block by block number",
                "params": [
                    {
                        "name": "blockNumber",
                        "type": "int",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    }
                ],
                "returns": {
                    "name": "",
                    "type": "Block",
                    "optional": false,
                    "is_array": false,
                    "comment": ""
                }
            },
            {
                "name": "iotxGetBlockHashByNumber",
                "comment": "iotxGetBlockHashByNumber returns information about a block hash by block number",
                "params": [
                    {
                        "name": "blockNumber",
                        "type": "int",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    }
                ],
                "returns": {
                    "name": "",
                    "type": "string",
                    "optional": false,
                    "is_array": false,
                    "comment": ""
                }
            },
            {
                "name": "iotxGetTransferByHash",
                "comment": "iotxGetTransferByHash returns the information about a transfer requested by transfer hash",
                "params": [
                    {
                        "name": "hash",
                        "type": "string",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    }
                ],
                "returns": {
                    "name": "",
                    "type": "Transfer",
                    "optional": false,
                    "is_array": false,
                    "comment": ""
                }
            },
            {
                "name": "iotxGetTransferByBlockHashAndIndex",
                "comment": "iotxGetTransferByBlockHashAndIndex returns information about a transfer by block hash and\ntransfer index position",
                "params": [
                    {
                        "name": "blockHash",
                        "type": "string",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    },
                    {
                        "name": "index",
                        "type": "int",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    }
                ],
                "returns": {
                    "name": "",
                    "type": "Transfer",
                    "optional": false,
                    "is_array": false,
                    "comment": ""
                }
            },
            {
                "name": "iotxGetTransferByBlockNumberAndIndex",
                "comment": "iotxGetTransferByBlockNumberAndIndex returns information about a transfer by block number\nand transfer index position",
                "params": [
                    {
                        "name": "blockNumber",
                        "type": "int",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    },
                    {
                        "name": "index",
                        "type": "int",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    }
                ],
                "returns": {
                    "name": "",
                    "type": "Transfer",
                    "optional": false,
                    "is_array": false,
                    "comment": ""
                }
            },
            {
                "name": "iotxGetTransferReceipt",
                "comment": "iotxGetTransferReceipt returns the receipt of a transfer by transfer hash",
                "params": [
                    {
                        "name": "hash",
                        "type": "string",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    }
                ],
                "returns": {
                    "name": "",
                    "type": "TransactionReceipt",
                    "optional": false,
                    "is_array": false,
                    "comment": ""
                }
            },
            {
                "name": "iotxGetUncleByBlockHashAndIndex",
                "comment": "iotxGetUncleByBlockHashAndIndex returns information about a uncle of a block by hash and uncle index position",
                "params": [
                    {
                        "name": "blockHash",
                        "type": "string",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    },
                    {
                        "name": "index",
                        "type": "int",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    }
                ],
                "returns": {
                    "name": "",
                    "type": "Block",
                    "optional": false,
                    "is_array": false,
                    "comment": ""
                }
            },
            {
                "name": "iotxGetUncleByBlockNumberAndIndex",
                "comment": "iotxGetUncleByBlockNumberAndIndex returns information about a uncle of a block by number and uncle index position",
                "params": [
                    {
                        "name": "blockNumber",
                        "type": "int",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    },
                    {
                        "name": "uncleIndex",
                        "type": "int",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    }
                ],
                "returns": {
                    "name": "",
                    "type": "Block",
                    "optional": false,
                    "is_array": false,
                    "comment": ""
                }
            }
        ],
        "barrister_version": "",
        "date_generated": 0,
        "checksum": ""
    },
    {
        "type": "meta",
        "name": "",
        "comment": "",
        "value": "",
        "extends": "",
        "fields": null,
        "values": null,
        "functions": null,
        "barrister_version": "0.1.6",
        "date_generated": 1540062953024,
        "checksum": "f85f6c28c4a41d949189fd2ddd327510"
    }
]`
