// Code generated by idl2go from JSON generated by Barrister v0.1.6
package web3api

import (
	"fmt"
	"github.com/coopernurse/barrister-go"
	"reflect"
)

const BarristerVersion string = "0.1.6"
const BarristerChecksum string = "e1af3336c2226b9df7361f9b5183e90b"
const BarristerDateGenerated int64 = 1539584175743000000

type CallArgs struct {
	From     string `json:"from"`
	To       string `json:"to"`
	Gas      int64  `json:"gas"`
	GasPrice int64  `json:"gasPrice"`
	Value    int64  `json:"value"`
	Data     string `json:"data"`
}

type SendTxArgs struct {
	From     string `json:"from"`
	To       string `json:"to"`
	Gas      int64  `json:"gas"`
	GasPrice int64  `json:"gasPrice"`
	Value    int64  `json:"value"`
	Nonce    int64  `json:"nonce"`
	Data     string `json:"data"`
	Input    string `json:"input"`
}

type Log struct {
	Address     string   `json:"address"`
	Topics      []string `json:"topics"`
	Data        string   `json:"Data"`
	BlockNumber int64    `json:"BlockNumber"`
	TxHash      string   `json:"TxHash"`
	TxIndex     int64    `json:"TxIndex"`
	BlockHash   string   `json:"BlockHash"`
	Index       int64    `json:"Index"`
	Removed     bool     `json:"Removed"`
}

type Transaction struct {
	BlockHash        string `json:"blockHash"`
	BlockNumber      int64  `json:"blockNumber"`
	From             string `json:"from"`
	Gas              int64  `json:"gas"`
	GasPrice         int64  `json:"gasPrice"`
	Hash             string `json:"hash"`
	Input            string `json:"input"`
	Nonce            int64  `json:"nonce"`
	To               string `json:"to"`
	TransactionIndex int64  `json:"transactionIndex"`
	Value            int64  `json:"value"`
	V                int64  `json:"v"`
	R                string `json:"r"`
	S                string `json:"s"`
}

type TransactionReceipt struct {
	BlockHash         string `json:"blockHash"`
	BlockNumber       int64  `json:"blockNumber"`
	TransactionHash   string `json:"transactionHash"`
	TransactionIndex  int64  `json:"transactionIndex"`
	From              string `json:"from"`
	To                string `json:"to"`
	GasUsed           int64  `json:"gasUsed"`
	CumulativeGasUsed int64  `json:"cumulativeGasUsed"`
	ContractAddress   string `json:"contractAddress"`
	Logs              []Log  `json:"logs"`
	LogsBloom         string `json:"logsBloom"`
}

type Block struct {
	Number           int64         `json:"number"`
	Hash             string        `json:"hash"`
	ParentHash       string        `json:"parentHash"`
	Nonce            string        `json:"nonce"`
	Sha3Uncles       string        `json:"sha3Uncles"`
	LogsBloom        string        `json:"logsBloom"`
	TransactionsRoot string        `json:"transactionsRoot"`
	StateRoot        string        `json:"stateRoot"`
	ReceiptsRoot     string        `json:"receiptsRoot"`
	Miner            string        `json:"miner"`
	Difficulty       int64         `json:"difficulty"`
	TotalDifficulty  int64         `json:"totalDifficulty"`
	ExtraData        string        `json:"extraData"`
	Size             int64         `json:"size"`
	GasLimit         int64         `json:"gasLimit"`
	GasUsed          int64         `json:"gasUsed"`
	Timestamp        int64         `json:"timestamp"`
	Transactions     []Transaction `json:"transactions"`
	Uncles           []string      `json:"uncles"`
}

type Web3API interface {
	ClientVersion() (string, error)
	Sha3(input string) (string, error)
	NetVersion() (string, error)
	NetListening() (bool, error)
	NetPeerCount() (int64, error)
	ProtocolVersion() (string, error)
	Syncing() (string, error)
	Coinbase() (string, error)
	Mining() (string, error)
	HashRate() (string, error)
	GasPrice() (int64, error)
	Accounts() ([]string, error)
	BlockNumber() (int64, error)
	GetBalance(address string, blockNumber int64) (int64, error)
	GetStorageAt(address string, key int64, blockNumber int64) (string, error)
	GetTransactionCount(address string, blockNumber int64) (int64, error)
	GetBlockTransactionCountByHash(blockHash string) (int64, error)
	GetBlockTransactionCountByNumber(blockNumber int64) (int64, error)
	GetUncleCountByBlockHash(blockHash string) (int64, error)
	GetUncleCountByBlockNumber(blockNumber int64) (int64, error)
	GetCode(address string, blockNumber int64) (string, error)
	Sign(address string, data string) (string, error)
	SendTransaction(args SendTxArgs) (string, error)
	SendRawTransaction(encodedTx string) (string, error)
	Call(args CallArgs, blockNumber int64) (string, error)
	EstimateGas(args CallArgs) (int64, error)
	GetBlockByHash(blockHash string) (Block, error)
	GetBlockHashByHash(blockHash string) (string, error)
	GetBlockByNumber(blockNumber int64) (Block, error)
	GetBlockHashByNumber(blockNumber int64) (string, error)
	GetTransactionByHash(hash string) (Transaction, error)
	GetTransactionByBlockHashAndIndex(blockHash string, index int64) (Transaction, error)
	GetTransactionByBlockNumberAndIndex(blockNumber int64, index int64) (Transaction, error)
	GetTransactionReceipt(hash string) (TransactionReceipt, error)
	GetUncleByBlockHashAndIndex(blockHash string, index int64) (Block, error)
	GetUncleByBlockNumberAndIndex(blockNumber int64, uncleIndex int64) (Block, error)
}

func NewWeb3APIProxy(c barrister.Client) Web3API {
	return Web3APIProxy{c, barrister.MustParseIdlJson([]byte(IdlJsonRaw))}
}

type Web3APIProxy struct {
	client barrister.Client
	idl    *barrister.Idl
}

func (_p Web3APIProxy) ClientVersion() (string, error) {
	_res, _err := _p.client.Call("Web3API.ClientVersion")
	if _err == nil {
		_retType := _p.idl.Method("Web3API.ClientVersion").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf(""), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.(string)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("Web3API.ClientVersion returned invalid type: %v", _t)
			return "", &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return "", _err
}

func (_p Web3APIProxy) Sha3(input string) (string, error) {
	_res, _err := _p.client.Call("Web3API.Sha3", input)
	if _err == nil {
		_retType := _p.idl.Method("Web3API.Sha3").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf(""), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.(string)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("Web3API.Sha3 returned invalid type: %v", _t)
			return "", &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return "", _err
}

func (_p Web3APIProxy) NetVersion() (string, error) {
	_res, _err := _p.client.Call("Web3API.NetVersion")
	if _err == nil {
		_retType := _p.idl.Method("Web3API.NetVersion").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf(""), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.(string)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("Web3API.NetVersion returned invalid type: %v", _t)
			return "", &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return "", _err
}

func (_p Web3APIProxy) NetListening() (bool, error) {
	_res, _err := _p.client.Call("Web3API.NetListening")
	if _err == nil {
		_retType := _p.idl.Method("Web3API.NetListening").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf(false), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.(bool)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("Web3API.NetListening returned invalid type: %v", _t)
			return false, &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return false, _err
}

func (_p Web3APIProxy) NetPeerCount() (int64, error) {
	_res, _err := _p.client.Call("Web3API.NetPeerCount")
	if _err == nil {
		_retType := _p.idl.Method("Web3API.NetPeerCount").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf(int64(0)), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.(int64)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("Web3API.NetPeerCount returned invalid type: %v", _t)
			return int64(0), &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return int64(0), _err
}

func (_p Web3APIProxy) ProtocolVersion() (string, error) {
	_res, _err := _p.client.Call("Web3API.ProtocolVersion")
	if _err == nil {
		_retType := _p.idl.Method("Web3API.ProtocolVersion").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf(""), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.(string)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("Web3API.ProtocolVersion returned invalid type: %v", _t)
			return "", &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return "", _err
}

func (_p Web3APIProxy) Syncing() (string, error) {
	_res, _err := _p.client.Call("Web3API.Syncing")
	if _err == nil {
		_retType := _p.idl.Method("Web3API.Syncing").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf(""), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.(string)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("Web3API.Syncing returned invalid type: %v", _t)
			return "", &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return "", _err
}

func (_p Web3APIProxy) Coinbase() (string, error) {
	_res, _err := _p.client.Call("Web3API.Coinbase")
	if _err == nil {
		_retType := _p.idl.Method("Web3API.Coinbase").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf(""), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.(string)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("Web3API.Coinbase returned invalid type: %v", _t)
			return "", &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return "", _err
}

func (_p Web3APIProxy) Mining() (string, error) {
	_res, _err := _p.client.Call("Web3API.Mining")
	if _err == nil {
		_retType := _p.idl.Method("Web3API.Mining").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf(""), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.(string)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("Web3API.Mining returned invalid type: %v", _t)
			return "", &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return "", _err
}

func (_p Web3APIProxy) HashRate() (string, error) {
	_res, _err := _p.client.Call("Web3API.HashRate")
	if _err == nil {
		_retType := _p.idl.Method("Web3API.HashRate").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf(""), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.(string)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("Web3API.HashRate returned invalid type: %v", _t)
			return "", &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return "", _err
}

func (_p Web3APIProxy) GasPrice() (int64, error) {
	_res, _err := _p.client.Call("Web3API.GasPrice")
	if _err == nil {
		_retType := _p.idl.Method("Web3API.GasPrice").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf(int64(0)), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.(int64)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("Web3API.GasPrice returned invalid type: %v", _t)
			return int64(0), &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return int64(0), _err
}

func (_p Web3APIProxy) Accounts() ([]string, error) {
	_res, _err := _p.client.Call("Web3API.Accounts")
	if _err == nil {
		_retType := _p.idl.Method("Web3API.Accounts").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf([]string{}), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.([]string)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("Web3API.Accounts returned invalid type: %v", _t)
			return []string{}, &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return []string{}, _err
}

func (_p Web3APIProxy) BlockNumber() (int64, error) {
	_res, _err := _p.client.Call("Web3API.BlockNumber")
	if _err == nil {
		_retType := _p.idl.Method("Web3API.BlockNumber").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf(int64(0)), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.(int64)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("Web3API.BlockNumber returned invalid type: %v", _t)
			return int64(0), &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return int64(0), _err
}

func (_p Web3APIProxy) GetBalance(address string, blockNumber int64) (int64, error) {
	_res, _err := _p.client.Call("Web3API.GetBalance", address, blockNumber)
	if _err == nil {
		_retType := _p.idl.Method("Web3API.GetBalance").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf(int64(0)), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.(int64)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("Web3API.GetBalance returned invalid type: %v", _t)
			return int64(0), &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return int64(0), _err
}

func (_p Web3APIProxy) GetStorageAt(address string, key int64, blockNumber int64) (string, error) {
	_res, _err := _p.client.Call("Web3API.GetStorageAt", address, key, blockNumber)
	if _err == nil {
		_retType := _p.idl.Method("Web3API.GetStorageAt").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf(""), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.(string)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("Web3API.GetStorageAt returned invalid type: %v", _t)
			return "", &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return "", _err
}

func (_p Web3APIProxy) GetTransactionCount(address string, blockNumber int64) (int64, error) {
	_res, _err := _p.client.Call("Web3API.GetTransactionCount", address, blockNumber)
	if _err == nil {
		_retType := _p.idl.Method("Web3API.GetTransactionCount").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf(int64(0)), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.(int64)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("Web3API.GetTransactionCount returned invalid type: %v", _t)
			return int64(0), &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return int64(0), _err
}

func (_p Web3APIProxy) GetBlockTransactionCountByHash(blockHash string) (int64, error) {
	_res, _err := _p.client.Call("Web3API.GetBlockTransactionCountByHash", blockHash)
	if _err == nil {
		_retType := _p.idl.Method("Web3API.GetBlockTransactionCountByHash").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf(int64(0)), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.(int64)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("Web3API.GetBlockTransactionCountByHash returned invalid type: %v", _t)
			return int64(0), &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return int64(0), _err
}

func (_p Web3APIProxy) GetBlockTransactionCountByNumber(blockNumber int64) (int64, error) {
	_res, _err := _p.client.Call("Web3API.GetBlockTransactionCountByNumber", blockNumber)
	if _err == nil {
		_retType := _p.idl.Method("Web3API.GetBlockTransactionCountByNumber").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf(int64(0)), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.(int64)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("Web3API.GetBlockTransactionCountByNumber returned invalid type: %v", _t)
			return int64(0), &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return int64(0), _err
}

func (_p Web3APIProxy) GetUncleCountByBlockHash(blockHash string) (int64, error) {
	_res, _err := _p.client.Call("Web3API.GetUncleCountByBlockHash", blockHash)
	if _err == nil {
		_retType := _p.idl.Method("Web3API.GetUncleCountByBlockHash").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf(int64(0)), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.(int64)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("Web3API.GetUncleCountByBlockHash returned invalid type: %v", _t)
			return int64(0), &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return int64(0), _err
}

func (_p Web3APIProxy) GetUncleCountByBlockNumber(blockNumber int64) (int64, error) {
	_res, _err := _p.client.Call("Web3API.GetUncleCountByBlockNumber", blockNumber)
	if _err == nil {
		_retType := _p.idl.Method("Web3API.GetUncleCountByBlockNumber").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf(int64(0)), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.(int64)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("Web3API.GetUncleCountByBlockNumber returned invalid type: %v", _t)
			return int64(0), &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return int64(0), _err
}

func (_p Web3APIProxy) GetCode(address string, blockNumber int64) (string, error) {
	_res, _err := _p.client.Call("Web3API.GetCode", address, blockNumber)
	if _err == nil {
		_retType := _p.idl.Method("Web3API.GetCode").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf(""), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.(string)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("Web3API.GetCode returned invalid type: %v", _t)
			return "", &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return "", _err
}

func (_p Web3APIProxy) Sign(address string, data string) (string, error) {
	_res, _err := _p.client.Call("Web3API.Sign", address, data)
	if _err == nil {
		_retType := _p.idl.Method("Web3API.Sign").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf(""), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.(string)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("Web3API.Sign returned invalid type: %v", _t)
			return "", &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return "", _err
}

func (_p Web3APIProxy) SendTransaction(args SendTxArgs) (string, error) {
	_res, _err := _p.client.Call("Web3API.SendTransaction", args)
	if _err == nil {
		_retType := _p.idl.Method("Web3API.SendTransaction").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf(""), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.(string)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("Web3API.SendTransaction returned invalid type: %v", _t)
			return "", &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return "", _err
}

func (_p Web3APIProxy) SendRawTransaction(encodedTx string) (string, error) {
	_res, _err := _p.client.Call("Web3API.SendRawTransaction", encodedTx)
	if _err == nil {
		_retType := _p.idl.Method("Web3API.SendRawTransaction").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf(""), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.(string)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("Web3API.SendRawTransaction returned invalid type: %v", _t)
			return "", &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return "", _err
}

func (_p Web3APIProxy) Call(args CallArgs, blockNumber int64) (string, error) {
	_res, _err := _p.client.Call("Web3API.Call", args, blockNumber)
	if _err == nil {
		_retType := _p.idl.Method("Web3API.Call").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf(""), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.(string)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("Web3API.Call returned invalid type: %v", _t)
			return "", &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return "", _err
}

func (_p Web3APIProxy) EstimateGas(args CallArgs) (int64, error) {
	_res, _err := _p.client.Call("Web3API.EstimateGas", args)
	if _err == nil {
		_retType := _p.idl.Method("Web3API.EstimateGas").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf(int64(0)), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.(int64)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("Web3API.EstimateGas returned invalid type: %v", _t)
			return int64(0), &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return int64(0), _err
}

func (_p Web3APIProxy) GetBlockByHash(blockHash string) (Block, error) {
	_res, _err := _p.client.Call("Web3API.GetBlockByHash", blockHash)
	if _err == nil {
		_retType := _p.idl.Method("Web3API.GetBlockByHash").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf(Block{}), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.(Block)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("Web3API.GetBlockByHash returned invalid type: %v", _t)
			return Block{}, &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return Block{}, _err
}

func (_p Web3APIProxy) GetBlockHashByHash(blockHash string) (string, error) {
	_res, _err := _p.client.Call("Web3API.GetBlockHashByHash", blockHash)
	if _err == nil {
		_retType := _p.idl.Method("Web3API.GetBlockHashByHash").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf(""), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.(string)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("Web3API.GetBlockHashByHash returned invalid type: %v", _t)
			return "", &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return "", _err
}

func (_p Web3APIProxy) GetBlockByNumber(blockNumber int64) (Block, error) {
	_res, _err := _p.client.Call("Web3API.GetBlockByNumber", blockNumber)
	if _err == nil {
		_retType := _p.idl.Method("Web3API.GetBlockByNumber").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf(Block{}), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.(Block)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("Web3API.GetBlockByNumber returned invalid type: %v", _t)
			return Block{}, &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return Block{}, _err
}

func (_p Web3APIProxy) GetBlockHashByNumber(blockNumber int64) (string, error) {
	_res, _err := _p.client.Call("Web3API.GetBlockHashByNumber", blockNumber)
	if _err == nil {
		_retType := _p.idl.Method("Web3API.GetBlockHashByNumber").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf(""), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.(string)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("Web3API.GetBlockHashByNumber returned invalid type: %v", _t)
			return "", &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return "", _err
}

func (_p Web3APIProxy) GetTransactionByHash(hash string) (Transaction, error) {
	_res, _err := _p.client.Call("Web3API.GetTransactionByHash", hash)
	if _err == nil {
		_retType := _p.idl.Method("Web3API.GetTransactionByHash").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf(Transaction{}), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.(Transaction)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("Web3API.GetTransactionByHash returned invalid type: %v", _t)
			return Transaction{}, &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return Transaction{}, _err
}

func (_p Web3APIProxy) GetTransactionByBlockHashAndIndex(blockHash string, index int64) (Transaction, error) {
	_res, _err := _p.client.Call("Web3API.GetTransactionByBlockHashAndIndex", blockHash, index)
	if _err == nil {
		_retType := _p.idl.Method("Web3API.GetTransactionByBlockHashAndIndex").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf(Transaction{}), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.(Transaction)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("Web3API.GetTransactionByBlockHashAndIndex returned invalid type: %v", _t)
			return Transaction{}, &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return Transaction{}, _err
}

func (_p Web3APIProxy) GetTransactionByBlockNumberAndIndex(blockNumber int64, index int64) (Transaction, error) {
	_res, _err := _p.client.Call("Web3API.GetTransactionByBlockNumberAndIndex", blockNumber, index)
	if _err == nil {
		_retType := _p.idl.Method("Web3API.GetTransactionByBlockNumberAndIndex").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf(Transaction{}), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.(Transaction)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("Web3API.GetTransactionByBlockNumberAndIndex returned invalid type: %v", _t)
			return Transaction{}, &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return Transaction{}, _err
}

func (_p Web3APIProxy) GetTransactionReceipt(hash string) (TransactionReceipt, error) {
	_res, _err := _p.client.Call("Web3API.GetTransactionReceipt", hash)
	if _err == nil {
		_retType := _p.idl.Method("Web3API.GetTransactionReceipt").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf(TransactionReceipt{}), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.(TransactionReceipt)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("Web3API.GetTransactionReceipt returned invalid type: %v", _t)
			return TransactionReceipt{}, &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return TransactionReceipt{}, _err
}

func (_p Web3APIProxy) GetUncleByBlockHashAndIndex(blockHash string, index int64) (Block, error) {
	_res, _err := _p.client.Call("Web3API.GetUncleByBlockHashAndIndex", blockHash, index)
	if _err == nil {
		_retType := _p.idl.Method("Web3API.GetUncleByBlockHashAndIndex").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf(Block{}), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.(Block)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("Web3API.GetUncleByBlockHashAndIndex returned invalid type: %v", _t)
			return Block{}, &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return Block{}, _err
}

func (_p Web3APIProxy) GetUncleByBlockNumberAndIndex(blockNumber int64, uncleIndex int64) (Block, error) {
	_res, _err := _p.client.Call("Web3API.GetUncleByBlockNumberAndIndex", blockNumber, uncleIndex)
	if _err == nil {
		_retType := _p.idl.Method("Web3API.GetUncleByBlockNumberAndIndex").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf(Block{}), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.(Block)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("Web3API.GetUncleByBlockNumberAndIndex returned invalid type: %v", _t)
			return Block{}, &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return Block{}, _err
}

func NewJSONServer(idl *barrister.Idl, forceASCII bool, web3api Web3API) barrister.Server {
	return NewServer(idl, &barrister.JsonSerializer{forceASCII}, web3api)
}

func NewServer(idl *barrister.Idl, ser barrister.Serializer, web3api Web3API) barrister.Server {
	_svr := barrister.NewServer(idl, ser)
	_svr.AddHandler("Web3API", web3api)
	return _svr
}

var IdlJsonRaw = `[
    {
        "type": "comment",
        "name": "",
        "comment": "",
        "value": "Copyright (c) 2018 IoTeX\nThis is an alpha (internal) release and is not suitable for production. This source code is provided 'as is' and no\nwarranties are given as to title or non-infringement, merchantability or fitness for purpose and, to the extent\npermitted by law, all liability for your use of the code is disclaimed. This source code is governed by Apache\nLicense 2.0 that can be found in the LICENSE file.",
        "extends": "",
        "fields": null,
        "values": null,
        "functions": null,
        "barrister_version": "",
        "date_generated": 0,
        "checksum": ""
    },
    {
        "type": "comment",
        "name": "",
        "comment": "",
        "value": "To compile this file:\n1. Install the barrister translator (IDL -\u003e JSON)\nyou need to be root (or use sudo)\npip install barrister",
        "extends": "",
        "fields": null,
        "values": null,
        "functions": null,
        "barrister_version": "",
        "date_generated": 0,
        "checksum": ""
    },
    {
        "type": "comment",
        "name": "",
        "comment": "",
        "value": "2. Install barrister-go\ngo get github.com/coopernurse/barrister-go\ngo install github.com/coopernurse/barrister-go/idl2go",
        "extends": "",
        "fields": null,
        "values": null,
        "functions": null,
        "barrister_version": "",
        "date_generated": 0,
        "checksum": ""
    },
    {
        "type": "comment",
        "name": "",
        "comment": "",
        "value": "3. barrister explorer.idl | $GOPATH/bin/idl2go -i -p explorer",
        "extends": "",
        "fields": null,
        "values": null,
        "functions": null,
        "barrister_version": "",
        "date_generated": 0,
        "checksum": ""
    },
    {
        "type": "struct",
        "name": "CallArgs",
        "comment": "",
        "value": "",
        "extends": "",
        "fields": [
            {
                "name": "from",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "to",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "gas",
                "type": "int",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "gasPrice",
                "type": "int",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "value",
                "type": "int",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "data",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": ""
            }
        ],
        "values": null,
        "functions": null,
        "barrister_version": "",
        "date_generated": 0,
        "checksum": ""
    },
    {
        "type": "struct",
        "name": "SendTxArgs",
        "comment": "",
        "value": "",
        "extends": "",
        "fields": [
            {
                "name": "from",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "to",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "gas",
                "type": "int",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "gasPrice",
                "type": "int",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "value",
                "type": "int",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "nonce",
                "type": "int",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "data",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "input",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": ""
            }
        ],
        "values": null,
        "functions": null,
        "barrister_version": "",
        "date_generated": 0,
        "checksum": ""
    },
    {
        "type": "struct",
        "name": "Log",
        "comment": "",
        "value": "",
        "extends": "",
        "fields": [
            {
                "name": "address",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "topics",
                "type": "string",
                "optional": false,
                "is_array": true,
                "comment": ""
            },
            {
                "name": "Data",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "BlockNumber",
                "type": "int",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "TxHash",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "TxIndex",
                "type": "int",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "BlockHash",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "Index",
                "type": "int",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "Removed",
                "type": "bool",
                "optional": false,
                "is_array": false,
                "comment": ""
            }
        ],
        "values": null,
        "functions": null,
        "barrister_version": "",
        "date_generated": 0,
        "checksum": ""
    },
    {
        "type": "struct",
        "name": "Transaction",
        "comment": "",
        "value": "",
        "extends": "",
        "fields": [
            {
                "name": "blockHash",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "blockNumber",
                "type": "int",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "from",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "gas",
                "type": "int",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "gasPrice",
                "type": "int",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "hash",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "input",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "nonce",
                "type": "int",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "to",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "transactionIndex",
                "type": "int",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "value",
                "type": "int",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "v",
                "type": "int",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "r",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "s",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": ""
            }
        ],
        "values": null,
        "functions": null,
        "barrister_version": "",
        "date_generated": 0,
        "checksum": ""
    },
    {
        "type": "struct",
        "name": "TransactionReceipt",
        "comment": "",
        "value": "",
        "extends": "",
        "fields": [
            {
                "name": "blockHash",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "blockNumber",
                "type": "int",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "transactionHash",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "transactionIndex",
                "type": "int",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "from",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "to",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "gasUsed",
                "type": "int",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "cumulativeGasUsed",
                "type": "int",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "contractAddress",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "logs",
                "type": "Log",
                "optional": false,
                "is_array": true,
                "comment": ""
            },
            {
                "name": "logsBloom",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": ""
            }
        ],
        "values": null,
        "functions": null,
        "barrister_version": "",
        "date_generated": 0,
        "checksum": ""
    },
    {
        "type": "struct",
        "name": "Block",
        "comment": "",
        "value": "",
        "extends": "",
        "fields": [
            {
                "name": "number",
                "type": "int",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "hash",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "parentHash",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "nonce",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "sha3Uncles",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "logsBloom",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "transactionsRoot",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "stateRoot",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "receiptsRoot",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "miner",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "difficulty",
                "type": "int",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "totalDifficulty",
                "type": "int",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "extraData",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "size",
                "type": "int",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "gasLimit",
                "type": "int",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "gasUsed",
                "type": "int",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "timestamp",
                "type": "int",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "transactions",
                "type": "Transaction",
                "optional": false,
                "is_array": true,
                "comment": ""
            },
            {
                "name": "uncles",
                "type": "string",
                "optional": false,
                "is_array": true,
                "comment": ""
            }
        ],
        "values": null,
        "functions": null,
        "barrister_version": "",
        "date_generated": 0,
        "checksum": ""
    },
    {
        "type": "interface",
        "name": "Web3API",
        "comment": "",
        "value": "",
        "extends": "",
        "fields": null,
        "values": null,
        "functions": [
            {
                "name": "ClientVersion",
                "comment": "ClientVersion returns the current client version",
                "params": [],
                "returns": {
                    "name": "",
                    "type": "string",
                    "optional": false,
                    "is_array": false,
                    "comment": ""
                }
            },
            {
                "name": "Sha3",
                "comment": "Sha3 returns Keccak-256 (not the standardized SHA3-256) of the given data",
                "params": [
                    {
                        "name": "input",
                        "type": "string",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    }
                ],
                "returns": {
                    "name": "",
                    "type": "string",
                    "optional": false,
                    "is_array": false,
                    "comment": ""
                }
            },
            {
                "name": "NetVersion",
                "comment": "NetVersion returns the current net id",
                "params": [],
                "returns": {
                    "name": "",
                    "type": "string",
                    "optional": false,
                    "is_array": false,
                    "comment": ""
                }
            },
            {
                "name": "NetListening",
                "comment": "NetListening returns whether client is actively listening for network connections",
                "params": [],
                "returns": {
                    "name": "",
                    "type": "bool",
                    "optional": false,
                    "is_array": false,
                    "comment": ""
                }
            },
            {
                "name": "NetPeerCount",
                "comment": "NetPeerCount returns number of peers currently connected to the client",
                "params": [],
                "returns": {
                    "name": "",
                    "type": "int",
                    "optional": false,
                    "is_array": false,
                    "comment": ""
                }
            },
            {
                "name": "ProtocolVersion",
                "comment": "ProtocolVersion returns the current iotex protocol version",
                "params": [],
                "returns": {
                    "name": "",
                    "type": "string",
                    "optional": false,
                    "is_array": false,
                    "comment": ""
                }
            },
            {
                "name": "Syncing",
                "comment": "Syncing returns an object with data about the sync status or false",
                "params": [],
                "returns": {
                    "name": "",
                    "type": "string",
                    "optional": false,
                    "is_array": false,
                    "comment": ""
                }
            },
            {
                "name": "Coinbase",
                "comment": "Coinbase returns the client coinbase address",
                "params": [],
                "returns": {
                    "name": "",
                    "type": "string",
                    "optional": false,
                    "is_array": false,
                    "comment": ""
                }
            },
            {
                "name": "Mining",
                "comment": "Mining returns true if client is actively mining new blocks",
                "params": [],
                "returns": {
                    "name": "",
                    "type": "string",
                    "optional": false,
                    "is_array": false,
                    "comment": ""
                }
            },
            {
                "name": "HashRate",
                "comment": "HashRate returns the number of hashes per second that the node is mining with",
                "params": [],
                "returns": {
                    "name": "",
                    "type": "string",
                    "optional": false,
                    "is_array": false,
                    "comment": ""
                }
            },
            {
                "name": "GasPrice",
                "comment": "GasPrice returns the current price per gas",
                "params": [],
                "returns": {
                    "name": "",
                    "type": "int",
                    "optional": false,
                    "is_array": false,
                    "comment": ""
                }
            },
            {
                "name": "Accounts",
                "comment": "Accounts returns a list of addresses owned by client",
                "params": [],
                "returns": {
                    "name": "",
                    "type": "string",
                    "optional": false,
                    "is_array": true,
                    "comment": ""
                }
            },
            {
                "name": "BlockNumber",
                "comment": "BlockNumber returns the number of most recent block",
                "params": [],
                "returns": {
                    "name": "",
                    "type": "int",
                    "optional": false,
                    "is_array": false,
                    "comment": ""
                }
            },
            {
                "name": "GetBalance",
                "comment": "GetBalance returns the balance of the account of given address\nposition can be a block number or 'latest', 'earliest' and 'pending'",
                "params": [
                    {
                        "name": "address",
                        "type": "string",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    },
                    {
                        "name": "blockNumber",
                        "type": "int",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    }
                ],
                "returns": {
                    "name": "",
                    "type": "int",
                    "optional": false,
                    "is_array": false,
                    "comment": ""
                }
            },
            {
                "name": "GetStorageAt",
                "comment": "GetStorageAt returns the value from a storage position at a given address",
                "params": [
                    {
                        "name": "address",
                        "type": "string",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    },
                    {
                        "name": "key",
                        "type": "int",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    },
                    {
                        "name": "blockNumber",
                        "type": "int",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    }
                ],
                "returns": {
                    "name": "",
                    "type": "string",
                    "optional": false,
                    "is_array": false,
                    "comment": ""
                }
            },
            {
                "name": "GetTransactionCount",
                "comment": "GetTransactionCount returns the number of transactions sent from an address",
                "params": [
                    {
                        "name": "address",
                        "type": "string",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    },
                    {
                        "name": "blockNumber",
                        "type": "int",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    }
                ],
                "returns": {
                    "name": "",
                    "type": "int",
                    "optional": false,
                    "is_array": false,
                    "comment": ""
                }
            },
            {
                "name": "GetBlockTransactionCountByHash",
                "comment": "GetBlockTransactionCountByHash returns the number of transactions in a block from a\nblock matching the given block hash",
                "params": [
                    {
                        "name": "blockHash",
                        "type": "string",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    }
                ],
                "returns": {
                    "name": "",
                    "type": "int",
                    "optional": false,
                    "is_array": false,
                    "comment": ""
                }
            },
            {
                "name": "GetBlockTransactionCountByNumber",
                "comment": "GetBlockTransactionCountByNumber returns the number of transactions in a block matching\nthe given block number",
                "params": [
                    {
                        "name": "blockNumber",
                        "type": "int",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    }
                ],
                "returns": {
                    "name": "",
                    "type": "int",
                    "optional": false,
                    "is_array": false,
                    "comment": ""
                }
            },
            {
                "name": "GetUncleCountByBlockHash",
                "comment": "GetUncleCountByBlockHash returns the number of uncles in a block from a block matching\nthe given block hash",
                "params": [
                    {
                        "name": "blockHash",
                        "type": "string",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    }
                ],
                "returns": {
                    "name": "",
                    "type": "int",
                    "optional": false,
                    "is_array": false,
                    "comment": ""
                }
            },
            {
                "name": "GetUncleCountByBlockNumber",
                "comment": "GetUncleCountByBlockNumber returns the number of uncles in a block from a block matching\nthe given block number",
                "params": [
                    {
                        "name": "blockNumber",
                        "type": "int",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    }
                ],
                "returns": {
                    "name": "",
                    "type": "int",
                    "optional": false,
                    "is_array": false,
                    "comment": ""
                }
            },
            {
                "name": "GetCode",
                "comment": "GetCode returns code at a given address",
                "params": [
                    {
                        "name": "address",
                        "type": "string",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    },
                    {
                        "name": "blockNumber",
                        "type": "int",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    }
                ],
                "returns": {
                    "name": "",
                    "type": "string",
                    "optional": false,
                    "is_array": false,
                    "comment": ""
                }
            },
            {
                "name": "Sign",
                "comment": "Sign returns an Ethereum specific signature with: sign(keccak256(\"\\x19Ethereum Signed\nMessage:\\n\" + len(message) + message)))",
                "params": [
                    {
                        "name": "address",
                        "type": "string",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    },
                    {
                        "name": "data",
                        "type": "string",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    }
                ],
                "returns": {
                    "name": "",
                    "type": "string",
                    "optional": false,
                    "is_array": false,
                    "comment": ""
                }
            },
            {
                "name": "SendTransaction",
                "comment": "SendTransaction creates new message call transaction or a contract creation, if the\ndata field contains code",
                "params": [
                    {
                        "name": "args",
                        "type": "SendTxArgs",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    }
                ],
                "returns": {
                    "name": "",
                    "type": "string",
                    "optional": false,
                    "is_array": false,
                    "comment": ""
                }
            },
            {
                "name": "SendRawTransaction",
                "comment": "SendRawTransaction creates new message call transaction or a contract creation for\nsigned transactions",
                "params": [
                    {
                        "name": "encodedTx",
                        "type": "string",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    }
                ],
                "returns": {
                    "name": "",
                    "type": "string",
                    "optional": false,
                    "is_array": false,
                    "comment": ""
                }
            },
            {
                "name": "Call",
                "comment": "Call executes a new message call immediately without creating a transaction on the block chain",
                "params": [
                    {
                        "name": "args",
                        "type": "CallArgs",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    },
                    {
                        "name": "blockNumber",
                        "type": "int",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    }
                ],
                "returns": {
                    "name": "",
                    "type": "string",
                    "optional": false,
                    "is_array": false,
                    "comment": ""
                }
            },
            {
                "name": "EstimateGas",
                "comment": "EstimateGas generates and returns an estimate of how much gas is necessary to allow the\ntransaction to complete. The transaction will not be added to the blockchain. Note that the\nestimate may be significantly more than the amount of gas actually used by the transaction,\nfor a variety of reasons including EVM mechanics and node performance",
                "params": [
                    {
                        "name": "args",
                        "type": "CallArgs",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    }
                ],
                "returns": {
                    "name": "",
                    "type": "int",
                    "optional": false,
                    "is_array": false,
                    "comment": ""
                }
            },
            {
                "name": "GetBlockByHash",
                "comment": "GetBlockByHash returns information about a block by hash",
                "params": [
                    {
                        "name": "blockHash",
                        "type": "string",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    }
                ],
                "returns": {
                    "name": "",
                    "type": "Block",
                    "optional": false,
                    "is_array": false,
                    "comment": ""
                }
            },
            {
                "name": "GetBlockHashByHash",
                "comment": "GetBlockHashByHash returns information about a block hash by hash",
                "params": [
                    {
                        "name": "blockHash",
                        "type": "string",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    }
                ],
                "returns": {
                    "name": "",
                    "type": "string",
                    "optional": false,
                    "is_array": false,
                    "comment": ""
                }
            },
            {
                "name": "GetBlockByNumber",
                "comment": "GetBlockByNumber returns information about a block by block number",
                "params": [
                    {
                        "name": "blockNumber",
                        "type": "int",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    }
                ],
                "returns": {
                    "name": "",
                    "type": "Block",
                    "optional": false,
                    "is_array": false,
                    "comment": ""
                }
            },
            {
                "name": "GetBlockHashByNumber",
                "comment": "GetBlockHashByNumber returns information about a block hash by block number",
                "params": [
                    {
                        "name": "blockNumber",
                        "type": "int",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    }
                ],
                "returns": {
                    "name": "",
                    "type": "string",
                    "optional": false,
                    "is_array": false,
                    "comment": ""
                }
            },
            {
                "name": "GetTransactionByHash",
                "comment": "GetTransactionByHash returns the information about a transaction requested by transaction hash",
                "params": [
                    {
                        "name": "hash",
                        "type": "string",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    }
                ],
                "returns": {
                    "name": "",
                    "type": "Transaction",
                    "optional": false,
                    "is_array": false,
                    "comment": ""
                }
            },
            {
                "name": "GetTransactionByBlockHashAndIndex",
                "comment": "GetTransactionByBlockHashAndIndex returns information about a transaction by block hash and\ntransaction index position",
                "params": [
                    {
                        "name": "blockHash",
                        "type": "string",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    },
                    {
                        "name": "index",
                        "type": "int",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    }
                ],
                "returns": {
                    "name": "",
                    "type": "Transaction",
                    "optional": false,
                    "is_array": false,
                    "comment": ""
                }
            },
            {
                "name": "GetTransactionByBlockNumberAndIndex",
                "comment": "GetTransactionByBlockNumberAndIndex returns information about a transaction by block number\nand transaction index position",
                "params": [
                    {
                        "name": "blockNumber",
                        "type": "int",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    },
                    {
                        "name": "index",
                        "type": "int",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    }
                ],
                "returns": {
                    "name": "",
                    "type": "Transaction",
                    "optional": false,
                    "is_array": false,
                    "comment": ""
                }
            },
            {
                "name": "GetTransactionReceipt",
                "comment": "GetTransactionReceipt returns the receipt of a transaction by transaction hash",
                "params": [
                    {
                        "name": "hash",
                        "type": "string",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    }
                ],
                "returns": {
                    "name": "",
                    "type": "TransactionReceipt",
                    "optional": false,
                    "is_array": false,
                    "comment": ""
                }
            },
            {
                "name": "GetUncleByBlockHashAndIndex",
                "comment": "GetUncleByBlockHashAndIndex returns information about a uncle of a block by hash and uncle index position",
                "params": [
                    {
                        "name": "blockHash",
                        "type": "string",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    },
                    {
                        "name": "index",
                        "type": "int",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    }
                ],
                "returns": {
                    "name": "",
                    "type": "Block",
                    "optional": false,
                    "is_array": false,
                    "comment": ""
                }
            },
            {
                "name": "GetUncleByBlockNumberAndIndex",
                "comment": "GetUncleByBlockNumberAndIndex returns information about a uncle of a block by number and uncle index position",
                "params": [
                    {
                        "name": "blockNumber",
                        "type": "int",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    },
                    {
                        "name": "uncleIndex",
                        "type": "int",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    }
                ],
                "returns": {
                    "name": "",
                    "type": "Block",
                    "optional": false,
                    "is_array": false,
                    "comment": ""
                }
            }
        ],
        "barrister_version": "",
        "date_generated": 0,
        "checksum": ""
    },
    {
        "type": "meta",
        "name": "",
        "comment": "",
        "value": "",
        "extends": "",
        "fields": null,
        "values": null,
        "functions": null,
        "barrister_version": "0.1.6",
        "date_generated": 1539584175743,
        "checksum": "e1af3336c2226b9df7361f9b5183e90b"
    }
]`
