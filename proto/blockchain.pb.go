// Code generated by protoc-gen-go. DO NOT EDIT.
// source: blockchain.proto

/*
Package iproto is a generated protocol buffer package.

It is generated from these files:
	blockchain.proto

It has these top-level messages:
	TransferPb
	VotePb
	ExecutionPb
	LogPb
	ReceiptPb
	ActionPb
	BlockHeaderPb
	BlockPb
	BlockIndex
	BlockSync
	BlockContainer
	ViewChangeMsg
	Candidate
	CandidateList
	TestPayload
*/
package iproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ViewChangeMsg_ViewChangeType int32

const (
	ViewChangeMsg_INVALID_VIEW_CHANGE_TYPE ViewChangeMsg_ViewChangeType = 0
	ViewChangeMsg_PROPOSE                  ViewChangeMsg_ViewChangeType = 1
	ViewChangeMsg_PREVOTE                  ViewChangeMsg_ViewChangeType = 2
	ViewChangeMsg_VOTE                     ViewChangeMsg_ViewChangeType = 3
)

var ViewChangeMsg_ViewChangeType_name = map[int32]string{
	0: "INVALID_VIEW_CHANGE_TYPE",
	1: "PROPOSE",
	2: "PREVOTE",
	3: "VOTE",
}
var ViewChangeMsg_ViewChangeType_value = map[string]int32{
	"INVALID_VIEW_CHANGE_TYPE": 0,
	"PROPOSE":                  1,
	"PREVOTE":                  2,
	"VOTE":                     3,
}

func (x ViewChangeMsg_ViewChangeType) String() string {
	return proto.EnumName(ViewChangeMsg_ViewChangeType_name, int32(x))
}
func (ViewChangeMsg_ViewChangeType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{11, 0}
}

type TransferPb struct {
	// used by state-based model
	Amount       []byte `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
	Sender       string `protobuf:"bytes,2,opt,name=sender" json:"sender,omitempty"`
	Recipient    string `protobuf:"bytes,3,opt,name=recipient" json:"recipient,omitempty"`
	Payload      []byte `protobuf:"bytes,4,opt,name=payload,proto3" json:"payload,omitempty"`
	SenderPubKey []byte `protobuf:"bytes,5,opt,name=senderPubKey,proto3" json:"senderPubKey,omitempty"`
	IsCoinbase   bool   `protobuf:"varint,6,opt,name=isCoinbase" json:"isCoinbase,omitempty"`
}

func (m *TransferPb) Reset()                    { *m = TransferPb{} }
func (m *TransferPb) String() string            { return proto.CompactTextString(m) }
func (*TransferPb) ProtoMessage()               {}
func (*TransferPb) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *TransferPb) GetAmount() []byte {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (m *TransferPb) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *TransferPb) GetRecipient() string {
	if m != nil {
		return m.Recipient
	}
	return ""
}

func (m *TransferPb) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *TransferPb) GetSenderPubKey() []byte {
	if m != nil {
		return m.SenderPubKey
	}
	return nil
}

func (m *TransferPb) GetIsCoinbase() bool {
	if m != nil {
		return m.IsCoinbase
	}
	return false
}

type VotePb struct {
	Timestamp    uint64 `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	SelfPubkey   []byte `protobuf:"bytes,2,opt,name=selfPubkey,proto3" json:"selfPubkey,omitempty"`
	VoterAddress string `protobuf:"bytes,3,opt,name=voterAddress" json:"voterAddress,omitempty"`
	VoteeAddress string `protobuf:"bytes,4,opt,name=voteeAddress" json:"voteeAddress,omitempty"`
}

func (m *VotePb) Reset()                    { *m = VotePb{} }
func (m *VotePb) String() string            { return proto.CompactTextString(m) }
func (*VotePb) ProtoMessage()               {}
func (*VotePb) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *VotePb) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *VotePb) GetSelfPubkey() []byte {
	if m != nil {
		return m.SelfPubkey
	}
	return nil
}

func (m *VotePb) GetVoterAddress() string {
	if m != nil {
		return m.VoterAddress
	}
	return ""
}

func (m *VotePb) GetVoteeAddress() string {
	if m != nil {
		return m.VoteeAddress
	}
	return ""
}

type ExecutionPb struct {
	Amount         []byte `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
	Executor       string `protobuf:"bytes,2,opt,name=executor" json:"executor,omitempty"`
	Contract       string `protobuf:"bytes,3,opt,name=contract" json:"contract,omitempty"`
	ExecutorPubKey []byte `protobuf:"bytes,4,opt,name=executorPubKey,proto3" json:"executorPubKey,omitempty"`
	Gas            uint64 `protobuf:"varint,5,opt,name=gas" json:"gas,omitempty"`
	GasPrice       uint64 `protobuf:"varint,6,opt,name=gasPrice" json:"gasPrice,omitempty"`
	Data           []byte `protobuf:"bytes,7,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *ExecutionPb) Reset()                    { *m = ExecutionPb{} }
func (m *ExecutionPb) String() string            { return proto.CompactTextString(m) }
func (*ExecutionPb) ProtoMessage()               {}
func (*ExecutionPb) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ExecutionPb) GetAmount() []byte {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (m *ExecutionPb) GetExecutor() string {
	if m != nil {
		return m.Executor
	}
	return ""
}

func (m *ExecutionPb) GetContract() string {
	if m != nil {
		return m.Contract
	}
	return ""
}

func (m *ExecutionPb) GetExecutorPubKey() []byte {
	if m != nil {
		return m.ExecutorPubKey
	}
	return nil
}

func (m *ExecutionPb) GetGas() uint64 {
	if m != nil {
		return m.Gas
	}
	return 0
}

func (m *ExecutionPb) GetGasPrice() uint64 {
	if m != nil {
		return m.GasPrice
	}
	return 0
}

func (m *ExecutionPb) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type LogPb struct {
	Address     string   `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
	Topics      [][]byte `protobuf:"bytes,2,rep,name=topics,proto3" json:"topics,omitempty"`
	Data        []byte   `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	BlockNumber uint64   `protobuf:"varint,4,opt,name=blockNumber" json:"blockNumber,omitempty"`
	TxnHash     []byte   `protobuf:"bytes,5,opt,name=txnHash,proto3" json:"txnHash,omitempty"`
	BlockHash   []byte   `protobuf:"bytes,6,opt,name=blockHash,proto3" json:"blockHash,omitempty"`
	Index       uint32   `protobuf:"varint,7,opt,name=index" json:"index,omitempty"`
}

func (m *LogPb) Reset()                    { *m = LogPb{} }
func (m *LogPb) String() string            { return proto.CompactTextString(m) }
func (*LogPb) ProtoMessage()               {}
func (*LogPb) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *LogPb) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *LogPb) GetTopics() [][]byte {
	if m != nil {
		return m.Topics
	}
	return nil
}

func (m *LogPb) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *LogPb) GetBlockNumber() uint64 {
	if m != nil {
		return m.BlockNumber
	}
	return 0
}

func (m *LogPb) GetTxnHash() []byte {
	if m != nil {
		return m.TxnHash
	}
	return nil
}

func (m *LogPb) GetBlockHash() []byte {
	if m != nil {
		return m.BlockHash
	}
	return nil
}

func (m *LogPb) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

type ReceiptPb struct {
	ReturnValue     []byte   `protobuf:"bytes,1,opt,name=returnValue,proto3" json:"returnValue,omitempty"`
	Status          uint64   `protobuf:"varint,2,opt,name=status" json:"status,omitempty"`
	Hash            []byte   `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`
	GasConsumed     uint64   `protobuf:"varint,4,opt,name=gasConsumed" json:"gasConsumed,omitempty"`
	ContractAddress string   `protobuf:"bytes,5,opt,name=contractAddress" json:"contractAddress,omitempty"`
	Logs            []*LogPb `protobuf:"bytes,6,rep,name=logs" json:"logs,omitempty"`
}

func (m *ReceiptPb) Reset()                    { *m = ReceiptPb{} }
func (m *ReceiptPb) String() string            { return proto.CompactTextString(m) }
func (*ReceiptPb) ProtoMessage()               {}
func (*ReceiptPb) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ReceiptPb) GetReturnValue() []byte {
	if m != nil {
		return m.ReturnValue
	}
	return nil
}

func (m *ReceiptPb) GetStatus() uint64 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *ReceiptPb) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *ReceiptPb) GetGasConsumed() uint64 {
	if m != nil {
		return m.GasConsumed
	}
	return 0
}

func (m *ReceiptPb) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

func (m *ReceiptPb) GetLogs() []*LogPb {
	if m != nil {
		return m.Logs
	}
	return nil
}

type ActionPb struct {
	Version   uint32 `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	Nonce     uint64 `protobuf:"varint,2,opt,name=nonce" json:"nonce,omitempty"`
	Signature []byte `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	// Types that are valid to be assigned to Action:
	//	*ActionPb_Transfer
	//	*ActionPb_Vote
	//	*ActionPb_Execution
	Action isActionPb_Action `protobuf_oneof:"action"`
}

func (m *ActionPb) Reset()                    { *m = ActionPb{} }
func (m *ActionPb) String() string            { return proto.CompactTextString(m) }
func (*ActionPb) ProtoMessage()               {}
func (*ActionPb) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type isActionPb_Action interface {
	isActionPb_Action()
}

type ActionPb_Transfer struct {
	Transfer *TransferPb `protobuf:"bytes,10,opt,name=transfer,oneof"`
}
type ActionPb_Vote struct {
	Vote *VotePb `protobuf:"bytes,11,opt,name=vote,oneof"`
}
type ActionPb_Execution struct {
	Execution *ExecutionPb `protobuf:"bytes,12,opt,name=execution,oneof"`
}

func (*ActionPb_Transfer) isActionPb_Action()  {}
func (*ActionPb_Vote) isActionPb_Action()      {}
func (*ActionPb_Execution) isActionPb_Action() {}

func (m *ActionPb) GetAction() isActionPb_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (m *ActionPb) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *ActionPb) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *ActionPb) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *ActionPb) GetTransfer() *TransferPb {
	if x, ok := m.GetAction().(*ActionPb_Transfer); ok {
		return x.Transfer
	}
	return nil
}

func (m *ActionPb) GetVote() *VotePb {
	if x, ok := m.GetAction().(*ActionPb_Vote); ok {
		return x.Vote
	}
	return nil
}

func (m *ActionPb) GetExecution() *ExecutionPb {
	if x, ok := m.GetAction().(*ActionPb_Execution); ok {
		return x.Execution
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ActionPb) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ActionPb_OneofMarshaler, _ActionPb_OneofUnmarshaler, _ActionPb_OneofSizer, []interface{}{
		(*ActionPb_Transfer)(nil),
		(*ActionPb_Vote)(nil),
		(*ActionPb_Execution)(nil),
	}
}

func _ActionPb_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ActionPb)
	// action
	switch x := m.Action.(type) {
	case *ActionPb_Transfer:
		b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Transfer); err != nil {
			return err
		}
	case *ActionPb_Vote:
		b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Vote); err != nil {
			return err
		}
	case *ActionPb_Execution:
		b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Execution); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ActionPb.Action has unexpected type %T", x)
	}
	return nil
}

func _ActionPb_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ActionPb)
	switch tag {
	case 10: // action.transfer
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TransferPb)
		err := b.DecodeMessage(msg)
		m.Action = &ActionPb_Transfer{msg}
		return true, err
	case 11: // action.vote
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(VotePb)
		err := b.DecodeMessage(msg)
		m.Action = &ActionPb_Vote{msg}
		return true, err
	case 12: // action.execution
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ExecutionPb)
		err := b.DecodeMessage(msg)
		m.Action = &ActionPb_Execution{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ActionPb_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ActionPb)
	// action
	switch x := m.Action.(type) {
	case *ActionPb_Transfer:
		s := proto.Size(x.Transfer)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ActionPb_Vote:
		s := proto.Size(x.Vote)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ActionPb_Execution:
		s := proto.Size(x.Execution)
		n += proto.SizeVarint(12<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// header of a block
type BlockHeaderPb struct {
	Version       uint32 `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	ChainID       uint32 `protobuf:"varint,2,opt,name=chainID" json:"chainID,omitempty"`
	Height        uint64 `protobuf:"varint,3,opt,name=height" json:"height,omitempty"`
	Timestamp     uint64 `protobuf:"varint,4,opt,name=timestamp" json:"timestamp,omitempty"`
	PrevBlockHash []byte `protobuf:"bytes,5,opt,name=prevBlockHash,proto3" json:"prevBlockHash,omitempty"`
	TxRoot        []byte `protobuf:"bytes,6,opt,name=txRoot,proto3" json:"txRoot,omitempty"`
	StateRoot     []byte `protobuf:"bytes,7,opt,name=stateRoot,proto3" json:"stateRoot,omitempty"`
	ReceiptRoot   []byte `protobuf:"bytes,8,opt,name=receiptRoot,proto3" json:"receiptRoot,omitempty"`
	Reserved      []byte `protobuf:"bytes,9,opt,name=reserved,proto3" json:"reserved,omitempty"`
	Signature     []byte `protobuf:"bytes,10,opt,name=signature,proto3" json:"signature,omitempty"`
	Pubkey        []byte `protobuf:"bytes,11,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	DkgID         []byte `protobuf:"bytes,12,opt,name=dkgID,proto3" json:"dkgID,omitempty"`
	DkgPubkey     []byte `protobuf:"bytes,13,opt,name=dkgPubkey,proto3" json:"dkgPubkey,omitempty"`
	DkgSignature  []byte `protobuf:"bytes,14,opt,name=dkgSignature,proto3" json:"dkgSignature,omitempty"`
}

func (m *BlockHeaderPb) Reset()                    { *m = BlockHeaderPb{} }
func (m *BlockHeaderPb) String() string            { return proto.CompactTextString(m) }
func (*BlockHeaderPb) ProtoMessage()               {}
func (*BlockHeaderPb) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *BlockHeaderPb) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *BlockHeaderPb) GetChainID() uint32 {
	if m != nil {
		return m.ChainID
	}
	return 0
}

func (m *BlockHeaderPb) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *BlockHeaderPb) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *BlockHeaderPb) GetPrevBlockHash() []byte {
	if m != nil {
		return m.PrevBlockHash
	}
	return nil
}

func (m *BlockHeaderPb) GetTxRoot() []byte {
	if m != nil {
		return m.TxRoot
	}
	return nil
}

func (m *BlockHeaderPb) GetStateRoot() []byte {
	if m != nil {
		return m.StateRoot
	}
	return nil
}

func (m *BlockHeaderPb) GetReceiptRoot() []byte {
	if m != nil {
		return m.ReceiptRoot
	}
	return nil
}

func (m *BlockHeaderPb) GetReserved() []byte {
	if m != nil {
		return m.Reserved
	}
	return nil
}

func (m *BlockHeaderPb) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *BlockHeaderPb) GetPubkey() []byte {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

func (m *BlockHeaderPb) GetDkgID() []byte {
	if m != nil {
		return m.DkgID
	}
	return nil
}

func (m *BlockHeaderPb) GetDkgPubkey() []byte {
	if m != nil {
		return m.DkgPubkey
	}
	return nil
}

func (m *BlockHeaderPb) GetDkgSignature() []byte {
	if m != nil {
		return m.DkgSignature
	}
	return nil
}

// block consists of header followed by transactions
// hash of current block can be computed from header hence not stored
type BlockPb struct {
	Header  *BlockHeaderPb `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Actions []*ActionPb    `protobuf:"bytes,2,rep,name=actions" json:"actions,omitempty"`
}

func (m *BlockPb) Reset()                    { *m = BlockPb{} }
func (m *BlockPb) String() string            { return proto.CompactTextString(m) }
func (*BlockPb) ProtoMessage()               {}
func (*BlockPb) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *BlockPb) GetHeader() *BlockHeaderPb {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *BlockPb) GetActions() []*ActionPb {
	if m != nil {
		return m.Actions
	}
	return nil
}

// index of block raw data file
type BlockIndex struct {
	Start  uint64   `protobuf:"varint,1,opt,name=start" json:"start,omitempty"`
	End    uint64   `protobuf:"varint,2,opt,name=end" json:"end,omitempty"`
	Offset []uint32 `protobuf:"varint,3,rep,packed,name=offset" json:"offset,omitempty"`
}

func (m *BlockIndex) Reset()                    { *m = BlockIndex{} }
func (m *BlockIndex) String() string            { return proto.CompactTextString(m) }
func (*BlockIndex) ProtoMessage()               {}
func (*BlockIndex) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *BlockIndex) GetStart() uint64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *BlockIndex) GetEnd() uint64 {
	if m != nil {
		return m.End
	}
	return 0
}

func (m *BlockIndex) GetOffset() []uint32 {
	if m != nil {
		return m.Offset
	}
	return nil
}

type BlockSync struct {
	Start uint64 `protobuf:"varint,2,opt,name=start" json:"start,omitempty"`
	End   uint64 `protobuf:"varint,3,opt,name=end" json:"end,omitempty"`
}

func (m *BlockSync) Reset()                    { *m = BlockSync{} }
func (m *BlockSync) String() string            { return proto.CompactTextString(m) }
func (*BlockSync) ProtoMessage()               {}
func (*BlockSync) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *BlockSync) GetStart() uint64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *BlockSync) GetEnd() uint64 {
	if m != nil {
		return m.End
	}
	return 0
}

// block container
// used to send old/existing blocks in block sync
type BlockContainer struct {
	Block *BlockPb `protobuf:"bytes,1,opt,name=block" json:"block,omitempty"`
}

func (m *BlockContainer) Reset()                    { *m = BlockContainer{} }
func (m *BlockContainer) String() string            { return proto.CompactTextString(m) }
func (*BlockContainer) ProtoMessage()               {}
func (*BlockContainer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *BlockContainer) GetBlock() *BlockPb {
	if m != nil {
		return m.Block
	}
	return nil
}

type ViewChangeMsg struct {
	Vctype     ViewChangeMsg_ViewChangeType `protobuf:"varint,1,opt,name=vctype,enum=iproto.ViewChangeMsg_ViewChangeType" json:"vctype,omitempty"`
	Block      *BlockPb                     `protobuf:"bytes,2,opt,name=block" json:"block,omitempty"`
	BlockHash  []byte                       `protobuf:"bytes,3,opt,name=blockHash,proto3" json:"blockHash,omitempty"`
	SenderAddr string                       `protobuf:"bytes,4,opt,name=senderAddr" json:"senderAddr,omitempty"`
	Decision   bool                         `protobuf:"varint,5,opt,name=decision" json:"decision,omitempty"`
}

func (m *ViewChangeMsg) Reset()                    { *m = ViewChangeMsg{} }
func (m *ViewChangeMsg) String() string            { return proto.CompactTextString(m) }
func (*ViewChangeMsg) ProtoMessage()               {}
func (*ViewChangeMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *ViewChangeMsg) GetVctype() ViewChangeMsg_ViewChangeType {
	if m != nil {
		return m.Vctype
	}
	return ViewChangeMsg_INVALID_VIEW_CHANGE_TYPE
}

func (m *ViewChangeMsg) GetBlock() *BlockPb {
	if m != nil {
		return m.Block
	}
	return nil
}

func (m *ViewChangeMsg) GetBlockHash() []byte {
	if m != nil {
		return m.BlockHash
	}
	return nil
}

func (m *ViewChangeMsg) GetSenderAddr() string {
	if m != nil {
		return m.SenderAddr
	}
	return ""
}

func (m *ViewChangeMsg) GetDecision() bool {
	if m != nil {
		return m.Decision
	}
	return false
}

// Candidates and list of candidates
type Candidate struct {
	Address          string `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
	Votes            []byte `protobuf:"bytes,2,opt,name=votes,proto3" json:"votes,omitempty"`
	PubKey           []byte `protobuf:"bytes,3,opt,name=pubKey,proto3" json:"pubKey,omitempty"`
	CreationHeight   uint64 `protobuf:"varint,4,opt,name=creationHeight" json:"creationHeight,omitempty"`
	LastUpdateHeight uint64 `protobuf:"varint,5,opt,name=lastUpdateHeight" json:"lastUpdateHeight,omitempty"`
}

func (m *Candidate) Reset()                    { *m = Candidate{} }
func (m *Candidate) String() string            { return proto.CompactTextString(m) }
func (*Candidate) ProtoMessage()               {}
func (*Candidate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *Candidate) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Candidate) GetVotes() []byte {
	if m != nil {
		return m.Votes
	}
	return nil
}

func (m *Candidate) GetPubKey() []byte {
	if m != nil {
		return m.PubKey
	}
	return nil
}

func (m *Candidate) GetCreationHeight() uint64 {
	if m != nil {
		return m.CreationHeight
	}
	return 0
}

func (m *Candidate) GetLastUpdateHeight() uint64 {
	if m != nil {
		return m.LastUpdateHeight
	}
	return 0
}

type CandidateList struct {
	Candidates []*Candidate `protobuf:"bytes,1,rep,name=candidates" json:"candidates,omitempty"`
}

func (m *CandidateList) Reset()                    { *m = CandidateList{} }
func (m *CandidateList) String() string            { return proto.CompactTextString(m) }
func (*CandidateList) ProtoMessage()               {}
func (*CandidateList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *CandidateList) GetCandidates() []*Candidate {
	if m != nil {
		return m.Candidates
	}
	return nil
}

// //////////////////////////////////////////////////////////////////////////////////////////////////
// BELOW ARE DEFINITIONS FOR TEST-ONLY MESSAGES!
// //////////////////////////////////////////////////////////////////////////////////////////////////
type TestPayload struct {
	MsgBody []byte `protobuf:"bytes,1,opt,name=msg_body,json=msgBody,proto3" json:"msg_body,omitempty"`
}

func (m *TestPayload) Reset()                    { *m = TestPayload{} }
func (m *TestPayload) String() string            { return proto.CompactTextString(m) }
func (*TestPayload) ProtoMessage()               {}
func (*TestPayload) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *TestPayload) GetMsgBody() []byte {
	if m != nil {
		return m.MsgBody
	}
	return nil
}

func init() {
	proto.RegisterType((*TransferPb)(nil), "iproto.TransferPb")
	proto.RegisterType((*VotePb)(nil), "iproto.VotePb")
	proto.RegisterType((*ExecutionPb)(nil), "iproto.ExecutionPb")
	proto.RegisterType((*LogPb)(nil), "iproto.LogPb")
	proto.RegisterType((*ReceiptPb)(nil), "iproto.ReceiptPb")
	proto.RegisterType((*ActionPb)(nil), "iproto.ActionPb")
	proto.RegisterType((*BlockHeaderPb)(nil), "iproto.BlockHeaderPb")
	proto.RegisterType((*BlockPb)(nil), "iproto.BlockPb")
	proto.RegisterType((*BlockIndex)(nil), "iproto.BlockIndex")
	proto.RegisterType((*BlockSync)(nil), "iproto.BlockSync")
	proto.RegisterType((*BlockContainer)(nil), "iproto.BlockContainer")
	proto.RegisterType((*ViewChangeMsg)(nil), "iproto.ViewChangeMsg")
	proto.RegisterType((*Candidate)(nil), "iproto.Candidate")
	proto.RegisterType((*CandidateList)(nil), "iproto.CandidateList")
	proto.RegisterType((*TestPayload)(nil), "iproto.TestPayload")
	proto.RegisterEnum("iproto.ViewChangeMsg_ViewChangeType", ViewChangeMsg_ViewChangeType_name, ViewChangeMsg_ViewChangeType_value)
}

func init() { proto.RegisterFile("blockchain.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1135 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x56, 0xcb, 0x6e, 0x23, 0x45,
	0x17, 0x4e, 0xdb, 0xed, 0xdb, 0x71, 0xec, 0xf1, 0x5f, 0xff, 0x30, 0x6a, 0xd0, 0x08, 0x99, 0xd6,
	0x30, 0xb2, 0x46, 0x62, 0x04, 0x99, 0x05, 0x1b, 0x36, 0x89, 0xc7, 0xc2, 0x16, 0x61, 0xa6, 0x55,
	0x09, 0x46, 0xac, 0xa2, 0xea, 0xee, 0x4a, 0xbb, 0x15, 0xbb, 0xcb, 0xea, 0x2a, 0x87, 0xf8, 0x25,
	0x78, 0x07, 0xd8, 0xf0, 0x0a, 0x6c, 0x58, 0xc3, 0xdb, 0xf0, 0x0a, 0xa8, 0x4e, 0x55, 0xb5, 0x2f,
	0x40, 0x56, 0xe9, 0xef, 0xab, 0xe3, 0x53, 0xe7, 0xf2, 0x9d, 0x53, 0x81, 0x41, 0xbc, 0x14, 0xc9,
	0x5d, 0xb2, 0x60, 0x79, 0xf1, 0x7a, 0x5d, 0x0a, 0x25, 0x48, 0x33, 0xc7, 0xbf, 0xe1, 0x6f, 0x1e,
	0xc0, 0x75, 0xc9, 0x0a, 0x79, 0xcb, 0xcb, 0x28, 0x26, 0xcf, 0xa0, 0xc9, 0x56, 0x62, 0x53, 0xa8,
	0xc0, 0x1b, 0x7a, 0xa3, 0x53, 0x6a, 0x91, 0xe6, 0x25, 0x2f, 0x52, 0x5e, 0x06, 0xb5, 0xa1, 0x37,
	0xea, 0x50, 0x8b, 0xc8, 0x73, 0xe8, 0x94, 0x3c, 0xc9, 0xd7, 0x39, 0x2f, 0x54, 0x50, 0xc7, 0xa3,
	0x1d, 0x41, 0x02, 0x68, 0xad, 0xd9, 0x76, 0x29, 0x58, 0x1a, 0xf8, 0xe8, 0xce, 0x41, 0x12, 0xc2,
	0xa9, 0xf1, 0x10, 0x6d, 0xe2, 0x6f, 0xf8, 0x36, 0x68, 0xe0, 0xf1, 0x01, 0x47, 0x3e, 0x06, 0xc8,
	0xe5, 0x58, 0xe4, 0x45, 0xcc, 0x24, 0x0f, 0x9a, 0x43, 0x6f, 0xd4, 0xa6, 0x7b, 0x4c, 0xf8, 0x93,
	0x07, 0xcd, 0xb9, 0x50, 0x3c, 0x8a, 0x75, 0x18, 0x2a, 0x5f, 0x71, 0xa9, 0xd8, 0x6a, 0x8d, 0x91,
	0xfb, 0x74, 0x47, 0x68, 0x47, 0x92, 0x2f, 0x6f, 0xa3, 0x4d, 0x7c, 0xc7, 0xb7, 0x98, 0xc0, 0x29,
	0xdd, 0x63, 0x74, 0x30, 0xf7, 0x42, 0xf1, 0xf2, 0x3c, 0x4d, 0x4b, 0x2e, 0xa5, 0xcd, 0xe3, 0x80,
	0x73, 0x36, 0xdc, 0xd9, 0xf8, 0x3b, 0x1b, 0xc7, 0x85, 0x7f, 0x78, 0xd0, 0x9d, 0x3c, 0xf0, 0x64,
	0xa3, 0x72, 0x51, 0x3c, 0x52, 0xcc, 0x8f, 0xa0, 0xcd, 0xd1, 0x4c, 0xb8, 0x72, 0x56, 0x58, 0x9f,
	0x25, 0xa2, 0x50, 0x25, 0x4b, 0x5c, 0x3d, 0x2b, 0x4c, 0x5e, 0x42, 0xdf, 0xd9, 0xd9, 0xb2, 0x99,
	0xaa, 0x1e, 0xb1, 0x64, 0x00, 0xf5, 0x8c, 0x49, 0xac, 0xa9, 0x4f, 0xf5, 0xa7, 0xf6, 0x9a, 0x31,
	0x19, 0x95, 0x79, 0x62, 0x0a, 0xe9, 0xd3, 0x0a, 0x13, 0x02, 0x7e, 0xca, 0x14, 0x0b, 0x5a, 0xe8,
	0x0b, 0xbf, 0xc3, 0xdf, 0x3d, 0x68, 0x5c, 0x8a, 0x2c, 0x8a, 0x75, 0x0b, 0x99, 0x4d, 0xd9, 0xc3,
	0x70, 0x1c, 0xd4, 0xd9, 0x29, 0xb1, 0xce, 0x13, 0x19, 0xd4, 0x86, 0x75, 0x9d, 0x9d, 0x41, 0x95,
	0xbf, 0xfa, 0xce, 0x1f, 0x19, 0x42, 0x17, 0x15, 0xf8, 0x6e, 0xb3, 0x8a, 0x79, 0x89, 0x61, 0xfb,
	0x74, 0x9f, 0xd2, 0xf7, 0xa8, 0x87, 0x62, 0xca, 0xe4, 0xc2, 0x6a, 0xc1, 0x41, 0xdd, 0x5b, 0x34,
	0xc4, 0xb3, 0x26, 0x9e, 0xed, 0x08, 0xf2, 0x14, 0x1a, 0x79, 0x91, 0xf2, 0x07, 0x0c, 0xbf, 0x47,
	0x0d, 0x08, 0xff, 0xf4, 0xa0, 0x43, 0x79, 0xc2, 0xf3, 0xb5, 0x8a, 0x62, 0x7d, 0x7b, 0xc9, 0xd5,
	0xa6, 0x2c, 0xe6, 0x6c, 0xb9, 0xe1, 0xb6, 0x19, 0xfb, 0x14, 0xca, 0x5b, 0x31, 0xb5, 0x91, 0xd8,
	0x0f, 0x9f, 0x5a, 0xa4, 0x73, 0x59, 0xe8, 0x6b, 0x6d, 0x2e, 0xfa, 0x5b, 0x7b, 0xcb, 0x98, 0x1c,
	0x8b, 0x42, 0x6e, 0x56, 0x3c, 0x75, 0xb9, 0xec, 0x51, 0x64, 0x04, 0x4f, 0x5c, 0xcf, 0x9c, 0x5c,
	0x1a, 0x58, 0xbb, 0x63, 0x9a, 0x7c, 0x02, 0xfe, 0x52, 0x64, 0x32, 0x68, 0x0e, 0xeb, 0xa3, 0xee,
	0x59, 0xef, 0xb5, 0x19, 0xca, 0xd7, 0x58, 0x7a, 0x8a, 0x47, 0xe1, 0x5f, 0x1e, 0xb4, 0xcf, 0x13,
	0xab, 0xa8, 0x00, 0x5a, 0xf7, 0xbc, 0x94, 0xb9, 0x28, 0x30, 0x8b, 0x1e, 0x75, 0x50, 0xd7, 0xa1,
	0x10, 0x45, 0xc2, 0x6d, 0x02, 0x06, 0xe8, 0xda, 0xc9, 0x3c, 0x2b, 0x98, 0xda, 0x94, 0xdc, 0x26,
	0xb1, 0x23, 0xc8, 0xe7, 0xd0, 0x56, 0x76, 0xf4, 0x03, 0x18, 0x7a, 0xa3, 0xee, 0x19, 0x71, 0x11,
	0xec, 0x56, 0xc2, 0xf4, 0x84, 0x56, 0x56, 0xe4, 0x05, 0xf8, 0x5a, 0xf1, 0x41, 0x17, 0xad, 0xfb,
	0xce, 0xda, 0x4c, 0xe1, 0xf4, 0x84, 0xe2, 0x29, 0x79, 0x03, 0x1d, 0xee, 0xc6, 0x20, 0x38, 0x45,
	0xd3, 0xff, 0x3b, 0xd3, 0xbd, 0xf9, 0x98, 0x9e, 0xd0, 0x9d, 0xdd, 0x45, 0x1b, 0x9a, 0x0c, 0xd3,
	0x0c, 0x7f, 0xae, 0x43, 0xef, 0x02, 0x1b, 0xcc, 0x59, 0x8a, 0x5b, 0xe9, 0xbf, 0xd3, 0x0e, 0xa0,
	0x85, 0x5b, 0x6d, 0xf6, 0x16, 0x13, 0xef, 0x51, 0x07, 0x75, 0x4b, 0x17, 0x3c, 0xcf, 0x16, 0x66,
	0x8c, 0x7c, 0x6a, 0xd1, 0xe1, 0xaa, 0xf0, 0x8f, 0x57, 0xc5, 0x0b, 0xe8, 0xad, 0x4b, 0x7e, 0x7f,
	0x51, 0x09, 0xce, 0x88, 0xf1, 0x90, 0x44, 0xe9, 0x3f, 0x50, 0x21, 0x94, 0xd5, 0xa3, 0x45, 0x58,
	0x6e, 0xc5, 0x14, 0xc7, 0xa3, 0x96, 0x2d, 0xb7, 0x23, 0x8c, 0x0c, 0x51, 0x93, 0x78, 0xde, 0x76,
	0x32, 0xac, 0x28, 0x3d, 0xa6, 0x25, 0x97, 0xbc, 0xbc, 0xe7, 0x69, 0xd0, 0xc1, 0xe3, 0x0a, 0x1f,
	0xb6, 0x12, 0x8e, 0x5b, 0xf9, 0x0c, 0x9a, 0x6b, 0xb3, 0xde, 0xba, 0x26, 0x22, 0x83, 0xb4, 0x2c,
	0xd2, 0xbb, 0x6c, 0xf6, 0x16, 0xdb, 0x70, 0x4a, 0x0d, 0xd0, 0xbe, 0xd2, 0xbb, 0xcc, 0xee, 0xc3,
	0x9e, 0xf1, 0x55, 0x11, 0x7a, 0xd5, 0xa5, 0x77, 0xd9, 0x55, 0x75, 0x59, 0xdf, 0xec, 0xe6, 0x7d,
	0x2e, 0x4c, 0xa1, 0x85, 0xe5, 0x88, 0x62, 0xf2, 0x99, 0x2e, 0xb4, 0x6e, 0x14, 0xf6, 0xa6, 0x7b,
	0xf6, 0x81, 0x6b, 0xf5, 0x41, 0x0f, 0xa9, 0x35, 0x22, 0xaf, 0xa0, 0x65, 0xfa, 0x6c, 0xf6, 0x46,
	0xf7, 0x6c, 0xe0, 0xec, 0x9d, 0xca, 0xa9, 0x33, 0x08, 0x2f, 0x01, 0xd0, 0xc9, 0x4c, 0x0f, 0xb5,
	0xce, 0x45, 0x2a, 0x56, 0x2a, 0xbb, 0xe0, 0x0d, 0xd0, 0xcb, 0x8e, 0x17, 0xa9, 0x95, 0xbd, 0xfe,
	0xd4, 0xb5, 0x10, 0xb7, 0xb7, 0x92, 0xeb, 0xce, 0xd7, 0x47, 0x3d, 0x6a, 0x51, 0xf8, 0x06, 0x3a,
	0xe8, 0xed, 0x6a, 0x5b, 0x24, 0x3b, 0x67, 0xb5, 0x7f, 0x71, 0x56, 0xaf, 0x9c, 0x85, 0x5f, 0x42,
	0x1f, 0x7f, 0x34, 0x16, 0x85, 0x62, 0x79, 0xc1, 0x4b, 0xf2, 0x29, 0x34, 0x70, 0xfd, 0xd8, 0x74,
	0x9f, 0x1c, 0xa4, 0x1b, 0xc5, 0xd4, 0x9c, 0x86, 0xbf, 0xd4, 0xa0, 0x37, 0xcf, 0xf9, 0x8f, 0xe3,
	0x05, 0x2b, 0x32, 0xfe, 0xad, 0xcc, 0xc8, 0x57, 0xd0, 0xbc, 0x4f, 0xd4, 0x76, 0x6d, 0x36, 0x50,
	0xff, 0xec, 0x45, 0x35, 0x3e, 0xfb, 0x66, 0x7b, 0xe8, 0x7a, 0xbb, 0xe6, 0xd4, 0xfe, 0x66, 0x77,
	0x6d, 0xed, 0xb1, 0x6b, 0x0f, 0xb7, 0x65, 0xfd, 0x78, 0x5b, 0xe2, 0x4b, 0xa8, 0x9f, 0x58, 0xbd,
	0x80, 0xec, 0x1b, 0xb6, 0xc7, 0x68, 0x01, 0xa6, 0x3c, 0xc9, 0x71, 0xd2, 0x1a, 0xf8, 0xe0, 0x56,
	0x38, 0xa4, 0xd0, 0x3f, 0x0c, 0x8d, 0x3c, 0x87, 0x60, 0xf6, 0x6e, 0x7e, 0x7e, 0x39, 0x7b, 0x7b,
	0x33, 0x9f, 0x4d, 0xbe, 0xbf, 0x19, 0x4f, 0xcf, 0xdf, 0x7d, 0x3d, 0xb9, 0xb9, 0xfe, 0x21, 0x9a,
	0x0c, 0x4e, 0x48, 0x17, 0x5a, 0x11, 0x7d, 0x1f, 0xbd, 0xbf, 0x9a, 0x0c, 0x3c, 0x03, 0x26, 0xf3,
	0xf7, 0xd7, 0x93, 0x41, 0x8d, 0xb4, 0xc1, 0xc7, 0xaf, 0x7a, 0xf8, 0xab, 0x07, 0x9d, 0x31, 0x2b,
	0xd2, 0x3c, 0x65, 0x8a, 0x3f, 0xf2, 0xd6, 0x3c, 0x85, 0x86, 0xde, 0x2c, 0xd2, 0x3e, 0xde, 0x06,
	0x58, 0xd1, 0xeb, 0x77, 0xb0, 0x5e, 0x89, 0x5e, 0xbf, 0x7f, 0x2f, 0xa1, 0x9f, 0x94, 0x9c, 0x69,
	0x0d, 0x4d, 0xcd, 0x0a, 0x30, 0x73, 0x7e, 0xc4, 0x92, 0x57, 0x30, 0x58, 0x32, 0xa9, 0xbe, 0x5b,
	0xeb, 0xdb, 0xad, 0xa5, 0x79, 0x34, 0xff, 0xc1, 0x87, 0x17, 0xd0, 0xab, 0x02, 0xbd, 0xcc, 0xa5,
	0x22, 0x5f, 0x00, 0x24, 0x8e, 0xd0, 0xf1, 0x6a, 0x29, 0xff, 0xcf, 0x35, 0xa5, 0x32, 0xa5, 0x7b,
	0x46, 0xe1, 0x08, 0xba, 0xd7, 0x5c, 0xaa, 0xc8, 0xfe, 0x0f, 0xf4, 0x21, 0xb4, 0x57, 0x32, 0xbb,
	0x89, 0x45, 0xba, 0xb5, 0x6f, 0x52, 0x6b, 0x25, 0xb3, 0x0b, 0x91, 0x6e, 0xe3, 0x26, 0xba, 0x79,
	0xf3, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0xfd, 0xe1, 0xa0, 0xf9, 0xb8, 0x09, 0x00, 0x00,
}
