// Code generated by protoc-gen-go. DO NOT EDIT.
// source: blockchain.proto

/*
Package iproto is a generated protocol buffer package.

It is generated from these files:
	blockchain.proto
	rpc.proto
	utxo.proto

It has these top-level messages:
	TxInputPb
	TxOutputPb
	TxPb
	VotePb
	ActionPb
	BlockHeaderPb
	BlockPb
	BlockIndex
	PingMsg
	PongMsg
	BlockSync
	BlockContainer
	ViewChangeMsg
	TestPayload
	CreateRawTxRequest
	CreateRawTxReply
	SendTxRequest
	SendTxReply
	UtxoPb
	UtxoEntryPb
	UtxoMapPb
*/
package iproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ViewChangeMsg_ViewChangeType int32

const (
	ViewChangeMsg_INVALID_VIEW_CHANGE_TYPE ViewChangeMsg_ViewChangeType = 0
	ViewChangeMsg_PROPOSE                  ViewChangeMsg_ViewChangeType = 1
	ViewChangeMsg_PREVOTE                  ViewChangeMsg_ViewChangeType = 2
	ViewChangeMsg_VOTE                     ViewChangeMsg_ViewChangeType = 3
)

var ViewChangeMsg_ViewChangeType_name = map[int32]string{
	0: "INVALID_VIEW_CHANGE_TYPE",
	1: "PROPOSE",
	2: "PREVOTE",
	3: "VOTE",
}
var ViewChangeMsg_ViewChangeType_value = map[string]int32{
	"INVALID_VIEW_CHANGE_TYPE": 0,
	"PROPOSE":                  1,
	"PREVOTE":                  2,
	"VOTE":                     3,
}

func (x ViewChangeMsg_ViewChangeType) String() string {
	return proto.EnumName(ViewChangeMsg_ViewChangeType_name, int32(x))
}
func (ViewChangeMsg_ViewChangeType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{12, 0}
}

type TxInputPb struct {
	TxHash           []byte `protobuf:"bytes,1,opt,name=txHash,proto3" json:"txHash,omitempty"`
	OutIndex         int32  `protobuf:"varint,2,opt,name=outIndex" json:"outIndex,omitempty"`
	UnlockScriptSize uint32 `protobuf:"varint,3,opt,name=unlockScriptSize" json:"unlockScriptSize,omitempty"`
	UnlockScript     []byte `protobuf:"bytes,4,opt,name=unlockScript,proto3" json:"unlockScript,omitempty"`
	Sequence         uint32 `protobuf:"varint,5,opt,name=sequence" json:"sequence,omitempty"`
}

func (m *TxInputPb) Reset()                    { *m = TxInputPb{} }
func (m *TxInputPb) String() string            { return proto.CompactTextString(m) }
func (*TxInputPb) ProtoMessage()               {}
func (*TxInputPb) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *TxInputPb) GetTxHash() []byte {
	if m != nil {
		return m.TxHash
	}
	return nil
}

func (m *TxInputPb) GetOutIndex() int32 {
	if m != nil {
		return m.OutIndex
	}
	return 0
}

func (m *TxInputPb) GetUnlockScriptSize() uint32 {
	if m != nil {
		return m.UnlockScriptSize
	}
	return 0
}

func (m *TxInputPb) GetUnlockScript() []byte {
	if m != nil {
		return m.UnlockScript
	}
	return nil
}

func (m *TxInputPb) GetSequence() uint32 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

// TxOutput stores “coins”. It is indivisible, which means that you cannot reference a part of its value.
// When an output is referenced in a new transaction, it’s spent as a whole. And if its value is greater than required,
// a change is generated and sent back to the sender.
type TxOutputPb struct {
	Value          uint64 `protobuf:"varint,1,opt,name=value" json:"value,omitempty"`
	LockScriptSize uint32 `protobuf:"varint,2,opt,name=lockScriptSize" json:"lockScriptSize,omitempty"`
	LockScript     []byte `protobuf:"bytes,3,opt,name=lockScript,proto3" json:"lockScript,omitempty"`
}

func (m *TxOutputPb) Reset()                    { *m = TxOutputPb{} }
func (m *TxOutputPb) String() string            { return proto.CompactTextString(m) }
func (*TxOutputPb) ProtoMessage()               {}
func (*TxOutputPb) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *TxOutputPb) GetValue() uint64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *TxOutputPb) GetLockScriptSize() uint32 {
	if m != nil {
		return m.LockScriptSize
	}
	return 0
}

func (m *TxOutputPb) GetLockScript() []byte {
	if m != nil {
		return m.LockScript
	}
	return nil
}

type TxPb struct {
	Version  uint32        `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	NumTxIn  uint32        `protobuf:"varint,2,opt,name=numTxIn" json:"numTxIn,omitempty"`
	TxIn     []*TxInputPb  `protobuf:"bytes,3,rep,name=txIn" json:"txIn,omitempty"`
	NumTxOut uint32        `protobuf:"varint,4,opt,name=numTxOut" json:"numTxOut,omitempty"`
	TxOut    []*TxOutputPb `protobuf:"bytes,5,rep,name=txOut" json:"txOut,omitempty"`
	LockTime uint32        `protobuf:"varint,6,opt,name=lockTime" json:"lockTime,omitempty"`
}

func (m *TxPb) Reset()                    { *m = TxPb{} }
func (m *TxPb) String() string            { return proto.CompactTextString(m) }
func (*TxPb) ProtoMessage()               {}
func (*TxPb) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *TxPb) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *TxPb) GetNumTxIn() uint32 {
	if m != nil {
		return m.NumTxIn
	}
	return 0
}

func (m *TxPb) GetTxIn() []*TxInputPb {
	if m != nil {
		return m.TxIn
	}
	return nil
}

func (m *TxPb) GetNumTxOut() uint32 {
	if m != nil {
		return m.NumTxOut
	}
	return 0
}

func (m *TxPb) GetTxOut() []*TxOutputPb {
	if m != nil {
		return m.TxOut
	}
	return nil
}

func (m *TxPb) GetLockTime() uint32 {
	if m != nil {
		return m.LockTime
	}
	return 0
}

type VotePb struct {
	Timestamp  uint32 `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	SelfPubkey string `protobuf:"bytes,2,opt,name=selfPubkey" json:"selfPubkey,omitempty"`
	VotePubkey string `protobuf:"bytes,3,opt,name=votePubkey" json:"votePubkey,omitempty"`
	Signature  []byte `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *VotePb) Reset()                    { *m = VotePb{} }
func (m *VotePb) String() string            { return proto.CompactTextString(m) }
func (*VotePb) ProtoMessage()               {}
func (*VotePb) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *VotePb) GetTimestamp() uint32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *VotePb) GetSelfPubkey() string {
	if m != nil {
		return m.SelfPubkey
	}
	return ""
}

func (m *VotePb) GetVotePubkey() string {
	if m != nil {
		return m.VotePubkey
	}
	return ""
}

func (m *VotePb) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type ActionPb struct {
	// Types that are valid to be assigned to Action:
	//	*ActionPb_Tx
	//	*ActionPb_Vote
	Action isActionPb_Action `protobuf_oneof:"action"`
}

func (m *ActionPb) Reset()                    { *m = ActionPb{} }
func (m *ActionPb) String() string            { return proto.CompactTextString(m) }
func (*ActionPb) ProtoMessage()               {}
func (*ActionPb) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type isActionPb_Action interface {
	isActionPb_Action()
}

type ActionPb_Tx struct {
	Tx *TxPb `protobuf:"bytes,1,opt,name=tx,oneof"`
}
type ActionPb_Vote struct {
	Vote *VotePb `protobuf:"bytes,2,opt,name=vote,oneof"`
}

func (*ActionPb_Tx) isActionPb_Action()   {}
func (*ActionPb_Vote) isActionPb_Action() {}

func (m *ActionPb) GetAction() isActionPb_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (m *ActionPb) GetTx() *TxPb {
	if x, ok := m.GetAction().(*ActionPb_Tx); ok {
		return x.Tx
	}
	return nil
}

func (m *ActionPb) GetVote() *VotePb {
	if x, ok := m.GetAction().(*ActionPb_Vote); ok {
		return x.Vote
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ActionPb) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ActionPb_OneofMarshaler, _ActionPb_OneofUnmarshaler, _ActionPb_OneofSizer, []interface{}{
		(*ActionPb_Tx)(nil),
		(*ActionPb_Vote)(nil),
	}
}

func _ActionPb_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ActionPb)
	// action
	switch x := m.Action.(type) {
	case *ActionPb_Tx:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Tx); err != nil {
			return err
		}
	case *ActionPb_Vote:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Vote); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ActionPb.Action has unexpected type %T", x)
	}
	return nil
}

func _ActionPb_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ActionPb)
	switch tag {
	case 1: // action.tx
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TxPb)
		err := b.DecodeMessage(msg)
		m.Action = &ActionPb_Tx{msg}
		return true, err
	case 2: // action.vote
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(VotePb)
		err := b.DecodeMessage(msg)
		m.Action = &ActionPb_Vote{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ActionPb_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ActionPb)
	// action
	switch x := m.Action.(type) {
	case *ActionPb_Tx:
		s := proto.Size(x.Tx)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ActionPb_Vote:
		s := proto.Size(x.Vote)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// header of a block
type BlockHeaderPb struct {
	Version       uint32 `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	ChainID       uint32 `protobuf:"varint,2,opt,name=chainID" json:"chainID,omitempty"`
	Height        uint64 `protobuf:"varint,3,opt,name=height" json:"height,omitempty"`
	Timestamp     uint64 `protobuf:"varint,4,opt,name=timestamp" json:"timestamp,omitempty"`
	PrevBlockHash []byte `protobuf:"bytes,5,opt,name=prevBlockHash,proto3" json:"prevBlockHash,omitempty"`
	MerkleRoot    []byte `protobuf:"bytes,6,opt,name=merkleRoot,proto3" json:"merkleRoot,omitempty"`
	TrnxNumber    uint32 `protobuf:"varint,7,opt,name=trnxNumber" json:"trnxNumber,omitempty"`
	TrnxDataSize  uint32 `protobuf:"varint,8,opt,name=trnxDataSize" json:"trnxDataSize,omitempty"`
	Signature     []byte `protobuf:"bytes,9,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *BlockHeaderPb) Reset()                    { *m = BlockHeaderPb{} }
func (m *BlockHeaderPb) String() string            { return proto.CompactTextString(m) }
func (*BlockHeaderPb) ProtoMessage()               {}
func (*BlockHeaderPb) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *BlockHeaderPb) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *BlockHeaderPb) GetChainID() uint32 {
	if m != nil {
		return m.ChainID
	}
	return 0
}

func (m *BlockHeaderPb) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *BlockHeaderPb) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *BlockHeaderPb) GetPrevBlockHash() []byte {
	if m != nil {
		return m.PrevBlockHash
	}
	return nil
}

func (m *BlockHeaderPb) GetMerkleRoot() []byte {
	if m != nil {
		return m.MerkleRoot
	}
	return nil
}

func (m *BlockHeaderPb) GetTrnxNumber() uint32 {
	if m != nil {
		return m.TrnxNumber
	}
	return 0
}

func (m *BlockHeaderPb) GetTrnxDataSize() uint32 {
	if m != nil {
		return m.TrnxDataSize
	}
	return 0
}

func (m *BlockHeaderPb) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

// block consists of header followed by transactions
// hash of current block can be computed from header hence not stored
type BlockPb struct {
	Header  *BlockHeaderPb `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Actions []*ActionPb    `protobuf:"bytes,2,rep,name=actions" json:"actions,omitempty"`
}

func (m *BlockPb) Reset()                    { *m = BlockPb{} }
func (m *BlockPb) String() string            { return proto.CompactTextString(m) }
func (*BlockPb) ProtoMessage()               {}
func (*BlockPb) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *BlockPb) GetHeader() *BlockHeaderPb {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *BlockPb) GetActions() []*ActionPb {
	if m != nil {
		return m.Actions
	}
	return nil
}

// index of block raw data file
type BlockIndex struct {
	Start  uint64   `protobuf:"varint,1,opt,name=start" json:"start,omitempty"`
	End    uint64   `protobuf:"varint,2,opt,name=end" json:"end,omitempty"`
	Offset []uint32 `protobuf:"varint,3,rep,packed,name=offset" json:"offset,omitempty"`
}

func (m *BlockIndex) Reset()                    { *m = BlockIndex{} }
func (m *BlockIndex) String() string            { return proto.CompactTextString(m) }
func (*BlockIndex) ProtoMessage()               {}
func (*BlockIndex) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *BlockIndex) GetStart() uint64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *BlockIndex) GetEnd() uint64 {
	if m != nil {
		return m.End
	}
	return 0
}

func (m *BlockIndex) GetOffset() []uint32 {
	if m != nil {
		return m.Offset
	}
	return nil
}

// //////////////////////////////////////////////////////////////////////////////////////////////////
// BELOW ARE DEFINITIONS FOR ON-WIRE MESSAGES!
// //////////////////////////////////////////////////////////////////////////////////////////////////
type PingMsg struct {
	Nonce uint64 `protobuf:"varint,1,opt,name=nonce" json:"nonce,omitempty"`
}

func (m *PingMsg) Reset()                    { *m = PingMsg{} }
func (m *PingMsg) String() string            { return proto.CompactTextString(m) }
func (*PingMsg) ProtoMessage()               {}
func (*PingMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *PingMsg) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

type PongMsg struct {
	AckNonce uint64 `protobuf:"varint,1,opt,name=ack_nonce,json=ackNonce" json:"ack_nonce,omitempty"`
}

func (m *PongMsg) Reset()                    { *m = PongMsg{} }
func (m *PongMsg) String() string            { return proto.CompactTextString(m) }
func (*PongMsg) ProtoMessage()               {}
func (*PongMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *PongMsg) GetAckNonce() uint64 {
	if m != nil {
		return m.AckNonce
	}
	return 0
}

type BlockSync struct {
	Start uint64 `protobuf:"varint,2,opt,name=start" json:"start,omitempty"`
	End   uint64 `protobuf:"varint,3,opt,name=end" json:"end,omitempty"`
}

func (m *BlockSync) Reset()                    { *m = BlockSync{} }
func (m *BlockSync) String() string            { return proto.CompactTextString(m) }
func (*BlockSync) ProtoMessage()               {}
func (*BlockSync) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *BlockSync) GetStart() uint64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *BlockSync) GetEnd() uint64 {
	if m != nil {
		return m.End
	}
	return 0
}

// block container
// used to send old/existing blocks in block sync
type BlockContainer struct {
	Block *BlockPb `protobuf:"bytes,1,opt,name=block" json:"block,omitempty"`
}

func (m *BlockContainer) Reset()                    { *m = BlockContainer{} }
func (m *BlockContainer) String() string            { return proto.CompactTextString(m) }
func (*BlockContainer) ProtoMessage()               {}
func (*BlockContainer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *BlockContainer) GetBlock() *BlockPb {
	if m != nil {
		return m.Block
	}
	return nil
}

type ViewChangeMsg struct {
	Vctype     ViewChangeMsg_ViewChangeType `protobuf:"varint,1,opt,name=vctype,enum=iproto.ViewChangeMsg_ViewChangeType" json:"vctype,omitempty"`
	Block      *BlockPb                     `protobuf:"bytes,2,opt,name=block" json:"block,omitempty"`
	BlockHash  []byte                       `protobuf:"bytes,3,opt,name=blockHash,proto3" json:"blockHash,omitempty"`
	SenderAddr string                       `protobuf:"bytes,4,opt,name=senderAddr" json:"senderAddr,omitempty"`
}

func (m *ViewChangeMsg) Reset()                    { *m = ViewChangeMsg{} }
func (m *ViewChangeMsg) String() string            { return proto.CompactTextString(m) }
func (*ViewChangeMsg) ProtoMessage()               {}
func (*ViewChangeMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *ViewChangeMsg) GetVctype() ViewChangeMsg_ViewChangeType {
	if m != nil {
		return m.Vctype
	}
	return ViewChangeMsg_INVALID_VIEW_CHANGE_TYPE
}

func (m *ViewChangeMsg) GetBlock() *BlockPb {
	if m != nil {
		return m.Block
	}
	return nil
}

func (m *ViewChangeMsg) GetBlockHash() []byte {
	if m != nil {
		return m.BlockHash
	}
	return nil
}

func (m *ViewChangeMsg) GetSenderAddr() string {
	if m != nil {
		return m.SenderAddr
	}
	return ""
}

// //////////////////////////////////////////////////////////////////////////////////////////////////
// BELOW ARE DEFINITIONS FOR TEST-ONLY MESSAGES!
// //////////////////////////////////////////////////////////////////////////////////////////////////
type TestPayload struct {
	MsgBody []byte `protobuf:"bytes,1,opt,name=msg_body,json=msgBody,proto3" json:"msg_body,omitempty"`
}

func (m *TestPayload) Reset()                    { *m = TestPayload{} }
func (m *TestPayload) String() string            { return proto.CompactTextString(m) }
func (*TestPayload) ProtoMessage()               {}
func (*TestPayload) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *TestPayload) GetMsgBody() []byte {
	if m != nil {
		return m.MsgBody
	}
	return nil
}

func init() {
	proto.RegisterType((*TxInputPb)(nil), "iproto.TxInputPb")
	proto.RegisterType((*TxOutputPb)(nil), "iproto.TxOutputPb")
	proto.RegisterType((*TxPb)(nil), "iproto.TxPb")
	proto.RegisterType((*VotePb)(nil), "iproto.VotePb")
	proto.RegisterType((*ActionPb)(nil), "iproto.ActionPb")
	proto.RegisterType((*BlockHeaderPb)(nil), "iproto.BlockHeaderPb")
	proto.RegisterType((*BlockPb)(nil), "iproto.BlockPb")
	proto.RegisterType((*BlockIndex)(nil), "iproto.BlockIndex")
	proto.RegisterType((*PingMsg)(nil), "iproto.PingMsg")
	proto.RegisterType((*PongMsg)(nil), "iproto.PongMsg")
	proto.RegisterType((*BlockSync)(nil), "iproto.BlockSync")
	proto.RegisterType((*BlockContainer)(nil), "iproto.BlockContainer")
	proto.RegisterType((*ViewChangeMsg)(nil), "iproto.ViewChangeMsg")
	proto.RegisterType((*TestPayload)(nil), "iproto.TestPayload")
	proto.RegisterEnum("iproto.ViewChangeMsg_ViewChangeType", ViewChangeMsg_ViewChangeType_name, ViewChangeMsg_ViewChangeType_value)
}

func init() { proto.RegisterFile("blockchain.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 839 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x55, 0x4d, 0x8f, 0xe3, 0x44,
	0x10, 0x9d, 0x38, 0xce, 0x57, 0x65, 0x12, 0x42, 0x6b, 0x41, 0x06, 0x56, 0xcb, 0xc8, 0x9a, 0x5d,
	0x45, 0x2b, 0x31, 0x87, 0xd9, 0x03, 0x17, 0x2e, 0xf3, 0x11, 0x91, 0x48, 0xc3, 0xc4, 0xea, 0x89,
	0x82, 0xe0, 0x12, 0xb5, 0xed, 0x9e, 0xc4, 0x24, 0xe9, 0x0e, 0x76, 0x3b, 0x24, 0x9c, 0x11, 0xff,
	0x83, 0x33, 0x3f, 0x83, 0x3f, 0x86, 0xba, 0xda, 0x8e, 0xed, 0x01, 0xc1, 0x69, 0xf2, 0x5e, 0x95,
	0xab, 0x5e, 0xbd, 0xee, 0xea, 0x81, 0x81, 0xbf, 0x91, 0xc1, 0x3a, 0x58, 0xb1, 0x48, 0x5c, 0xed,
	0x62, 0xa9, 0x24, 0x69, 0x46, 0xf8, 0xd7, 0xfd, 0xb3, 0x06, 0x9d, 0xd9, 0x61, 0x22, 0x76, 0xa9,
	0xf2, 0x7c, 0xf2, 0x29, 0x34, 0xd5, 0x61, 0xcc, 0x92, 0x95, 0x53, 0xbb, 0xa8, 0x0d, 0xcf, 0x69,
	0x86, 0xc8, 0xe7, 0xd0, 0x96, 0xa9, 0x9a, 0x88, 0x90, 0x1f, 0x1c, 0xeb, 0xa2, 0x36, 0x6c, 0xd0,
	0x13, 0x26, 0xef, 0x61, 0x90, 0x0a, 0x5d, 0xfe, 0x29, 0x88, 0xa3, 0x9d, 0x7a, 0x8a, 0x7e, 0xe5,
	0x4e, 0xfd, 0xa2, 0x36, 0xec, 0xd1, 0x7f, 0xf0, 0xc4, 0x85, 0xf3, 0x32, 0xe7, 0xd8, 0xd8, 0xa5,
	0xc2, 0xe9, 0x5e, 0x09, 0xff, 0x39, 0xe5, 0x22, 0xe0, 0x4e, 0x03, 0xeb, 0x9c, 0xb0, 0xfb, 0x13,
	0xc0, 0xec, 0x30, 0x4d, 0x95, 0x51, 0xfb, 0x0a, 0x1a, 0x7b, 0xb6, 0x49, 0x39, 0x8a, 0xb5, 0xa9,
	0x01, 0xe4, 0x1d, 0xf4, 0x5f, 0xa8, 0xb1, 0xb0, 0xca, 0x0b, 0x96, 0xbc, 0x01, 0x28, 0x29, 0xa9,
	0xa3, 0x92, 0x12, 0xe3, 0xfe, 0x55, 0x03, 0x7b, 0x76, 0xf0, 0x7c, 0xe2, 0x40, 0x6b, 0xcf, 0xe3,
	0x24, 0x92, 0x02, 0x1b, 0xf5, 0x68, 0x0e, 0x75, 0x44, 0xa4, 0x5b, 0x6d, 0x5f, 0xd6, 0x23, 0x87,
	0xe4, 0x2d, 0xd8, 0x4a, 0xd3, 0xf5, 0x8b, 0xfa, 0xb0, 0x7b, 0xfd, 0xf1, 0x95, 0x71, 0xfb, 0xea,
	0xe4, 0x34, 0xc5, 0xb0, 0x9e, 0x15, 0xbf, 0x98, 0xa6, 0xc6, 0x8b, 0x1e, 0x3d, 0x61, 0x32, 0x84,
	0x86, 0xc2, 0x40, 0x03, 0x6b, 0x90, 0xa2, 0x46, 0x6e, 0x00, 0x35, 0x09, 0xba, 0x8a, 0xd6, 0x3d,
	0x8b, 0xb6, 0xdc, 0x69, 0x9a, 0x2a, 0x39, 0x76, 0x7f, 0xab, 0x41, 0x73, 0x2e, 0x15, 0xf7, 0x7c,
	0xf2, 0x1a, 0x3a, 0x2a, 0xda, 0xf2, 0x44, 0xb1, 0xed, 0x2e, 0x9b, 0xa4, 0x20, 0xb4, 0x1d, 0x09,
	0xdf, 0x3c, 0x7b, 0xa9, 0xbf, 0xe6, 0x47, 0x1c, 0xa7, 0x43, 0x4b, 0x8c, 0x8e, 0xef, 0x75, 0x1d,
	0x13, 0xaf, 0x9b, 0x78, 0xc1, 0xe8, 0xea, 0x49, 0xb4, 0x14, 0x4c, 0xa5, 0x31, 0xcf, 0xce, 0xb5,
	0x20, 0xdc, 0x1f, 0xa1, 0x7d, 0x13, 0xa8, 0x48, 0x0a, 0xcf, 0x27, 0x6f, 0xc0, 0x52, 0x07, 0x14,
	0xd0, 0xbd, 0x3e, 0x2f, 0xa6, 0xf2, 0xfc, 0xf1, 0x19, 0xb5, 0xd4, 0x81, 0x5c, 0x82, 0xad, 0xeb,
	0xa2, 0x86, 0xee, 0x75, 0x3f, 0xcf, 0x30, 0x53, 0x8c, 0xcf, 0x28, 0x46, 0x6f, 0xdb, 0xd0, 0x64,
	0x58, 0xd1, 0xfd, 0xc3, 0x82, 0xde, 0xad, 0x1e, 0x78, 0xcc, 0x59, 0xc8, 0xe3, 0xff, 0x3b, 0x31,
	0xdc, 0x82, 0xc9, 0x7d, 0x7e, 0x62, 0x19, 0xd4, 0x57, 0x7f, 0xc5, 0xa3, 0xe5, 0xca, 0x5c, 0x05,
	0x9b, 0x66, 0xa8, 0xea, 0x9a, 0x8d, 0xa1, 0x92, 0x6b, 0x97, 0xd0, 0xdb, 0xc5, 0x7c, 0x6f, 0xda,
	0xeb, 0xbd, 0x69, 0xe0, 0xe4, 0x55, 0x52, 0x7b, 0xb7, 0xe5, 0xf1, 0x7a, 0xc3, 0xa9, 0x94, 0x0a,
	0x8f, 0xe8, 0x9c, 0x96, 0x18, 0x1d, 0x57, 0xb1, 0x38, 0x3c, 0xa6, 0x5b, 0x9f, 0xc7, 0x4e, 0x0b,
	0x85, 0x95, 0x18, 0xbd, 0x36, 0x1a, 0xdd, 0x33, 0xc5, 0xf0, 0x42, 0xb7, 0x31, 0xa3, 0xc2, 0x55,
	0xfd, 0xef, 0xbc, 0xf4, 0x3f, 0x84, 0x16, 0xca, 0xf1, 0x7c, 0xf2, 0x95, 0x1e, 0x54, 0x1b, 0x95,
	0x1d, 0xc1, 0x27, 0xb9, 0xc1, 0x15, 0x0f, 0x69, 0x96, 0x44, 0xde, 0x43, 0xcb, 0xf8, 0x9c, 0x38,
	0x16, 0x5e, 0xc4, 0x41, 0x9e, 0x9f, 0x1f, 0x28, 0xcd, 0x13, 0xdc, 0x07, 0x00, 0x2c, 0x62, 0x1e,
	0x86, 0x57, 0xd0, 0x48, 0x14, 0x8b, 0x55, 0xbe, 0x9e, 0x08, 0xc8, 0x00, 0xea, 0x5c, 0x84, 0xe8,
	0xbe, 0x4d, 0xf5, 0x4f, 0xed, 0xbc, 0x7c, 0x7e, 0x4e, 0xb8, 0xc2, 0x6d, 0xe9, 0xd1, 0x0c, 0xb9,
	0x5f, 0x42, 0xcb, 0x8b, 0xc4, 0xf2, 0xbb, 0x64, 0xa9, 0x4b, 0x09, 0xa9, 0x1f, 0x84, 0xac, 0x14,
	0x02, 0xf7, 0x1d, 0xb4, 0x3c, 0x69, 0x12, 0xbe, 0x80, 0x0e, 0x0b, 0xd6, 0x8b, 0x72, 0x52, 0x9b,
	0x05, 0xeb, 0x47, 0xcc, 0xfb, 0x00, 0x1d, 0x94, 0xf5, 0x74, 0x14, 0x41, 0xa1, 0xca, 0xfa, 0x17,
	0x55, 0xf5, 0x93, 0x2a, 0xf7, 0x6b, 0xe8, 0xe3, 0x47, 0x77, 0x52, 0x28, 0x16, 0x09, 0x1e, 0x93,
	0xb7, 0xd0, 0xc0, 0x67, 0x34, 0xf3, 0xed, 0xa3, 0x8a, 0x6f, 0x7a, 0x1b, 0x31, 0xea, 0xfe, 0x6e,
	0x41, 0x6f, 0x1e, 0xf1, 0x5f, 0xee, 0x56, 0x4c, 0x2c, 0xb9, 0x16, 0xf7, 0x0d, 0x34, 0xf7, 0x81,
	0x3a, 0xee, 0x8c, 0xb2, 0xfe, 0xf5, 0xe5, 0xe9, 0x4a, 0x97, 0xd3, 0x4a, 0x68, 0x76, 0xdc, 0x71,
	0x9a, 0x7d, 0x53, 0xb4, 0xb5, 0xfe, 0xab, 0xad, 0x3e, 0x7f, 0xff, 0x74, 0x0b, 0xcd, 0x6b, 0x56,
	0x10, 0x66, 0xbb, 0x45, 0xc8, 0xe3, 0x9b, 0x30, 0x8c, 0xf1, 0x1a, 0xe3, 0x76, 0xe7, 0x8c, 0x4b,
	0xa1, 0x5f, 0x6d, 0x4f, 0x5e, 0x83, 0x33, 0x79, 0x9c, 0xdf, 0x3c, 0x4c, 0xee, 0x17, 0xf3, 0xc9,
	0xe8, 0xfb, 0xc5, 0xdd, 0xf8, 0xe6, 0xf1, 0xdb, 0xd1, 0x62, 0xf6, 0x83, 0x37, 0x1a, 0x9c, 0x91,
	0x2e, 0xb4, 0x3c, 0x3a, 0xf5, 0xa6, 0x4f, 0xa3, 0x41, 0xcd, 0x80, 0xd1, 0x7c, 0x3a, 0x1b, 0x0d,
	0x2c, 0xd2, 0x06, 0x1b, 0x7f, 0xd5, 0xdd, 0x21, 0x74, 0x67, 0x3c, 0x51, 0x1e, 0x3b, 0x6e, 0x24,
	0x0b, 0xc9, 0x67, 0xd0, 0xde, 0x26, 0xcb, 0x85, 0x2f, 0xc3, 0x63, 0xf6, 0xdf, 0xa5, 0xb5, 0x4d,
	0x96, 0xb7, 0x32, 0x3c, 0xfa, 0x4d, 0x9c, 0xe8, 0xc3, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x53,
	0x72, 0xa7, 0x8e, 0xa7, 0x06, 0x00, 0x00,
}
