// Copyright (c) 2018 IoTeX
// This is an alpha (internal) release and is not suitable for production. This source code is provided 'as is' and no
// warranties are given as to title or non-infringement, merchantability or fitness for purpose and, to the extent
// permitted by law, all liability for your use of the code is disclaimed. This source code is governed by Apache
// License 2.0 that can be found in the LICENSE file.

// To compile the proto, run:
//      protoc --go_out=plugins=grpc:. *.proto
syntax = "proto3";
option go_package = "github.com/iotexproject/iotex-core/proto";
package iproto;

import "action.proto";
import "google/protobuf/timestamp.proto";
import "endorsement.proto";

// header of a block
message BlockHeaderPb {
    uint32 version = 1;
    uint32 chainID = 2;
    uint64 height = 3;
    google.protobuf.Timestamp timestamp = 4;
    bytes prevBlockHash = 5;
    bytes txRoot = 6;
    bytes stateRoot = 7;
    bytes deltaStateDigest = 8;
    bytes receiptRoot = 9;
    bytes reserved = 10;
    bytes signature = 11;
    bytes pubkey = 12;
}

// footer of a block
message BlockFooterPb {
    int64 CommitTimestamp = 1;
    EndorsementSet endorsements = 2;
}

// block consists of header followed by transactions
// hash of current block can be computed from header hence not stored
message BlockPb {
    BlockHeaderPb header = 1;
    repeated ActionPb actions = 2;
    BlockFooterPb footer = 3;
}

// Receipts consists of a collection of recepit
message Receipts {
    repeated ReceiptPb receipts = 1;
}

// index of block raw data file
message BlockIndex {
    uint64 start = 1;
    uint64 end = 2;
    repeated uint32 offset = 3;
}

message BlockSync {
    uint64 start = 2;
    uint64 end = 3;
}

// block container
// used to send old/existing blocks in block sync
message BlockContainer {
    BlockPb block = 1;
}

message ConsensusPb {
    enum ConsensusMessageType {
        PROPOSAL = 0;
        ENDORSEMENT = 1;
        // TODO: Unify ConsensusVoteTopic and ConsensusMessageType
    }
    uint64 height = 1;
    uint32 round = 2;
    ConsensusMessageType type = 3;
    google.protobuf.Timestamp timestamp = 4;
    bytes data = 5;
}

// Candidates and list of candidates
message Candidate {
    string address = 1;
    bytes votes = 2;
    bytes pubKey = 3;
    uint64 creationHeight = 4;
    uint64 lastUpdateHeight = 5;
}

message CandidateList {
    repeated Candidate candidates = 1;
}

// Blockchain Metadata
message ChainMeta {
    uint64 height = 1;
    string supply = 2;
    int64 numActions = 3;
    int64 tps = 4;
}

// Block Metadata
message BlockMeta {
    string hash = 1;
    uint64 height = 2;
    int64 timestamp = 3;
    int64 numActions = 4;
    string producerAddress = 5;
    string transferAmount = 6;
    string txRoot = 7;
    string receiptRoot = 8;
    string deltaStateDigest = 9;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
// BELOW ARE DEFINITIONS FOR TEST-ONLY MESSAGES!
////////////////////////////////////////////////////////////////////////////////////////////////////
message TestPayload {
    bytes msg_body = 1;
}
