// Copyright (c) 2018 IoTeX
// This is an alpha (internal) release and is not suitable for production. This source code is provided 'as is' and no
// warranties are given as to title or non-infringement, merchantability or fitness for purpose and, to the extent
// permitted by law, all liability for your use of the code is disclaimed. This source code is governed by Apache
// License 2.0 that can be found in the LICENSE file.

// To compile the proto, run:
//      protoc --go_out=plugins=grpc:. *.proto
syntax = "proto3";
package iproto;

message TransferPb {
    // used by state-based model
    bytes amount  = 1;
    string sender = 2;
    string recipient = 3;
    bytes payload  = 4;
    bytes senderPubKey = 5;
    bool isCoinbase = 6;
}

message VotePb {
    uint64 timestamp = 1;
    bytes selfPubkey = 2;
    string voterAddress = 3;  // the address of this node
    string voteeAddress = 4;  // the address this node is voting for
}

message ExecutionPb {
    // ExecutionPb should share these three fields with other Actions
    // TODO: extract these three fields to ActionPb
    uint32 version = 1;
    uint64 nonce = 2;
    bytes signature = 3;
    bytes amount  = 4;
    string executor = 5;
    string contract = 6;
    bytes executorPubKey = 7;
    uint32 gas = 8;
    uint32 gasPrice = 9;
    bytes data = 10;
}

message ActionPb {
    uint32 version = 1;
    uint64 nonce = 2;
    bytes signature = 3;
    oneof action {
        TransferPb transfer = 10;
        VotePb vote = 11;
        ExecutionPb execution = 12;
    }
}

// header of a block
message BlockHeaderPb {
    uint32 version = 1;
    uint32 chainID = 2;
    uint64 height = 3;
    uint64 timestamp = 4;
    bytes prevBlockHash = 5;
    bytes txRoot = 6;
    bytes stateRoot = 7;
    uint32 trnxNumber = 8;
    uint32 trnxDataSize = 9;
    bytes signature = 10;
    bytes pubkey = 11;
}

// block consists of header followed by transactions
// hash of current block can be computed from header hence not stored
message BlockPb {
    BlockHeaderPb header = 1;
    repeated ActionPb actions = 2;
}

// index of block raw data file
message BlockIndex {
    uint64 start = 1;
    uint64 end = 2;
    repeated uint32 offset = 3;
}

message BlockSync {
    uint64 start = 2;
    uint64 end = 3;
}

// block container
// used to send old/existing blocks in block sync
message BlockContainer {
    BlockPb block = 1;
}

message ViewChangeMsg {
    enum ViewChangeType {
        INVALID_VIEW_CHANGE_TYPE = 0;
        PROPOSE = 1;
        PREVOTE = 2;
        VOTE = 3;
    }
    ViewChangeType vctype = 1;
    BlockPb block  = 2;
    bytes blockHash = 3;
    string senderAddr = 4;
    bool decision = 5;
}

// Candidates and list of candidates
message Candidate {
    string address = 1;
    bytes votes = 2;
    bytes pubKey = 3;
    uint64 creationHeight = 4;
    uint64 lastUpdateHeight = 5;
}

message CandidateList {
    repeated Candidate candidates = 1;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
// BELOW ARE DEFINITIONS FOR TEST-ONLY MESSAGES!
////////////////////////////////////////////////////////////////////////////////////////////////////
message TestPayload {
    bytes msg_body = 1;
}