# Golang CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-go/ for more details
version: 2
jobs:

  build_test_local:
    docker:
      - image: iotex/iotex-core-ci:latest
    working_directory: /go/src/github.com/iotexproject/iotex-core
    steps:
      - run: mkdir -p /go/src/github.com/iotexproject/iotex-core && cp -arf /tmp/_circleci_local_build_repo/* /go/src/github.com/iotexproject/iotex-core/
      - run: golint -set_exit_status $(go list ./... | grep -v /vendor/ | grep -v /explorer/idl/ | grep -v /api/idl/)
      - run: ./go.test.sh
      - run: bash <(curl -s https://codecov.io/bash)
      - run: go test -run=XXX -bench=. $(go list ./crypto)
      - run: make minicluster

  build_test_docker:
    docker:
      - image: circleci/golang:1.14.4
    working_directory: ~/apps/iotex-core
    resource_class: large
    steps:
      - checkout
      - run: go get -u golang.org/x/lint/golint
      - run: golint -set_exit_status $(go list ./... | grep -v /vendor/ | grep -v /explorer/idl/ | grep -v /api/idl/)
      - run: ./go.test.sh
#       - run: go test -v -p 4 ./... |grep -v vendor 
      - run: bash <(curl -s https://codecov.io/bash)
      - run: go test -run=XXX -bench=. $(go list ./crypto)
      - run: make minicluster

  build_test_darwin:
    macos:
      xcode: "10.2.0"   # not supported > 10.2.0

    working_directory: ~/iotex-core
#     resource_class: medium+
    steps:
      - checkout
      - run:
          name: install golang 1.14.4
          command: |
            curl -o go1.14.4.darwin-amd64.tar.gz https://dl.google.com/go/go1.14.4.darwin-amd64.tar.gz
            sudo tar -C /usr/local -xzf go1.14.4.darwin-amd64.tar.gz
      - restore_cache:
          keys:
            - go-mod-v1-{{ checksum "go.sum" }} 
      - run: 
          name: go mod
          command: |
            export PATH=$PATH:/usr/local/go/bin
            go mod download
            go mod vendor
      - save_cache:
          key: go-mod-v1-{{ checksum "go.sum" }}
          paths:
              - ~/go/pkg/mod
      - run:
          name: SET GO ENV AND go.test.sh
          command: |
            export PATH=$PATH:/usr/local/go/bin
            ./go.test.sh
            bash <(curl -s https://codecov.io/bash)
            go test -run=XXX -bench=. $(go list ./crypto)
            make minicluster

  build_test_ubuntu:
    machine:
      image: circleci/classic:latest
    working_directory: ~/iotex-core
    steps:
      - checkout
      - run: 
          name: clean go 1.9 update golang 1.14.4
          command: |
            wget https://dl.google.com/go/go1.14.4.linux-amd64.tar.gz
            sudo rm -rf /usr/local/go
            sudo tar -C /usr/local -zxf go1.14.4.linux-amd64.tar.gz
      - restore_cache:
          keys:
            - go-mod-v1-{{ checksum "go.sum" }} 
      - run: go mod download
      - run: go mod vendor
      - save_cache:
          key: go-mod-v1-{{ checksum "go.sum" }}
          paths:
              - ~/go/pkg/mod
      - run:
          name: SET GO ENV AND go.test.sh
          command: |
            ./go.test.sh
            bash <(curl -s https://codecov.io/bash)
            go test -run=XXX -bench=. $(go list ./crypto)
            make minicluster
######################################################################
  nightly_build_docker:
    docker:
      # specify the version
      # - image: iotex/iotex-core-ci:latest
      - image: circleci/golang:${GOLANG_VERSION}

    working_directory: ~/iotex-core
    steps:
      - checkout
      # specify any bash command here prefixed with `run: `
      - run: make nightlybuild

  nightly_bin_build_docker:
    docker:
      - image: circleci/golang:${GOLANG_VERSION}

    working_directory: ~/iotex-core
    steps:
      - checkout
      - run: cd tools/ioctl/ && sh buildcli.sh
      - run: cd tools/actioninjector.v2/ && ./build_injector.sh
      - run:
          name: build bin put s3 (unstable) or github (release)
          command: |
            if [ "${VERSION}" ]; then
                echo "Put bin to github release ${VERSION}"
                go get -u github.com/tcnksm/ghr
                arg="-t ${GITHUB_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} ${VERSION}"
                echo $arg
                ghr $arg tools/ioctl/release/
                ghr $arg tools/actioninjector.v2/release/
            else
                sudo apt-get install python python-pip
                sudo pip install awscli
                aws s3 sync tools/ioctl/release/ ${S3_BUCKET_DIR}
                aws s3 sync tools/actioninjector.v2/release/ ${S3_BUCKET_DIR}
            fi

  nightly_bin_build_darwin:
    macos:
      xcode: "10.2.0"   # not supported > 10.2.0
    working_directory: ~/iotex-core

    steps:
      - checkout
      - run:
          name: install golang ${GOLANG_VERSION}
          command: |
            curl -o go${GOLANG_VERSION}.darwin-amd64.tar.gz https://dl.google.com/go/go${GOLANG_VERSION}.darwin-amd64.tar.gz
            sudo tar -C /usr/local -xzf go${GOLANG_VERSION}.darwin-amd64.tar.gz
      - restore_cache:
          keys:
            - go-mod-v1-{{ checksum "go.sum" }}
      - run:
          name: go mod
          command: |
            export PATH=$PATH:/usr/local/go/bin
            go mod download
            go mod vendor
      - save_cache:
          key: go-mod-v1-{{ checksum "go.sum" }}
          paths:
              - ~/go/pkg/mod
      - run:
          name: SET go env and buildcli.sh,build_injector.sh
          command: |
            export GOPATH=~/go
            export GOROOT="/usr/local/go"
            export PATH=$PATH:$GOPATH/bin:$PATH:$GOROOT/bin
            cd tools/ioctl/ && sh buildcli.sh
            cd ../actioninjector.v2/ && ./build_injector.sh
      - run:
          name: build bin put s3 (unstable) or github (release)
          command: |
            if [ "${VERSION}" ]; then
                echo "Put bin to github release ${VERSION}"
                go get -u github.com/tcnksm/ghr
                arg="-t ${GITHUB_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} ${VERSION}"
                echo $arg
                ghr $arg tools/ioctl/release/
                ghr $arg tools/actioninjector.v2/release/
            else
                sudo pip install awscli
                aws s3 sync tools/ioctl/release/ ${S3_BUCKET_DIR}
                aws s3 sync tools/actioninjector.v2/release/ ${S3_BUCKET_DIR}
            fi

workflows:
  version: 2
  commit:
    jobs:
      #- build_test_ubuntu
      #- build_test_darwin
      - build_test_docker


  scheduled-workflow:
    triggers:
      - schedule:
          cron: "0 7 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - nightly_build_docker
      - nightly_bin_build_docker
      - nightly_bin_build_darwin
