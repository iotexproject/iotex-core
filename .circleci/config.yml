# Golang CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-go/ for more details
version: 2
jobs:
  build_test_docker:
    docker:
      # specify the version
      - image: iotex/iotex-core-ci:latest

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    #### TEMPLATE_NOTE: go expects specific checkout path representing url
    #### expecting it in the form of
    ####   /go/src/github.com/circleci/go-tool
    ####   /go/src/bitbucket.org/circleci/go-tool
    working_directory: /go/src/github.com/iotexproject/iotex-core
    steps:
      - checkout

      # specify any bash command here prefixed with `run: `
      - run: golint -set_exit_status $(go list ./... | grep -v /vendor/ | grep -v /explorer/idl/ | grep -v /api/idl/)
      - run: ./go.test.sh
      - run: bash <(curl -s https://codecov.io/bash)
      - run: go test -run=XXX -bench=. $(go list ./crypto)
      - run: make minicluster

  build_test_darwin:
    macos:
      xcode: "10.2.0"   # not supported > 10.2.0
    working_directory: ~/go/src/github.com/iotexproject/iotex-core

    steps:
      - checkout
      - run:
          name: brew install golang
      - run:
          name: SET GO ENV
          command: |
            export GOPATH=~/go
            export GOROOT="$(brew --prefix golang)/libexec"
            export LD_LIBRARY_PATH=:~/go/src/github.com/iotexproject/iotex-core/crypto/lib
            export PATH=$PATH:$GOPATH/bin
            export PATH=$PATH:$GOROOT/bin
            set -e
            for d in $(go list ./... | grep -v 'vendor\|protocol/vote'); do
                go test -short -v -coverprofile=profile.out -covermode=count "$d"
                if [ -f profile.out ]; then
                    cat profile.out >> coverage.txt
                    rm profile.out
                fi
            done
      - run: bash <(curl -s https://codecov.io/bash)
      - run: go test -run=XXX -bench=. $(go list ./crypto)
      - run: make minicluster

  build_test_ubuntu:
    machine:
      image: circleci/classic:latest

    working_directory: ~/go/src/github.com/iotexproject/iotex-core
    steps:
      - checkout
      - run: sudo apt install golang-1.11
      - run: go version
      - run:
          name: GET OS EVN install golang
          command: |
            pwd && cat /etc/issue  && uname -a
            export GOROOT="/usr/local/go"
            export GOPATH=~/go
            export LD_LIBRARY_PATH=:"/home/circleci/go/src/github.com/iotexproject/iotex-core/crypto/lib"
            export PATH=$GOPATH/bin:$GOROOT/bin:$PATH
            go env
            ./go.test.sh
      - run: bash <(curl -s https://codecov.io/bash)
      - run: go test -run=XXX -bench=. $(go list ./crypto)
      - run: make minicluster            
######################################################################
  nightly_build_docker:
    docker:
      # specify the version
      - image: iotex/iotex-core-ci:latest

    working_directory: /go/src/github.com/iotexproject/iotex-core
    steps:
      - checkout
      # specify any bash command here prefixed with `run: `
      - run: make nightlybuild

  nightly_ioctl_build_docker:
    docker:
      # specify the version
      - image: iotex/iotex-core-ci:latest

    working_directory: /go/src/github.com/iotexproject/iotex-core
    steps:
      - checkout
      - run: cd cli/ioctl/ && sh buildcli.sh
      - run: sudo apt install awscli
      - run:
          name: Deploy to S3
          command: aws s3 cp release/* ${S3_BUCKET_DIR}

  nightly_ioctl_build_darwin:
    macos:
      xcode: "10.2.0"   # not supported > 10.2.0

    working_directory: ~/go/src/github.com/iotexproject/iotex-core

    steps:
      - checkout
      - run: cd cli/ioctl/ && sh buildcli.sh
      - run: pip install awscli
      - run:
          name: Deploy to S3
          command: aws s3 cp release/* ${S3_BUCKET_DIR}

workflows:
  version: 2
  commit:
    jobs:
      #- build_test_docker
      #- build_test_darwin
      - build_test_ubuntu
  scheduled-workflow:
    triggers:
      - schedule:
          cron: "0 7 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - nightly_build_docker
      - nightly_ioctl_build_docker
      - nightly_ioctl_build_darwin
