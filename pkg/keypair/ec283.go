// Copyright (c) 2019 IoTeX
// This is an alpha (internal) release and is not suitable for production. This source code is provided 'as is' and no
// warranties are given as to title or non-infringement, merchantability or fitness for purpose and, to the extent
// permitted by law, all liability for your use of the code is disclaimed. This source code is governed by Apache
// License 2.0 that can be found in the LICENSE file.

package keypair

import "github.com/pkg/errors"

const (
	ec283pubKeyLength  = 72
	ec283privKeyLength = 36
)

var (
	// ZeroPublicKey is an instance of PublicKey consisting of all zeros
	ZeroPublicKey EC283PublicKey
	// ZeroPrivateKey is an instance of PrivateKey consisting of all zeros
	ZeroPrivateKey EC283PrivateKey
	// ErrPublicKey indicates the error of public key
	ErrPublicKey = errors.New("invalid public key")
	// ErrPrivateKey indicates the error of private key
	ErrPrivateKey = errors.New("invalid private key")
)

type (
	// EC283PublicKey indicates the type of 72 byte public key generated by EC283 crypto library
	EC283PublicKey [ec283pubKeyLength]byte
	// EC283PrivateKey indicates the type 36 byte public key generated by EC283 library
	EC283PrivateKey [ec283privKeyLength]byte
)

// BytesToEC283PublicKey converts a byte slice to PublicKey
func BytesToEC283PublicKey(pubKey []byte) (EC283PublicKey, error) {
	if len(pubKey) != ec283pubKeyLength {
		return ZeroPublicKey, errors.Wrap(ErrPublicKey, "invalid public key length")
	}
	var publicKey EC283PublicKey
	copy(publicKey[:], pubKey)
	return publicKey, nil
}

// BytesToEC283PrivateKey converts a byte slice to PrivateKey
func BytesToEC283PrivateKey(priKey []byte) (EC283PrivateKey, error) {
	if len(priKey) != ec283privKeyLength {
		return ZeroPrivateKey, errors.Wrap(ErrPrivateKey, "invalid private key length")
	}
	var privateKey EC283PrivateKey
	copy(privateKey[:], priKey)
	return privateKey, nil
}
