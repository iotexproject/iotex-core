// Code generated by MockGen. DO NOT EDIT.
// Source: ./consensus/endorsedmessage.go

// Package consensus is a generated GoMock package.
package consensus

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	endorsement "github.com/iotexproject/iotex-core/endorsement"
)

// MockEndorsedMessage is a mock of EndorsedMessage interface.
type MockEndorsedMessage struct {
	ctrl     *gomock.Controller
	recorder *MockEndorsedMessageMockRecorder
}

// MockEndorsedMessageMockRecorder is the mock recorder for MockEndorsedMessage.
type MockEndorsedMessageMockRecorder struct {
	mock *MockEndorsedMessage
}

// NewMockEndorsedMessage creates a new mock instance.
func NewMockEndorsedMessage(ctrl *gomock.Controller) *MockEndorsedMessage {
	mock := &MockEndorsedMessage{ctrl: ctrl}
	mock.recorder = &MockEndorsedMessageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEndorsedMessage) EXPECT() *MockEndorsedMessageMockRecorder {
	return m.recorder
}

// Endorsement mocks base method.
func (m *MockEndorsedMessage) Endorsement() *endorsement.Endorsement {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Endorsement")
	ret0, _ := ret[0].(*endorsement.Endorsement)
	return ret0
}

// Endorsement indicates an expected call of Endorsement.
func (mr *MockEndorsedMessageMockRecorder) Endorsement() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Endorsement", reflect.TypeOf((*MockEndorsedMessage)(nil).Endorsement))
}

// Message mocks base method.
func (m *MockEndorsedMessage) Message() interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Message")
	ret0, _ := ret[0].(interface{})
	return ret0
}

// Message indicates an expected call of Message.
func (mr *MockEndorsedMessageMockRecorder) Message() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Message", reflect.TypeOf((*MockEndorsedMessage)(nil).Message))
}
