// Code generated by MockGen. DO NOT EDIT.
// Source: ./dispatcher/subscriber.go

// Package dispatcher is a generated GoMock package.
package dispatcher

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	iotexrpc "github.com/iotexproject/iotex-proto/golang/iotexrpc"
	iotextypes "github.com/iotexproject/iotex-proto/golang/iotextypes"
	peer "github.com/libp2p/go-libp2p-core/peer"
)

// MockSubscriber is a mock of Subscriber interface.
type MockSubscriber struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriberMockRecorder
}

// MockSubscriberMockRecorder is the mock recorder for MockSubscriber.
type MockSubscriberMockRecorder struct {
	mock *MockSubscriber
}

// NewMockSubscriber creates a new mock instance.
func NewMockSubscriber(ctrl *gomock.Controller) *MockSubscriber {
	mock := &MockSubscriber{ctrl: ctrl}
	mock.recorder = &MockSubscriberMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscriber) EXPECT() *MockSubscriberMockRecorder {
	return m.recorder
}

// HandleAction mocks base method.
func (m *MockSubscriber) HandleAction(arg0 context.Context, arg1 *iotextypes.Action) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleAction", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleAction indicates an expected call of HandleAction.
func (mr *MockSubscriberMockRecorder) HandleAction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleAction", reflect.TypeOf((*MockSubscriber)(nil).HandleAction), arg0, arg1)
}

// HandleBlock mocks base method.
func (m *MockSubscriber) HandleBlock(arg0 context.Context, arg1 string, arg2 *iotextypes.Block) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleBlock", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleBlock indicates an expected call of HandleBlock.
func (mr *MockSubscriberMockRecorder) HandleBlock(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleBlock", reflect.TypeOf((*MockSubscriber)(nil).HandleBlock), arg0, arg1, arg2)
}

// HandleConsensusMsg mocks base method.
func (m *MockSubscriber) HandleConsensusMsg(arg0 *iotextypes.ConsensusMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleConsensusMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleConsensusMsg indicates an expected call of HandleConsensusMsg.
func (mr *MockSubscriberMockRecorder) HandleConsensusMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleConsensusMsg", reflect.TypeOf((*MockSubscriber)(nil).HandleConsensusMsg), arg0)
}

// HandleNodeInfo mocks base method.
func (m *MockSubscriber) HandleNodeInfo(arg0 context.Context, arg1 string, arg2 *iotextypes.NodeInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleNodeInfo", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleNodeInfo indicates an expected call of HandleNodeInfo.
func (mr *MockSubscriberMockRecorder) HandleNodeInfo(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleNodeInfo", reflect.TypeOf((*MockSubscriber)(nil).HandleNodeInfo), arg0, arg1, arg2)
}

// HandleNodeInfoRequest mocks base method.
func (m *MockSubscriber) HandleNodeInfoRequest(arg0 context.Context, arg1 peer.AddrInfo, arg2 *iotextypes.NodeInfoRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleNodeInfoRequest", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleNodeInfoRequest indicates an expected call of HandleNodeInfoRequest.
func (mr *MockSubscriberMockRecorder) HandleNodeInfoRequest(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleNodeInfoRequest", reflect.TypeOf((*MockSubscriber)(nil).HandleNodeInfoRequest), arg0, arg1, arg2)
}

// HandleSyncRequest mocks base method.
func (m *MockSubscriber) HandleSyncRequest(arg0 context.Context, arg1 peer.AddrInfo, arg2 *iotexrpc.BlockSync) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleSyncRequest", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleSyncRequest indicates an expected call of HandleSyncRequest.
func (mr *MockSubscriberMockRecorder) HandleSyncRequest(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleSyncRequest", reflect.TypeOf((*MockSubscriber)(nil).HandleSyncRequest), arg0, arg1, arg2)
}

// ReportFullness mocks base method.
func (m *MockSubscriber) ReportFullness(arg0 context.Context, arg1 iotexrpc.MessageType, arg2 float32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReportFullness", arg0, arg1, arg2)
}

// ReportFullness indicates an expected call of ReportFullness.
func (mr *MockSubscriberMockRecorder) ReportFullness(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportFullness", reflect.TypeOf((*MockSubscriber)(nil).ReportFullness), arg0, arg1, arg2)
}
