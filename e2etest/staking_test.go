// Copyright (c) 2020 IoTeX Foundation
// This is an alpha (internal) release and is not suitable for production. This source code is provided 'as is' and no
// warranties are given as to title or non-infringement, merchantability or fitness for purpose and, to the extent
// permitted by law, all liability for your use of the code is disclaimed. This source code is governed by Apache
// License 2.0 that can be found in the LICENSE file.

package e2etest

import (
	"bytes"
	"context"
	"encoding/hex"
	"math/big"
	"strings"
	"testing"
	"time"

	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/stretchr/testify/require"

	"github.com/iotexproject/go-pkgs/hash"
	"github.com/iotexproject/iotex-address/address"

	"github.com/iotexproject/iotex-core/action"
	"github.com/iotexproject/iotex-core/action/protocol"
	"github.com/iotexproject/iotex-core/action/protocol/poll"
	"github.com/iotexproject/iotex-core/blockchain/genesis"
	"github.com/iotexproject/iotex-core/config"
	"github.com/iotexproject/iotex-core/pkg/unit"
	"github.com/iotexproject/iotex-core/pkg/util/byteutil"
	"github.com/iotexproject/iotex-core/server/itx"
	"github.com/iotexproject/iotex-core/state"
	"github.com/iotexproject/iotex-core/test/identityset"
	"github.com/iotexproject/iotex-core/testutil"
)

func TestStakingContract(t *testing.T) {
	require := require.New(t)

	testReadContract := func(cfg config.Config, t *testing.T) {
		ctx := context.Background()

		// Create a new blockchain
		svr, err := itx.NewServer(cfg)
		require.NoError(err)
		require.NoError(svr.Start(ctx))
		defer func() {
			require.NoError(svr.Stop(ctx))
		}()

		chainID := cfg.Chain.ID
		bc := svr.ChainService(chainID).Blockchain()
		sf := svr.ChainService(chainID).StateFactory()
		ap := svr.ChainService(chainID).ActionPool()
		dao := svr.ChainService(chainID).BlockDAO()
		registry := svr.ChainService(chainID).Registry()
		require.NotNil(bc)
		require.NotNil(registry)
		admin := identityset.PrivateKey(26)
		state0 := hash.BytesToHash160(identityset.Address(26).Bytes())
		var s state.Account
		_, err = sf.State(&s, protocol.LegacyKeyOption(state0))
		require.NoError(err)
		require.Equal(unit.ConvertIotxToRau(100000000), s.Balance)

		// deploy staking contract
		data, _ := hex.DecodeString("")
		fixedTime := time.Unix(cfg.Genesis.Timestamp, 0)
		ex, err := testutil.SignedExecution(action.EmptyAddress, admin, 1, big.NewInt(0), 10000000, big.NewInt(testutil.TestGasPriceInt64), data)
		require.NoError(err)

		deployHash := ex.Hash()
		require.NoError(ap.Add(context.Background(), ex))
		blk, err := bc.MintNewBlock(fixedTime)
		require.NoError(err)
		require.NoError(bc.CommitBlock(blk))
		r, err := dao.GetReceiptByActionHash(deployHash, 1)
		require.NoError(err)
		require.Equal(r.ContractAddress, "io1nw4l6qpph9apnzrmfk3u2dk28y5e05dpnk6nv0")

		// 20 voters, each create 60 buckets
		staking, err := newStakingABI()
		require.NoError(err)
		numVoter := 20
		numBucket := uint64(60)
		fixedAmount := unit.ConvertIotxToRau(200)
		for i := 0; i < numVoter; i++ {
			sk := identityset.PrivateKey(i)
			addr := identityset.Address(i).String()
			for nonce := uint64(0); nonce < numBucket; nonce++ {
				data, err := staking.createStake(addr, nonce)
				require.NoError(err)
				require.True(len(data) > 0)
				ex, err := testutil.SignedExecution(r.ContractAddress, sk, nonce+1, fixedAmount, 1000000, big.NewInt(testutil.TestGasPriceInt64), data)
				require.NoError(err)
				require.NoError(ap.Add(context.Background(), ex))
			}
			blk, err = bc.MintNewBlock(fixedTime)
			require.NoError(err)
			require.NoError(bc.CommitBlock(blk))

			state0 = hash.BytesToHash160(identityset.Address(i).Bytes())
			_, err = sf.State(&s, protocol.LegacyKeyOption(state0))
			require.NoError(err)
			require.Equal(unit.ConvertIotxToRau(100000000-int64(numBucket)*200), s.Balance)
		}

		// read from contract
		ns, err := poll.NewNativeStaking(func(ctx context.Context, contract string, params []byte, correctGas bool) ([]byte, error) {
			gasLimit := uint64(1000000)
			if correctGas {
				gasLimit *= 10
			}
			ex, err := action.NewExecution(contract, 1, big.NewInt(0), gasLimit, big.NewInt(0), params)
			if err != nil {
				return nil, err
			}

			addr, err := address.FromString(address.ZeroAddress)
			if err != nil {
				return nil, err
			}

			data, _, err := sf.SimulateExecution(ctx, addr, ex, dao.GetBlockHash)

			return data, err
		})
		require.NoError(err)
		ns.SetContract(r.ContractAddress)

		height, err := dao.Height()
		require.NoError(err)
		blk, err = dao.GetBlockByHeight(height)
		require.NoError(err)
		ctx = protocol.WithBlockchainCtx(
			protocol.WithRegistry(ctx, registry),
			protocol.BlockchainCtx{
				Genesis: cfg.Genesis,
				Tip: protocol.TipInfo{
					Height:    height,
					Hash:      blk.HashHeader(),
					Timestamp: blk.Timestamp(),
				},
			})
		bcCtx := protocol.MustGetBlockchainCtx(ctx)
		tally, err := ns.Votes(ctx, bcCtx.Tip.Timestamp, false)
		require.Equal(poll.ErrNoData, err)
		tally, err = ns.Votes(ctx, bcCtx.Tip.Timestamp, true)
		require.NoError(err)
		require.Equal(numVoter*int(numBucket), len(tally.Candidates))
		require.Equal(numVoter*int(numBucket), len(tally.Buckets))

		// verify all read buckets
		for i := 0; i < numVoter; i++ {
			addr := identityset.Address(i).String()
			addrBytes := identityset.Address(i).Bytes()
			for nonce := uint64(0); nonce < numBucket; nonce++ {
				v := tally.Buckets[i*int(numBucket)+int(nonce)]
				name := fakeCanName(addr, nonce)
				require.Equal(0, bytes.Compare(name[:], v.Candidate()))
				require.Equal(0, bytes.Compare(addrBytes, v.Voter()))
				require.Equal(fixedAmount, v.Amount())
				require.Equal(time.Duration(nonce*7*24)*time.Hour, v.Duration())
				require.False(v.Decay())

				c, ok := tally.Candidates[name]
				require.True(ok)
				require.Equal(0, bytes.Compare(name[:], c.CanName))
				require.True(c.Votes.Cmp(fixedAmount) >= 0)
			}
		}
	}

	cfg := config.Default
	testTriePath, err := testutil.PathOfTempFile("trie")
	require.NoError(err)
	testDBPath, err := testutil.PathOfTempFile("db")
	require.NoError(err)
	testIndexPath, err := testutil.PathOfTempFile("index")
	require.NoError(err)
	testBloomfilterIndexPath, err := testutil.PathOfTempFile("bloomfilterindex")
	require.NoError(err)
	testCandidateIndexPath, err := testutil.PathOfTempFile("candidateindex")
	require.NoError(err)
	testSystemLogPath, err := testutil.PathOfTempFile("systemlog")
	require.NoError(err)
	testConsensusPath, err := testutil.PathOfTempFile("consensus")
	require.NoError(err)
	defer func() {
		testutil.CleanupPath(t, testTriePath)
		testutil.CleanupPath(t, testDBPath)
		testutil.CleanupPath(t, testIndexPath)
		testutil.CleanupPath(t, testBloomfilterIndexPath)
		testutil.CleanupPath(t, testCandidateIndexPath)
		testutil.CleanupPath(t, testSystemLogPath)
		testutil.CleanupPath(t, testConsensusPath)
		// clear the gateway
		delete(cfg.Plugins, config.GatewayPlugin)
	}()

	cfg.ActPool.MinGasPriceStr = "0"
	cfg.Chain.TrieDBPath = testTriePath
	cfg.Chain.ChainDBPath = testDBPath
	cfg.Chain.IndexDBPath = testIndexPath
	cfg.Chain.BloomfilterIndexDBPath = testBloomfilterIndexPath
	cfg.Chain.CandidateIndexDBPath = testCandidateIndexPath
	cfg.System.SystemLogDBPath = testSystemLogPath
	cfg.Consensus.RollDPoS.ConsensusDBPath = testConsensusPath
	cfg.Chain.ProducerPrivKey = "a000000000000000000000000000000000000000000000000000000000000000"
	cfg.Consensus.Scheme = config.RollDPoSScheme
	cfg.Genesis.NumDelegates = 1
	cfg.Genesis.NumSubEpochs = 10
	cfg.Genesis.Delegates = []genesis.Delegate{
		{
			OperatorAddrStr: identityset.Address(0).String(),
			RewardAddrStr:   identityset.Address(0).String(),
			VotesStr:        "10",
		},
	}
	cfg.Genesis.PollMode = "lifeLong"
	cfg.Genesis.EnableGravityChainVoting = false
	cfg.Plugins[config.GatewayPlugin] = true
	cfg.Chain.EnableAsyncIndexWrite = false
	cfg.Genesis.AleutianBlockHeight = 2

	t.Run("test read staking contract", func(t *testing.T) {
		testReadContract(cfg, t)
	})
}

type stakingABI struct {
	abi abi.ABI
}

func newStakingABI() (*stakingABI, error) {
	abi, err := abi.JSON(strings.NewReader(poll.NsAbi))
	if err != nil {
		return nil, err
	}
	return &stakingABI{
		abi: abi,
	}, nil
}

func fakeCanName(addr string, index uint64) [12]byte {
	var name [12]byte
	copy(name[:4], addr[3:])
	copy(name[4:], byteutil.Uint64ToBytesBigEndian(index))
	return name
}

func (s *stakingABI) createStake(addr string, index uint64) ([]byte, error) {
	name := fakeCanName(addr, index)
	data := hash.Hash256b(name[:])
	return s.abi.Pack("createPygg", name, big.NewInt(7*int64(index)), true, data[:])
}
