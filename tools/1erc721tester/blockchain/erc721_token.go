// Copyright (c) 2019 IoTeX
// This is an alpha (internal) release and is not suitable for production. This source code is provided 'as is' and no
// warranties are given as to title or non-infringement, merchantability or fitness for purpose and, to the extent
// permitted by law, all liability for your use of the code is disclaimed. This source code is governed by Apache
// License 2.0 that can be found in the LICENSE file.

package blockchain

import (
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/crypto"
	"github.com/pkg/errors"
	//"math/big"

	"github.com/iotexproject/iotex-core/address"
)

const (
	Erc721Binary="6080604052600060208190527f67be87c3ff9960ca1e9cfac5cab2ff4747269cf9ed20c9b7306235ac35a491c5805460ff1990811660019081179092557f80ac58cd000000000000000000000000000000000000000000000000000000009092527ff7815fccbf112960a73756e185887fedcb9fc64ca0a16cc5923b7960ed7808008054909216179055600580546001600160a01b03191633179055610ebf806100aa6000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c80636352211e11610097578063a22cb46511610066578063a22cb46514610316578063b88d4fde14610344578063e985e9c5146103d4578063f2fde38b14610402576100f5565b80636352211e146102b157806370a08231146102ce57806371d78b12146103065780638da5cb5b1461030e576100f5565b806323b872dd116100d357806323b872dd1461019c57806340c10f19146101d257806342842e0e146101fe578063538ba4f914610234576100f5565b806301ffc9a7146100fa578063081812fc14610135578063095ea7b31461016e575b600080fd5b6101216004803603602081101561011057600080fd5b50356001600160e01b031916610428565b604080519115158252519081900360200190f35b6101526004803603602081101561014b57600080fd5b503561044b565b604080516001600160a01b039092168252519081900360200190f35b61019a6004803603604081101561018457600080fd5b506001600160a01b03813516906020013561048b565b005b61019a600480360360608110156101b257600080fd5b506001600160a01b0381358116916020810135909116906040013561058a565b61019a600480360360408110156101e857600080fd5b506001600160a01b038135169060200135610670565b61019a6004803603606081101561021457600080fd5b506001600160a01b03813581169160208101359091169060400135610739565b61023c610759565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561027657818101518382015260200161025e565b50505050905090810190601f1680156102a35780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610152600480360360208110156102c757600080fd5b503561077e565b6102f4600480360360208110156102e457600080fd5b50356001600160a01b03166107a0565b60408051918252519081900360200190f35b61023c6107c4565b6101526107e9565b61019a6004803603604081101561032c57600080fd5b506001600160a01b03813516906020013515156107f8565b61019a6004803603608081101561035a57600080fd5b6001600160a01b0382358116926020810135909116916040820135919081019060808101606082013564010000000081111561039557600080fd5b8201836020820111156103a757600080fd5b803590602001918460018302840111640100000000831117156103c957600080fd5b509092509050610866565b610121600480360360408110156103ea57600080fd5b506001600160a01b03813581169160200135166108af565b61019a6004803603602081101561041857600080fd5b50356001600160a01b03166108dd565b6001600160e01b0319811660009081526020819052604090205460ff165b919050565b60008181526001602052604081205482906001600160a01b031661046e57600080fd5b50506000908152600260205260409020546001600160a01b031690565b60008181526001602052604090205481906001600160a01b0316338114806104d657506001600160a01b038116600090815260046020908152604080832033845290915290205460ff165b6104df57600080fd5b60008381526001602052604090205483906001600160a01b031661050257600080fd5b6000848152600160205260409020546001600160a01b0390811690861681141561052b57600080fd5b60008581526002602052604080822080546001600160a01b0319166001600160a01b038a811691821790925591518893918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050505050565b60008181526001602052604090205481906001600160a01b0316338114806105c857506000828152600260205260409020546001600160a01b031633145b806105f657506001600160a01b038116600090815260046020908152604080832033845290915290205460ff165b6105ff57600080fd5b60008381526001602052604090205483906001600160a01b031661062257600080fd5b6000848152600160205260409020546001600160a01b03908116908716811461064a57600080fd5b6001600160a01b03861661065d57600080fd5b6106678686610a30565b50505050505050565b6005546040805180820190915260068152600160d01b65303138303031026020820152906001600160a01b0316331461072a57604051600160e51b62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360005b838110156106ef5781810151838201526020016106d7565b50505050905090810190601f16801561071c5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506107358282610aab565b5050565b61075483838360405180602001604052806000815250610b26565b505050565b604051806040016040528060068152602001600160d11b6518189c1818190281525081565b6000818152600160205260409020546001600160a01b03168061044657600080fd5b60006001600160a01b0382166107b557600080fd5b6107be82610d40565b92915050565b604051806040016040528060068152602001600160d01b653031383030310281525081565b6005546001600160a01b031681565b3360008181526004602090815260408083206001600160a01b03871680855290835292819020805460ff1916861515908117909155815190815290519293927f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31929181900390910190a35050565b6108a885858585858080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610b2692505050565b5050505050565b6001600160a01b03918216600090815260046020908152604080832093909416825291909152205460ff1690565b6005546040805180820190915260068152600160d01b65303138303031026020820152906001600160a01b0316331461095a57604051600160e51b62461bcd0281526020600482018181528351602484015283519092839260449091019190850190808383600083156106ef5781810151838201526020016106d7565b506040805180820190915260068152600160d11b6518189c1818190260208201526001600160a01b0382166109d357604051600160e51b62461bcd0281526020600482018181528351602484015283519092839260449091019190850190808383600083156106ef5781810151838201526020016106d7565b506005546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600580546001600160a01b0319166001600160a01b0392909216919091179055565b6000818152600160205260409020546001600160a01b0316610a5182610d5b565b610a5b8183610d98565b610a658383610dfa565b81836001600160a01b0316826001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b6001600160a01b038216610abe57600080fd5b6000818152600160205260409020546001600160a01b031615610ae057600080fd5b610aea8282610dfa565b60405181906001600160a01b038416906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60008281526001602052604090205482906001600160a01b031633811480610b6457506000828152600260205260409020546001600160a01b031633145b80610b9257506001600160a01b038116600090815260046020908152604080832033845290915290205460ff165b610b9b57600080fd5b60008481526001602052604090205484906001600160a01b0316610bbe57600080fd5b6000858152600160205260409020546001600160a01b039081169088168114610be657600080fd5b6001600160a01b038716610bf957600080fd5b610c038787610a30565b610c15876001600160a01b0316610e7d565b15610d3657604051600160e11b630a85bd0102815233600482018181526001600160a01b038b81166024850152604484018a9052608060648501908152895160848601528951600095928d169463150b7a029490938f938e938e939260a4019060208501908083838e5b83811015610c97578181015183820152602001610c7f565b50505050905090810190601f168015610cc45780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b158015610ce657600080fd5b505af1158015610cfa573d6000803e3d6000fd5b505050506040513d6020811015610d1057600080fd5b505190506001600160e01b03198116600160e11b630a85bd010214610d3457600080fd5b505b5050505050505050565b6001600160a01b031660009081526003602052604090205490565b6000818152600260205260409020546001600160a01b031615610d9557600081815260026020526040902080546001600160a01b03191690555b50565b6000818152600160205260409020546001600160a01b03838116911614610dbe57600080fd5b6001600160a01b0390911660009081526003602090815260408083208054600019019055928252600190522080546001600160a01b0319169055565b6000818152600160205260409020546001600160a01b031615610e1c57600080fd5b600081815260016020818152604080842080546001600160a01b0319166001600160a01b0388169081179091558452600390915290912054610e5d91610e83565b6001600160a01b0390921660009081526003602052604090209190915550565b3b151590565b818101828110156107be57600080fdfea165627a7a72305820e37aa6853d51faeb24e4bcd756408ac95c3da8bab8814a535e1abb61807cd30b0029"

)

type (
	// FpToken is an interface for an fp token
	Erc721Token interface {
		Contract
		CreateToken(string,string) (string, error)
		Balance(string) (string, error)
		//Transfer(string, string, string, string, int64) (string, error)
		SetRegistry(string) Erc721Token
	}

	erc721Token struct {
		Contract
		manage      string // address of Management
		manageProxy string // address of ManagementProxy
		eapStorage  string // address of EapStorage
		riskLock    string // address of TokenRiskLock
		registry    string // address of Registry
		cdp         string // address of CdpManager
		stbToken    string // address of stable token
	}
)

// NewErc721Token creates a new Erc721Token
func NewErc721Token(exp string) Erc721Token {
	return &erc721Token{Contract: NewContract(exp)}
}

func (f *erc721Token) CreateToken(tokenid, creditor string) (string, error) {

	addrCreditor, err := address.FromString(creditor)
	if err != nil {
		return "", errors.Errorf("invalid creditor address = %s", creditor)
	}
	//function mint(address _to,uint256 _tokenId)
	//keccak256("Deposit(address,hash256,uint256)")
	//hash:=keccak256("mint(address,uint256)")
	hash:=crypto.Keccak256([]byte("mint(address,uint256)"))[:4]
	//h, err := f.Call("5582e770",addrCreditor.Bytes(),[]byte(tokenid))
	hashString:=common.Bytes2Hex(hash)
	h, err := f.SetAddress(f.registry).Call(hashString,addrCreditor.Bytes(),[]byte(tokenid))
	if err != nil {
		return h, errors.Wrapf(err, "call failed to create")
	}

	if _, err := f.CheckCallResult(h); err != nil {
		return h, errors.Wrapf(err, "check failed to create")
	}
	return h, nil
}
func (f *erc721Token) Balance(creditor string) (string, error) {

	addrCreditor, err := address.FromString(creditor)
	if err != nil {
		return "", errors.Errorf("invalid creditor address = %s", creditor)
	}
	//function mint(address _to,uint256 _tokenId)
	//keccak256("Deposit(address,hash256,uint256)")
	//hash:=keccak256("mint(address,uint256)")
	hash:=crypto.Keccak256([]byte("balanceOf(address)"))[:4]
	//h, err := f.Call("5582e770",addrCreditor.Bytes(),[]byte(tokenid))
	hashString:=common.Bytes2Hex(hash)
	h, err := f.Call(hashString,addrCreditor.Bytes())
	if err != nil {
		return h, errors.Wrapf(err, "call failed to get balance")
	}

	if _, err := f.CheckCallResult(h); err != nil {
		return h, errors.Wrapf(err, "check failed to get balance")
	}
	return h, nil
}
func (f *erc721Token) SetRegistry(reg string) Erc721Token {
	f.registry = reg
	return f
}
//
//func (f *erc721Token) Transfer(token, sender, prvkey, receiver string, amount int64) (string, error) {
//	_, err := address.FromString(sender)
//	if err != nil {
//		return "", errors.Errorf("invalid account address = %s", sender)
//	}
//	addrReceiver, err := address.FromString(receiver)
//	if err != nil {
//		return "", errors.Errorf("invalid account address = %s", receiver)
//	}
//	// transfer to receiver
//	h, err := f.SetAddress(token).
//		SetExecutor(sender).
//		SetPrvKey(prvkey).
//		Call("a9059cbb", addrReceiver.Bytes(), big.NewInt(amount).Bytes())
//	if err != nil {
//		return h, errors.Wrap(err, "call transfer failed")
//	}
//
//	if _, err := f.CheckCallResult(h); err != nil {
//		return h, errors.Wrap(err, "check transfer failed")
//	}
//	return h, nil
//}

