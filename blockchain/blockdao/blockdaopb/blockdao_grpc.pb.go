// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: blockdao.proto

package blockdaopb

import (
	context "context"
	iotextypes "github.com/iotexproject/iotex-proto/golang/iotextypes"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BlockDAOServiceClient is the client API for BlockDAOService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BlockDAOServiceClient interface {
	Height(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*BlockHeightResponse, error)
	GetBlockHash(ctx context.Context, in *BlockHeightRequest, opts ...grpc.CallOption) (*BlockHashResponse, error)
	GetBlockHeight(ctx context.Context, in *BlockHashRequest, opts ...grpc.CallOption) (*BlockHeightResponse, error)
	GetBlock(ctx context.Context, in *BlockHashRequest, opts ...grpc.CallOption) (*GetBlockResponse, error)
	GetBlockByHeight(ctx context.Context, in *BlockHeightRequest, opts ...grpc.CallOption) (*GetBlockResponse, error)
	GetReceipts(ctx context.Context, in *BlockHeightRequest, opts ...grpc.CallOption) (*iotextypes.Receipts, error)
	ContainsTransactionLog(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ContainsTransactionLogResponse, error)
	TransactionLogs(ctx context.Context, in *BlockHeightRequest, opts ...grpc.CallOption) (*TransactionLogsResponse, error)
	Header(ctx context.Context, in *BlockHashRequest, opts ...grpc.CallOption) (*HeaderResponse, error)
	HeaderByHeight(ctx context.Context, in *BlockHeightRequest, opts ...grpc.CallOption) (*HeaderResponse, error)
	FooterByHeight(ctx context.Context, in *BlockHeightRequest, opts ...grpc.CallOption) (*FooterResponse, error)
}

type blockDAOServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBlockDAOServiceClient(cc grpc.ClientConnInterface) BlockDAOServiceClient {
	return &blockDAOServiceClient{cc}
}

func (c *blockDAOServiceClient) Height(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*BlockHeightResponse, error) {
	out := new(BlockHeightResponse)
	err := c.cc.Invoke(ctx, "/blockdaopb.BlockDAOService/Height", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockDAOServiceClient) GetBlockHash(ctx context.Context, in *BlockHeightRequest, opts ...grpc.CallOption) (*BlockHashResponse, error) {
	out := new(BlockHashResponse)
	err := c.cc.Invoke(ctx, "/blockdaopb.BlockDAOService/GetBlockHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockDAOServiceClient) GetBlockHeight(ctx context.Context, in *BlockHashRequest, opts ...grpc.CallOption) (*BlockHeightResponse, error) {
	out := new(BlockHeightResponse)
	err := c.cc.Invoke(ctx, "/blockdaopb.BlockDAOService/GetBlockHeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockDAOServiceClient) GetBlock(ctx context.Context, in *BlockHashRequest, opts ...grpc.CallOption) (*GetBlockResponse, error) {
	out := new(GetBlockResponse)
	err := c.cc.Invoke(ctx, "/blockdaopb.BlockDAOService/GetBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockDAOServiceClient) GetBlockByHeight(ctx context.Context, in *BlockHeightRequest, opts ...grpc.CallOption) (*GetBlockResponse, error) {
	out := new(GetBlockResponse)
	err := c.cc.Invoke(ctx, "/blockdaopb.BlockDAOService/GetBlockByHeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockDAOServiceClient) GetReceipts(ctx context.Context, in *BlockHeightRequest, opts ...grpc.CallOption) (*iotextypes.Receipts, error) {
	out := new(iotextypes.Receipts)
	err := c.cc.Invoke(ctx, "/blockdaopb.BlockDAOService/GetReceipts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockDAOServiceClient) ContainsTransactionLog(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ContainsTransactionLogResponse, error) {
	out := new(ContainsTransactionLogResponse)
	err := c.cc.Invoke(ctx, "/blockdaopb.BlockDAOService/ContainsTransactionLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockDAOServiceClient) TransactionLogs(ctx context.Context, in *BlockHeightRequest, opts ...grpc.CallOption) (*TransactionLogsResponse, error) {
	out := new(TransactionLogsResponse)
	err := c.cc.Invoke(ctx, "/blockdaopb.BlockDAOService/TransactionLogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockDAOServiceClient) Header(ctx context.Context, in *BlockHashRequest, opts ...grpc.CallOption) (*HeaderResponse, error) {
	out := new(HeaderResponse)
	err := c.cc.Invoke(ctx, "/blockdaopb.BlockDAOService/Header", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockDAOServiceClient) HeaderByHeight(ctx context.Context, in *BlockHeightRequest, opts ...grpc.CallOption) (*HeaderResponse, error) {
	out := new(HeaderResponse)
	err := c.cc.Invoke(ctx, "/blockdaopb.BlockDAOService/HeaderByHeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockDAOServiceClient) FooterByHeight(ctx context.Context, in *BlockHeightRequest, opts ...grpc.CallOption) (*FooterResponse, error) {
	out := new(FooterResponse)
	err := c.cc.Invoke(ctx, "/blockdaopb.BlockDAOService/FooterByHeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlockDAOServiceServer is the server API for BlockDAOService service.
// All implementations must embed UnimplementedBlockDAOServiceServer
// for forward compatibility
type BlockDAOServiceServer interface {
	Height(context.Context, *emptypb.Empty) (*BlockHeightResponse, error)
	GetBlockHash(context.Context, *BlockHeightRequest) (*BlockHashResponse, error)
	GetBlockHeight(context.Context, *BlockHashRequest) (*BlockHeightResponse, error)
	GetBlock(context.Context, *BlockHashRequest) (*GetBlockResponse, error)
	GetBlockByHeight(context.Context, *BlockHeightRequest) (*GetBlockResponse, error)
	GetReceipts(context.Context, *BlockHeightRequest) (*iotextypes.Receipts, error)
	ContainsTransactionLog(context.Context, *emptypb.Empty) (*ContainsTransactionLogResponse, error)
	TransactionLogs(context.Context, *BlockHeightRequest) (*TransactionLogsResponse, error)
	Header(context.Context, *BlockHashRequest) (*HeaderResponse, error)
	HeaderByHeight(context.Context, *BlockHeightRequest) (*HeaderResponse, error)
	FooterByHeight(context.Context, *BlockHeightRequest) (*FooterResponse, error)
	mustEmbedUnimplementedBlockDAOServiceServer()
}

// UnimplementedBlockDAOServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBlockDAOServiceServer struct {
}

func (UnimplementedBlockDAOServiceServer) Height(context.Context, *emptypb.Empty) (*BlockHeightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Height not implemented")
}
func (UnimplementedBlockDAOServiceServer) GetBlockHash(context.Context, *BlockHeightRequest) (*BlockHashResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockHash not implemented")
}
func (UnimplementedBlockDAOServiceServer) GetBlockHeight(context.Context, *BlockHashRequest) (*BlockHeightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockHeight not implemented")
}
func (UnimplementedBlockDAOServiceServer) GetBlock(context.Context, *BlockHashRequest) (*GetBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlock not implemented")
}
func (UnimplementedBlockDAOServiceServer) GetBlockByHeight(context.Context, *BlockHeightRequest) (*GetBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockByHeight not implemented")
}
func (UnimplementedBlockDAOServiceServer) GetReceipts(context.Context, *BlockHeightRequest) (*iotextypes.Receipts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReceipts not implemented")
}
func (UnimplementedBlockDAOServiceServer) ContainsTransactionLog(context.Context, *emptypb.Empty) (*ContainsTransactionLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContainsTransactionLog not implemented")
}
func (UnimplementedBlockDAOServiceServer) TransactionLogs(context.Context, *BlockHeightRequest) (*TransactionLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransactionLogs not implemented")
}
func (UnimplementedBlockDAOServiceServer) Header(context.Context, *BlockHashRequest) (*HeaderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Header not implemented")
}
func (UnimplementedBlockDAOServiceServer) HeaderByHeight(context.Context, *BlockHeightRequest) (*HeaderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HeaderByHeight not implemented")
}
func (UnimplementedBlockDAOServiceServer) FooterByHeight(context.Context, *BlockHeightRequest) (*FooterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FooterByHeight not implemented")
}
func (UnimplementedBlockDAOServiceServer) mustEmbedUnimplementedBlockDAOServiceServer() {}

// UnsafeBlockDAOServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlockDAOServiceServer will
// result in compilation errors.
type UnsafeBlockDAOServiceServer interface {
	mustEmbedUnimplementedBlockDAOServiceServer()
}

func RegisterBlockDAOServiceServer(s grpc.ServiceRegistrar, srv BlockDAOServiceServer) {
	s.RegisterService(&BlockDAOService_ServiceDesc, srv)
}

func _BlockDAOService_Height_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockDAOServiceServer).Height(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blockdaopb.BlockDAOService/Height",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockDAOServiceServer).Height(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockDAOService_GetBlockHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockDAOServiceServer).GetBlockHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blockdaopb.BlockDAOService/GetBlockHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockDAOServiceServer).GetBlockHash(ctx, req.(*BlockHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockDAOService_GetBlockHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockDAOServiceServer).GetBlockHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blockdaopb.BlockDAOService/GetBlockHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockDAOServiceServer).GetBlockHeight(ctx, req.(*BlockHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockDAOService_GetBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockDAOServiceServer).GetBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blockdaopb.BlockDAOService/GetBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockDAOServiceServer).GetBlock(ctx, req.(*BlockHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockDAOService_GetBlockByHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockDAOServiceServer).GetBlockByHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blockdaopb.BlockDAOService/GetBlockByHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockDAOServiceServer).GetBlockByHeight(ctx, req.(*BlockHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockDAOService_GetReceipts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockDAOServiceServer).GetReceipts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blockdaopb.BlockDAOService/GetReceipts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockDAOServiceServer).GetReceipts(ctx, req.(*BlockHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockDAOService_ContainsTransactionLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockDAOServiceServer).ContainsTransactionLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blockdaopb.BlockDAOService/ContainsTransactionLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockDAOServiceServer).ContainsTransactionLog(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockDAOService_TransactionLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockDAOServiceServer).TransactionLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blockdaopb.BlockDAOService/TransactionLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockDAOServiceServer).TransactionLogs(ctx, req.(*BlockHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockDAOService_Header_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockDAOServiceServer).Header(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blockdaopb.BlockDAOService/Header",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockDAOServiceServer).Header(ctx, req.(*BlockHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockDAOService_HeaderByHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockDAOServiceServer).HeaderByHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blockdaopb.BlockDAOService/HeaderByHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockDAOServiceServer).HeaderByHeight(ctx, req.(*BlockHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockDAOService_FooterByHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockDAOServiceServer).FooterByHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blockdaopb.BlockDAOService/FooterByHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockDAOServiceServer).FooterByHeight(ctx, req.(*BlockHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BlockDAOService_ServiceDesc is the grpc.ServiceDesc for BlockDAOService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BlockDAOService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blockdaopb.BlockDAOService",
	HandlerType: (*BlockDAOServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Height",
			Handler:    _BlockDAOService_Height_Handler,
		},
		{
			MethodName: "GetBlockHash",
			Handler:    _BlockDAOService_GetBlockHash_Handler,
		},
		{
			MethodName: "GetBlockHeight",
			Handler:    _BlockDAOService_GetBlockHeight_Handler,
		},
		{
			MethodName: "GetBlock",
			Handler:    _BlockDAOService_GetBlock_Handler,
		},
		{
			MethodName: "GetBlockByHeight",
			Handler:    _BlockDAOService_GetBlockByHeight_Handler,
		},
		{
			MethodName: "GetReceipts",
			Handler:    _BlockDAOService_GetReceipts_Handler,
		},
		{
			MethodName: "ContainsTransactionLog",
			Handler:    _BlockDAOService_ContainsTransactionLog_Handler,
		},
		{
			MethodName: "TransactionLogs",
			Handler:    _BlockDAOService_TransactionLogs_Handler,
		},
		{
			MethodName: "Header",
			Handler:    _BlockDAOService_Header_Handler,
		},
		{
			MethodName: "HeaderByHeight",
			Handler:    _BlockDAOService_HeaderByHeight_Handler,
		},
		{
			MethodName: "FooterByHeight",
			Handler:    _BlockDAOService_FooterByHeight_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blockdao.proto",
}
